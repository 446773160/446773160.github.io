<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山不让尘，川不辞盈</title>
  
  <subtitle>山不让尘，川不辞盈</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-05T09:55:53.745Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>山不让尘，川不辞盈</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaAQS介绍</title>
    <link href="http://example.com/2023/03/05/AQS%20%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2023/03/05/AQS%20%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-03-05T07:00:00.000Z</published>
    <updated>2023-03-05T09:55:53.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AQS-简单介绍"><a href="#AQS-简单介绍" class="headerlink" title="AQS 简单介绍"></a>AQS 简单介绍</h1><p>AQS 的全称为（AbstractQueuedSynchronizer），这个类在 java.util.concurrent.locks 包下面。</p><p><img src="https://gitee.com/liao_446773160/imgs/raw/master/image-20230125164021749.png" alt="image-20230125164021749"></p><p>AQS 是一个用来构建锁和同步器的框架，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器， 比如我们提到的 ReentrantLock，Semaphore，其他的诸如 ReentrantReadWriteLock，SynchronousQueue，FutureTask(jdk1.7) 等等皆是基于 AQS 的。当然，我们自己也能利用 AQS 非常轻松容易地构造出符合我们自己需求的同步器。</p><h2 id="AQS原理概述"><a href="#AQS原理概述" class="headerlink" title="AQS原理概述"></a>AQS原理概述</h2><p>AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒 时锁分配的机制，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</p><p><img src="https://pic3.zhimg.com/v2-fc460a17f0a47887f643f91dd5b892f6_r.jpg" alt="img"></p><p>看个 AQS (AbstractQueuedSynchronizer)原理图：</p><p><img src="https://pic1.zhimg.com/80/v2-dca2f36e89cdbbe56b896a107c66cd8c_1440w.webp" alt="img"></p><p>AQS 使用一个 int 成员变量来表示同步状态，通过内置的 FIFO 队列来完成获取资源线程的排队工作。</p><p>AQS 使用 CAS 对该同步状态进行原子操作实现对其值的修改。</p><p>有关CAS同步机制请查看<a href="https://blog.csdn.net/qq_32998153/article/details/79529704">CAS机制</a></p><p><img src="https://pic4.zhimg.com/v2-9aec0785674dfd366e73bd84779221df_r.jpg" alt="img"></p><p>状态信息通过 protected 类型的getState ， setState ， compareAndSetState 进行操作</p><p><img src="https://pic4.zhimg.com/80/v2-84d86e45fb3098e566260111144cee8b_1440w.webp" alt="img"></p><h1 id="AQS对资源的共享"><a href="#AQS对资源的共享" class="headerlink" title="AQS对资源的共享"></a>AQS对资源的共享</h1><p>AQS定义两种对两种资源共享方式</p><h2 id="Exclusive-独占"><a href="#Exclusive-独占" class="headerlink" title="Exclusive(独占)"></a>Exclusive(独占)</h2><p>只有一个线程能执行，如 ReentrantLock。又可分为公平锁和非公平锁,ReentrantLock 同时支持两种锁,下面以 ReentrantLock 对这两种锁的定义做介绍：</p><p><img src="https://pic3.zhimg.com/80/v2-fb7f171d1180ca26512dc20457fe0402_1440w.webp" alt="img"></p><p>下面来看 ReentrantLock 中相关的源代码：</p><p>ReentrantLock 默认采用非公平锁，因为考虑获得更好的性能，通过 boolean 来决定是否用公平锁（传入 true 用公平锁）。</p><p><img src="https://pic2.zhimg.com/80/v2-3cc16d47f156ce3855b73a614d7fea99_1440w.webp" alt="img"></p><p>ReentrantLock 中公平锁的 lock 方法</p><p><img src="https://gitee.com/liao_446773160/imgs/raw/master/image-20230125165931268.png" alt="image-20230125165931268"></p><p>非公平锁的 lock 方法：</p><p><img src="https://gitee.com/liao_446773160/imgs/raw/master/image-20230125165916228.png" alt="image-20230125165916228"></p><p>总结：公平锁和非公平锁只有两处不同：</p><p><img src="https://pic3.zhimg.com/80/v2-cec67b8c4edad24b1aaa7cbde8531dee_1440w.webp" alt="img"></p><p>公平锁和非公平锁就这两点区别，如果这两次 CAS 都不成功，那么后面非公平锁和公平锁是一样的， 都要进入到阻塞队列等待唤醒。</p><p>相对来说，非公平锁会有更好的性能，因为它的吞吐量比较大。当然，非公平锁让获取锁的时间变得更加不确定，可能会导致在阻塞队列中的线程长期处于饥饿状态</p><h2 id="Share-共享"><a href="#Share-共享" class="headerlink" title="Share(共享)"></a>Share(共享)</h2><p><img src="https://pic3.zhimg.com/80/v2-bc930b5ebb9f45117ff3fc8e5bcfb9a2_1440w.webp" alt="img"></p><h1 id="AQS-底层使用了模板方法模式"><a href="#AQS-底层使用了模板方法模式" class="headerlink" title="AQS 底层使用了模板方法模式"></a>AQS 底层使用了模板方法模式</h1><p><img src="https://pic4.zhimg.com/80/v2-6fce218a950175d5c6256cb57b07e83b_1440w.webp" alt="img"></p><p>AQS 使用了模板方法模式，自定义同步器时需要重写下面几个 AQS 提供的模板方法：</p><p><img src="https://pic1.zhimg.com/80/v2-a780ec5cc977d48bece3e397fce2e478_1440w.webp" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-aa5c98c9162bdcee0d3b6b26eef980a6_1440w.webp" alt="img"></p><h1 id="AQS同步方式"><a href="#AQS同步方式" class="headerlink" title="AQS同步方式"></a>AQS同步方式</h1><h2 id="Semaphore-信号量-允许多个线程同时访问"><a href="#Semaphore-信号量-允许多个线程同时访问" class="headerlink" title="Semaphore(信号量)-允许多个线程同时访问"></a>Semaphore(信号量)-允许多个线程同时访问</h2><p>synchronized 和 ReentrantLock 都是一次只允许一个线程访问某个资源，Semaphore(信号量)可以指定多个线程同时访问某个资源。</p><img src="https://pic4.zhimg.com/80/v2-fbef206767420058d453b6ae09c9539b_1440w.webp" alt="img" style="zoom:150%;" /><img src="https://pic2.zhimg.com/80/v2-e36728ba0b97e07b65d7cc2f67147bd1_1440w.webp" alt="img" style="zoom:150%;" /><p>执行 acquire 方法阻塞，直到有一个许可证可以获得然后拿走一个许可证；每个 rerelease方法增加一个许可证，这可能会释放一个阻塞的 acquire 方法。然而，其实并没有实际的许可证这个对象，Semaphore 只是维持了一个可获得许可证的数量。 Semaphore 经常用于限制获取某种资源的线程数量。</p><p>当然一次也可以一次拿取和释放多个许可，不过一般没有必要这样做：</p><img src="https://pic3.zhimg.com/80/v2-ecabe7a527a05a41bfa61786c0e049ae_1440w.webp" alt="img" style="zoom:150%;" /><p>除了 acquire 方法之外，另一个比较常用的与之对应的方法是tryAcquire 方法，该方法如果获取不到许可就立即返回 false。</p><p>Semaphore 有两种模式，公平模式和非公平模式。</p><p><strong>公平模式：</strong> 调用 acquire 的顺序就是获取许可证的顺序，遵循 FIFO；</p><p><strong>非公平模式：</strong> 抢占式的。</p><p>Semaphore 对应的两个构造方法如下：</p><img src="https://pic1.zhimg.com/80/v2-1abe1261ed6b9d28404fd013431ceb10_1440w.webp" alt="img" style="zoom:150%;" /><p><strong>这两个构造方法，都必须提供许可的数量，第二个构造方法可以指定是公平模式还是非公平模式，默认非公平模式。</strong></p><p><strong>补充</strong>：Semaphore与CountDownLatch一样，也是共享锁的一种实现。它默认构造AQS的state为permits。当执行任务的线程数量超出permits,那么多余的线程将会被放入阻塞队列Park,并自旋判断state是否大于0。只有当state大于0的时候，阻塞的线程才能继续执行,此时先前执行任务的线程继续执 行release方法，release方法使得state的变量会加1，那么自旋的线程便会判断成功。如此，每次只有最多不超过permits数量的线程能自旋成功，便限制了执行任务线程的数量。</p><h2 id="CountDownLatch-（倒计时器）"><a href="#CountDownLatch-（倒计时器）" class="headerlink" title="CountDownLatch （倒计时器）"></a>CountDownLatch （倒计时器）</h2><img src="https://pic3.zhimg.com/80/v2-6b26e37874805884746e3cf7ccd2084a_1440w.webp" alt="img" style="zoom:150%;" /><p>缺点：CountDownLatch 是一次性的，计数器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，当 CountDownLatch 使用完毕后，它不能再次被使用。</p><p>CountDownLatch 的两种典型用法</p><img src="https://pic1.zhimg.com/80/v2-97a992a1be03b9b6ff5197a6c2d33dd0_1440w.webp" alt="img" style="zoom:150%;" /><h2 id="CyclicBarrier-循环栅栏"><a href="#CyclicBarrier-循环栅栏" class="headerlink" title="CyclicBarrier(循环栅栏)"></a>CyclicBarrier(循环栅栏)</h2><p>CyclicBarrier 和 CountDownLatch 非常类似，它也可以实现线程间的技术等待，但是它的功能比CountDownLatch 更加复杂和强大。主要应用场景和 CountDownLatch 类似。</p><p>CountDownLatch的实现是基于AQS的，而CycliBarrier是基于 ReentrantLock(ReentrantLock也属于AQS同步器)和 Condition 的.</p><p>CyclicBarrier 的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障 拦截的线程才会继续干活。CyclicBarrier 默认的构造方法是 CyclicBarrier(int parties) ，其参数表示屏障拦截的线程数量，每个线程调用await 方法告诉 CyclicBarrier 我已经到达了屏障，然后当前线程被阻塞。</p><p>再来看一下它的构造函数：</p><img src="https://pic4.zhimg.com/80/v2-75940d63e06796e5378799617ba5dd9b_1440w.webp" alt="img" style="zoom:150%;" /><p>其中，parties 就代表了有拦截的线程的数量，当拦截的线程数量达到这个值的时候就打开栅栏，让所有线程通过。</p>]]></content>
    
    
    <summary type="html">JavaAQS介绍</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java锁机制</title>
    <link href="http://example.com/2023/03/05/%E5%81%8F%E5%90%91%E9%94%81%E3%80%81%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81%E3%80%81%E9%87%8D%E9%87%8F%E7%BA%A7%E9%94%81%E3%80%81%E8%87%AA%E6%97%8B%E9%94%81%E3%80%81%E8%87%AA%E9%80%82%E5%BA%94%E8%87%AA%E6%97%8B%E9%94%81/"/>
    <id>http://example.com/2023/03/05/%E5%81%8F%E5%90%91%E9%94%81%E3%80%81%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81%E3%80%81%E9%87%8D%E9%87%8F%E7%BA%A7%E9%94%81%E3%80%81%E8%87%AA%E6%97%8B%E9%94%81%E3%80%81%E8%87%AA%E9%80%82%E5%BA%94%E8%87%AA%E6%97%8B%E9%94%81/</id>
    <published>2023-03-05T07:00:00.000Z</published>
    <updated>2023-03-05T09:55:07.570Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在对象头中(<code>Object Header</code>)存在两部分。第一部分用于存储对象自身的运行时数据，<code>HashCode</code>、<code>GC Age</code>、<code>锁标记位</code>、<code>是否为偏向锁</code>。等。一般为32位或者64位(视操作系统位数定)。官方称之为<code>Mark Word</code>，它是实现轻量级锁和偏向锁的关键。 另外一部分存储的是指向方法区对象类型数据的指针(<code>Klass Point</code>)，如果对象是数组的话，还会有一个额外的部分用于存储数据的长度。</strong></p><p><a href="https://blog.csdn.net/qq_32998153/article/details/79529704">CAS机制</a></p><h1 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h1><h2 id="偏向锁概念"><a href="#偏向锁概念" class="headerlink" title="偏向锁概念"></a>偏向锁概念</h2><p>偏向锁就是在运行过程中，对象的锁偏向某个线程。即在开启偏向锁机制的情况下，某个线程获得锁，当该线程下次再想要获得锁时，不需要重新申请获得锁（即忽略synchronized关键词），直接就可以执行同步代码，比较适合竞争较少的情况。</p><p><strong>偏向锁的目标是，减少无竞争且只有一个线程使用锁的情况下，使用轻量级锁而产生的性能消耗</strong>。轻量级锁每次申请、释放锁都至少需要一次<code>CAS</code>，但偏向锁只有初始化时需要一次CAS。</p><blockquote><p> 如果明显存在其他线程申请锁，那么偏向锁将很快膨胀为轻量级锁。如果需要，使用参数<code>-XX:-UseBiasedLocking</code>禁止偏向锁优化（默认打开）。</p></blockquote><p><img src="https://ask.qcloudimg.com/http-save/7151457/9i5yhfj7cm.png?imageView2/2/w/1620" alt="img"></p><h2 id="偏向锁获取过程"><a href="#偏向锁获取过程" class="headerlink" title="偏向锁获取过程"></a>偏向锁获取过程</h2><ol><li>查看<code>Mark Word</code>中偏向锁的标识以及锁标志位，若是否为偏向锁为1，并且锁标志位为01，则该锁为可偏向状态。</li><li>若该锁为可偏向状态，判断<code>Mark Word</code>中的线程ID与当前线程ID是否相等，如果相同，则直接执行同步代码，否则通过<code>CAS</code>操作竞争锁。</li><li>如果竞争成功，将<code>Mark Word</code>中线程ID设置为当前线程ID，然后执行同步代码。</li><li>如果竞争失败，说明有其他线程竞争。持有偏向锁状态的线程在没有字节码正在执行的情况下释放锁，然后恢复到未锁定状态或者膨胀为轻量级锁。</li></ol><p><img src="https://ask.qcloudimg.com/http-save/7151457/6bgcffgg54.png?imageView2/2/w/1620" alt="img"></p><h2 id="偏向锁释放过程"><a href="#偏向锁释放过程" class="headerlink" title="偏向锁释放过程"></a>偏向锁释放过程</h2><p>持有偏向锁的线程不会主动释放锁，只有遇到其他线程尝试竞争偏向锁时，持有偏向锁状态的线程才会释放锁。持有持有偏向锁的线程需要等到所有的同步任务执行完成之后（即没有字节码正在执行），才会暂停持有偏向锁的线程，然后恢复到未锁定状态或者膨胀为轻量级锁。</p><p> Mark Word是对象头的一部分，每个线程都拥有自己的线程栈（虚拟机栈），记录线程和函数调用的基本信息。</p><h1 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h1><h2 id="轻量级锁概念"><a href="#轻量级锁概念" class="headerlink" title="轻量级锁概念"></a>轻量级锁概念</h2><p>轻量级锁是相对于重量级锁而言的，使用时不需要申请互斥量。而是在没有多线程竞争的情况下，使用轻量级锁能够减少性能消耗，但是当多个线程同时竞争锁时，轻量级锁会膨胀为重量级锁。</p><p><strong>轻量级锁的目标是，减少无实际竞争情况下，使用重量级锁产生的性能消耗</strong>，包括系统调用引起的内核态与用户态切换、线程阻塞造成的线程切换等。</p><h2 id="轻量级锁获取过程"><a href="#轻量级锁获取过程" class="headerlink" title="轻量级锁获取过程"></a>轻量级锁获取过程</h2><ol><li>当线程执行代码进入同步块时，若<code>Mark Word</code>锁标识为无锁状态（是否为偏向锁为0，锁标志位为01），虚拟机会在当前线程的栈帧中建立一个名为锁记录（<code>Lock Record</code>）的空间（用于存储当前对象的<code>Mark Word</code>的拷贝，官方称之为<code>Dispalced Mark Word</code>）。</li><li>复制对象头中的<code>Mark Word</code>到锁记录中。</li><li>复制成功后，虚拟机将使用<code>CAS</code>操作尝试将对象的<code>Mark Word</code>更新为指向<code>Lock Record</code>的指针，并将<code>Lock Record</code>里的<code>owner</code>指针指向对象的<code>Mark Word</code> </li><li>如果更新成功，则这个线程拥有了这个锁，并将锁标志位设置00，此对象处于轻量级锁定状态。</li><li>如果更新失败，虚拟机会检查对象的Mark Word是否指向当前线程的栈帧。如果是，则说明当前线程已经拥有这个锁，可进入执行同步代码；如果不是，则说明多个线程竞争，轻量级锁就会膨胀为重量级锁，<code>Mark Word</code>中存储重量级锁（互斥锁）的指针，后面等待锁的线程也要进入阻塞状态。</li></ol><h2 id="轻量级锁释放过程"><a href="#轻量级锁释放过程" class="headerlink" title="轻量级锁释放过程"></a>轻量级锁释放过程</h2><ul><li>通过CAS操作尝试把线程中复制的<code>Displaced Mark Word</code>对象替换当前的Mark Word。</li><li>如果替换成功，整个同步过程就完成了。</li><li>如果替换失败，说明有其他线程尝试过获取该锁（此时锁已膨胀），那就要在释放锁的同时，唤醒被挂起的线程。</li></ul><h1 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h1><h2 id="重量级锁的概念"><a href="#重量级锁的概念" class="headerlink" title="重量级锁的概念"></a>重量级锁的概念</h2><p>重量级锁为synchronized，通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的<code>Mutex Lock</code>来实现的。而操作系统实现线程之间的切换这就需要从用户态转换到核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么synchronized效率低的原因。因此，这种依赖于操作系统<code>Mutex Lock</code>所实现的锁我们称之为“重量级锁”。</p><h1 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h1><p>在自旋状态下，当一个线程A尝试进入同步代码块，但是当前的锁已经被线程B占有时，线程A不进入阻塞状态，而是不停的空转，等待线程B释放锁。如果锁的线程能在很短时间内释放资源，那么等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞状态，只需自旋，等持有锁的线程释放后即可立即获取锁，避免了用户线程和内核的切换消耗。</p><p><strong>优点</strong>：开启自旋锁后能减少线程的阻塞，在对于锁的竞争不激烈且占用锁时间很短的代码块来说，能提升很大的性能，在这种情况下自旋的消耗小于线程阻塞挂起的消耗。 <strong>缺点</strong>：在线程竞争锁激烈，或持有锁的线程需要长时间执行同步代码块的情况下，使用自旋会使得CPU做太多无用功。</p><blockquote><p> JDK1.6中，设置参数<code>-XX：+UseSpinning</code>开启。JDK1.7后，由JVM自动控制。</p></blockquote><h1 id="自适应自旋锁"><a href="#自适应自旋锁" class="headerlink" title="自适应自旋锁"></a>自适应自旋锁</h1><p>自适应意味着自旋的时间不再固定了，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定：</p><ul><li>如果在同一个锁对象上，自旋等待之前成功获得过的锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，因此允许自旋等待持续相对更长的时间。</li><li>相反的，如果对于某个锁，自旋很少成功获得过，那么以后要获取这个锁时将可能减少自旋时间甚至省略自旋过程，以避免浪费处理器资源。</li></ul><p><strong>自适应自旋解决的是“锁竞争时间不确定”的问题</strong>。JVM很难感知确切的锁竞争时间，而交给用户分析就违反了JVM的设计初衷。自适应自旋假定不同线程持有同一个锁对象的时间基本相当，竞争程度趋于稳定。因此，可以根据上一次自旋的时间与结果调整下一次自旋的时间。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th align="left">锁类型</th><th align="left">优点</th><th align="left">缺点</th><th align="left">适用场景</th></tr></thead><tbody><tr><td align="left">偏向锁</td><td align="left">加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距。</td><td align="left">如果线程间存在锁竞争，会带来额外的锁撤销的消耗。</td><td align="left">适用于只有一个线程访问同步块场景。</td></tr><tr><td align="left">轻量级锁</td><td align="left">竞争的线程不会阻塞，提高了程序的响应速度。</td><td align="left">如果始终得不到锁竞争的线程使用自旋会消耗CPU。</td><td align="left">追求响应时间。同步块执行速度非常快。</td></tr><tr><td align="left">重量级锁</td><td align="left">线程竞争不使用自旋，不会消耗CPU。</td><td align="left">线程阻塞，响应时间缓慢。</td><td align="left">追求吞吐量。同步块执行速度较长。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Java锁机制</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringBoot</title>
    <link href="http://example.com/2023/03/05/%E6%90%AD%E5%BB%BASpringBoot%E5%88%86%E5%B8%83%E5%BC%8F%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2023/03/05/%E6%90%AD%E5%BB%BASpringBoot%E5%88%86%E5%B8%83%E5%BC%8F%E9%A1%B9%E7%9B%AE/</id>
    <published>2023-03-05T07:00:00.000Z</published>
    <updated>2023-03-05T09:54:35.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建项目结构"><a href="#搭建项目结构" class="headerlink" title="搭建项目结构"></a>搭建项目结构</h1><h2 id="创建Maven空项目"><a href="#创建Maven空项目" class="headerlink" title="创建Maven空项目"></a>创建Maven空项目</h2><p><img src="https://gitee.com/liao_446773160/imgs/raw/master/image-20230117161628680.png" alt="image-20230117161628680"></p><h2 id="创建子模块"><a href="#创建子模块" class="headerlink" title="创建子模块"></a>创建子模块</h2><h3 id="创建工具类包"><a href="#创建工具类包" class="headerlink" title="创建工具类包"></a>创建工具类包</h3><p><img src="https://gitee.com/liao_446773160/imgs/raw/master/image-20230117162101091.png" alt="image-20230117162101091"></p><p>创建好的子项目打开pom.xml。这里我创建是通用工具类包</p><p><img src="https://gitee.com/liao_446773160/imgs/raw/master/image-20230117162256714.png" alt="image-20230117162256714"></p><p><strong>自己手动加入（因为子项目是工具类包可以通过maven引入其他子模块下）</strong></p><h3 id="创建系统子模块"><a href="#创建系统子模块" class="headerlink" title="创建系统子模块"></a>创建系统子模块</h3><p><img src="https://gitee.com/liao_446773160/imgs/raw/master/image-20230117164238792.png" alt="image-20230117164238792"></p><p><strong>注意配置好工具类下的xml文件之后，需要把它引入到系统子模块下</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>system-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置父项目下的xml文件"><a href="#配置父项目下的xml文件" class="headerlink" title="配置父项目下的xml文件"></a>配置父项目下的xml文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>commons-utils<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--版本声明--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">alibaba.version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">alibaba.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">knife4j.version</span>&gt;</span>2.0.8<span class="tag">&lt;/<span class="name">knife4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jwt.version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">jwt.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.29<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hutool-all.version</span>&gt;</span>5.8.11<span class="tag">&lt;/<span class="name">hutool-all.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入SpringBoot启动包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置dependencyManagement锁定依赖的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis-plus 持久层--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--knife4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;knife4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--jjwt--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutool-all.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对所有的子项目都生效，子项目不需要再次引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置工具类下的xml"><a href="#配置工具类下的xml" class="headerlink" title="配置工具类下的xml"></a>配置工具类下的xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里引入父项目的包。目的是获取springboot-starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--简化实体类开发--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--swagger增强类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="创建SpringBoot项目"><a href="#创建SpringBoot项目" class="headerlink" title="创建SpringBoot项目"></a>创建SpringBoot项目</h1><p>在系统模块下依次创建如下目录结构</p><p><img src="https://gitee.com/liao_446773160/imgs/raw/master/image-20230117171935679.png" alt="image-20230117171935679"></p><p>SpringBoot启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shnu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liao.sc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ServiceApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/17 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.shnu.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ServiceApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>application.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">system-service</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>application-dev.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">端口</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#mybatis-plus打印SQL</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名称?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">用户</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">密码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SpringBoot</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>论文总结</title>
    <link href="http://example.com/2023/03/05/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2023/03/05/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8A%80%E5%B7%A7/</id>
    <published>2023-03-05T07:00:00.000Z</published>
    <updated>2023-03-05T14:09:12.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="期刊文献阅读"><a href="#期刊文献阅读" class="headerlink" title="期刊文献阅读"></a>期刊文献阅读</h1><p><strong>大家可以进行账号注册再进行阅读</strong></p><p> <a href="https://www.webofscience.com/">Web of Science </a></p><p><a href="https://mjl.clarivate.com/home">Web of Science 搜索期刊</a></p><p><a href="https://ieeexplore.ieee.org/Xplore/home.jsp">IEEE Xplore</a></p><p><a href="https://scholar.google.com.sg/schhp?hl=zh-CN&as_sdt=0,5">谷歌学术</a></p><p><a href="https://arxiv.org/">arXiv</a></p><p><a href="https://www.researchgate.net/">researchgeate</a></p><h1 id="期刊翻译"><a href="#期刊翻译" class="headerlink" title="期刊翻译"></a>期刊翻译</h1><p>翻译（机器翻译可能不准）</p><p><a href="https://www.deepl.com/zh/translator">Deepl翻译</a></p><p>语法校验（一般修改到九十分以上会比较好）</p><p><a href="https://www.grammarly.com/">My Grammarly</a></p><h1 id="论文写作"><a href="#论文写作" class="headerlink" title="论文写作"></a>论文写作</h1><p><a href="https://www.overleaf.com/">Overleaf</a>  国外</p><p><a href="https://www.texpage.com/console">TexPage</a>  国内</p><p>使用LaTeX语言，LaTex语言请参考教程  <a href="https://imztj.cn/?p=3073">LaTeX</a></p><p><strong>注意：LaTeX中尽量使用PDF进行插图，不要使用JPG和PNG进行插图，放大容易失真</strong></p><p>用到的模型需要结合研究的内容进行撰写。需要对模型进行阐述。</p><p>机器学习实验尽快去做，如果产生的结果不好赶紧换模型或者换方案</p><h1 id="论文投稿"><a href="#论文投稿" class="headerlink" title="论文投稿"></a>论文投稿</h1><p>论文审核时间很长</p><p>论文的idea需要自己找好</p><p>论文建议投国外比较大的期刊（经费较少）</p><p>尽量避免增刊，特刊，投正刊</p><p>优先去看国际学术期刊</p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20230305220500.png?raw=true" alt="blog_images20230305220500.png"></p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20230305220651.png?raw=true" alt="blog_images20230305220651.png"></p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20230305220724.png?raw=true" alt="blog_images20230305220724.png"></p><p>conference partner</p><p>打开 <a href="https://www.myhuiban.com/index.php">conference partner</a> 查看CCF推荐会议，里面有会议的主题，根据里面内容进行投稿</p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20230305220850.png?raw=true" alt="blog_images20230305220850.png"></p><h1 id="论文审稿意见"><a href="#论文审稿意见" class="headerlink" title="论文审稿意见"></a>论文审稿意见</h1><p>拿到意见之后按照要求进行修改，之后回复response letter，还有对应回复每一条修改意见</p><p>以下是response letter模板</p><p><img src="https://www.aplustopper.com/wp-content/uploads/2021/04/Free-Sample-Response-Letters.png" alt="免费样品回复信"></p><p>下面给出几个letter例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1、Firstly, we would like to thank you for your kind letter and for reviewers’ constructive comments concerning our article (Manuscript No.:XXXXX).These comments are all valuable and helpful for improving our article. All the authors have seriously discussed about all these comments. According to the reviewers’comments, we have tried best to modify our manuscript to meet with the requirements of your journal. In this revised version, changes to our manuscript within the document were all highlighted by using red colored text.Point-by-point responses to the reviewers are listed below this letter.</span><br><span class="line"></span><br><span class="line">2、If there are any other modifications we could make, we would like very much to modify them and we really appreciate your help. Thank you very much for your help.</span><br><span class="line"></span><br><span class="line">3、Thanks. We have corrected these mistakes based on your suggestions.</span><br><span class="line"></span><br><span class="line">4、Thank you again for your positive comments and valuable suggestions toimprove the quality of our manuscript.</span><br><span class="line"></span><br><span class="line">5、we were really sorry for your careless mistakes. Thank you for your reminding.</span><br><span class="line"></span><br><span class="line">6、Thanks for your nice suggestions. We have formatted all the references.</span><br><span class="line"></span><br><span class="line">7、It is with excitement that I resubmit to you a revised version of manuscript （稿号） for the 杂志名. Thank you for giving me the opportunity to revise and resubmit this manuscript. In keeping with my last communication with you, I am resubmitting this revision before the agreed upondeadline. I appreciate the time and detail provided by each reviewer and by you and have incorporated the suggested changes into the manuscript to the best of my ability. The manuscript has certainly benefited from these insightful revision suggestions. I look forward to working with you and the reviewers to move this manuscript closer to publication in the杂志名. （返修有拖延时用）</span><br><span class="line"></span><br><span class="line">8、I have responded specifically to each suggestion below, beginning with your own. To make the changes easier to identify where necessary, I have numbered them.</span><br><span class="line"></span><br><span class="line">9、Thank you again for your positive comments on our manuscript. 杂志名 is an influential journal which aims to improve ourunderstanding of cancer prevention/other. From all the papers published in your journal, readers have been learning a lot. Hopefully, we could have our article been considered of publication in your journal. Should there been any other corrections we could make, please feel free to contact us.</span><br><span class="line"></span><br><span class="line">10、Thank you for your kind comments on ourmanuscript entitled “文章名”. We have carefully revised the manuscript according to the reviewer’s comments. Based on the suggestions, we have made an extensive modification on the revised manuscript. Detailed revision was shown as follows. The changes to our manuscript within the document were aslo highlighted by using red colored text.</span><br><span class="line"></span><br><span class="line">11、We feel great thanks for your professional review work onour article. As you are concerned, there are several problems that need to beaddressed. According to your nice suggestions, we have made extensivecorrections to our previous draft, the detailed corrections are listed below.</span><br><span class="line"></span><br><span class="line">12、According to the reviewer’s comments, we have revised the manuscript extensively. If there are any other modifications we could make, we would like very much to modify them and we really appreciate your help. We hope that our manuscript could be considered for publication in your journal. Thank you very much for your help.</span><br><span class="line"></span><br><span class="line">13、On behalf of all the contributing authors, I would like to express our sincere appreciations of your letter and reviewers’ constructive comments concerning our article entitled “XXX文章” (Manuscript No.:XXXX). These comments are all valuable and helpful for improving our article. According to the associate editor and reviewers’ comments,we have made extensive modifications to our manuscript and supplemented extra data to make our results convincing. In this revised version, changes to ourmanuscript were all highlighted within the document by using red colored text. Point-by-pointresponses to the nice associate editor and two nice reviewers are listed below this letter.</span><br><span class="line"></span><br><span class="line">14、We would like to thank you first for all the positive comments of ourmanuscript (No.: XXXX) entitled “XXXXX”. We really appreciate your help and patience. We also think highly of the comment sof both reviewers who kindly provide professional suggestions on our manuscript.we have seriously thought about them and provided our response to reviewers. Forthe detailed response, please see below.</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <summary type="html">论文阅读投稿写作总结</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java Web Token详解</title>
    <link href="http://example.com/2023/03/05/JWT%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2023/03/05/JWT%E8%AF%A6%E8%A7%A3/</id>
    <published>2023-03-05T07:00:00.000Z</published>
    <updated>2023-03-05T10:01:29.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h1><p><strong>全程叫 Java Web Token</strong></p><h2 id="什么是JWT？"><a href="#什么是JWT？" class="headerlink" title="什么是JWT？"></a>什么是JWT？</h2><p>在介绍JWT之前，我们先来回顾一下利用token进行用户身份验证的流程</p><ol><li>​    客户端使用用户名和密码请求登录</li><li>​    服务端收到请求，验证用户名和密码</li><li>​    验证成功后，服务端会签发一个token，再把这个token返回给客户端</li><li>​    客户端收到token后可以把它存储起来，比如放到cookie中</li><li>​    客户端每次向服务端请求资源时需要携带服务端签发的token，可以在cookie或者header中携带</li><li>​    服务端收到请求，然后去验证客户端请求里面带着的token，如果验证成功，就向客户端返回请求数据</li></ol><p>这种基于token的认证方式相比传统的session认证方式更节约服务器资源，并且对移动端和分布式更加友好。其优点如下：</p><ul><li><p>支持跨域访问：cookie是无法跨域的，而token由于没有用到cookie(前提是将token放到请求头中)，所以跨域后不会存在信息丢失问题</p></li><li><p>无状态：token机制在服务端不需要存储session信息，因为token自身包含了所有登录用户的信息，所以可以减轻服务端压力</p></li><li><p>更适用CDN：可以通过内容分发网络请求服务端的所有资料</p></li><li><p>更适用于移动端：当客户端是非浏览器平台时，cookie是不被支持的，此时采用token认证方式会简单很多</p></li><li><p>无需考虑CSRF：由于不再依赖cookie，所以采用token认证方式不会发生CSRF，所以也就无需考虑CSRF的防御</p></li></ul><p><strong>而JWT就是上述流程当中token的一种具体实现方式，其全称是JSON Web Token，官网地址：<a href="https://jwt.io/">https://jwt.io/</a></strong></p><p>通俗地说，JWT的本质就是一个字符串，它是将用户信息保存到一个Json字符串中，然后进行编码后得到一个JWT token，并且这个JWT token带有签名信息，接收后可以校验是否被篡改，所以可以用于在各方之间安全地将信息作为Json对象传输。JWT的认证流程如下：</p><ol><li>首先，前端通过Web表单将自己的用户名和密码发送到后端的接口，这个过程一般是一个POST请求。建议的方式是通过SSL加密的传输(HTTPS)，从而避免敏感信息被嗅探</li><li>后端核对用户名和密码成功后，将包含用户信息的数据作为JWT的Payload，将其与JWT Header分别进行Base64编码拼接后签名，形成一个JWT Token，形成的JWT Token就是一个如同lll.zzz.xxx的字符串</li><li>后端将JWT Token字符串作为登录成功的结果返回给前端。前端可以将返回的结果保存在浏览器中，退出登录时删除保存的JWT Token即可</li><li>前端在每次请求时将JWT Token放入HTTP请求头中的Authorization属性中(解决XSS和XSRF问题)</li><li>后端检查前端传过来的JWT Token，验证其有效性，比如检查签名是否正确、是否过期、token的接收方是否是自己等等</li><li>验证通过后，后端解析出JWT Token中包含的用户信息，进行其他逻辑操作(一般是根据用户信息得到权限等)，返回结果</li></ol><p><img src="https://pic.baobao555.tech/article/image-20210626223811598.png" alt="img"></p><h2 id="为什么要使用JWT"><a href="#为什么要使用JWT" class="headerlink" title="为什么要使用JWT"></a>为什么要使用JWT</h2><h3 id="传统Session认证的弊端"><a href="#传统Session认证的弊端" class="headerlink" title="传统Session认证的弊端"></a>传统Session认证的弊端</h3><p>我们知道HTTP本身是一种无状态的协议，这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，认证通过后HTTP协议不会记录下认证后的状态，那么下一次请求时，用户还要再一次进行认证，因为根据HTTP协议，我们并不知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在用户首次登录成功后，在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了，这是传统的基于session认证的过程</p><p><img src="https://pic.baobao555.tech/article/image-20210626202225399.png" alt="img"></p><p>然而，传统的session认证有如下的问题：</p><ul><li>每个用户的登录信息都会保存到服务器的session中，随着用户的增多，服务器开销会明显增大</li><li>由于session是存在与服务器的物理内存中，所以在分布式系统中，这种方式将会失效。虽然可以将session统一保存到Redis中，但是这样做无疑增加了系统的复杂性，对于不需要redis的应用也会白白多引入一个缓存中间件</li><li>对于非浏览器的客户端、手机移动端等不适用，因为session依赖于cookie，而移动端经常没有cookie</li><li>因为session认证本质基于cookie，所以如果cookie被截获，用户很容易收到跨站请求伪造攻击。并且如果浏览器禁用了cookie，这种方式也会失效</li><li>前后端分离系统中更加不适用，后端部署复杂，前端发送的请求往往经过多个中间件到达后端，cookie中关于session的信息会转发多次</li><li>由于基于Cookie，而cookie无法跨域，所以session的认证也无法跨域，对单点登录不适用</li></ul><h3 id="JWT认证的优势"><a href="#JWT认证的优势" class="headerlink" title="JWT认证的优势"></a>JWT认证的优势</h3><p>对比传统的session认证方式，JWT的优势是：</p><ul><li>简洁：JWT Token数据量小，传输速度也很快</li><li>因为JWT Token是以JSON加密形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持</li><li>不需要在服务端保存会话信息，也就是说不依赖于cookie和session，所以没有了传统session认证的弊端，特别适用于分布式微服务</li><li>单点登录友好：使用Session进行身份认证的话，由于cookie无法跨域，难以实现单点登录。但是，使用token进行认证的话， token可以被保存在客户端的任意位置的内存中，不一定是cookie，所以不依赖cookie，不会存在这些问题</li><li>适合移动端应用：使用Session进行身份认证的话，需要保存一份信息在服务器端，而且这种方式会依赖到Cookie（需要 Cookie 保存 SessionId），所以不适合移动端</li></ul><blockquote><p>因为这些优势，目前无论单体应用还是分布式应用，都更加推荐用JWT token的方式进行用户认证</p></blockquote><h1 id="JWT结构"><a href="#JWT结构" class="headerlink" title="JWT结构"></a>JWT结构</h1><p>JWT由3部分组成：标头(Header)、有效载荷(Payload)和签名(Signature)。在传输的时候，会将JWT的3部分分别进行Base64编码后用.进行连接形成最终传输的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JWTString = Base64(Header).Base64(Payload).HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</span><br><span class="line">JWTString=Base64(Header).Base64(Payload).HMACSHA256(base64UrlEncode(header)+&quot;.&quot;+base64UrlEncode(payload),secret)</span><br></pre></td></tr></table></figure><p><img src="https://pic.baobao555.tech/article/image-20200912222235276.png" alt="img"></p><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>JWT头是一个描述JWT元数据的JSON对象，alg属性表示签名使用的算法，默认为HMAC SHA256（写为HS256）；typ属性表示令牌的类型，JWT令牌统一写为JWT。最后，使用Base64 URL算法将上述JSON对象转换为字符串保存</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。 JWT指定七个默认字段供选择</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss：发行人</span><br><span class="line">exp：到期时间</span><br><span class="line">sub：主题</span><br><span class="line">aud：用户</span><br><span class="line">nbf：在此之前不可用</span><br><span class="line">iat：发布时间</span><br><span class="line">jti：JWT ID用于标识该JWT</span><br></pre></td></tr></table></figure><p>除以上默认字段外，我们还可以自定义私有字段，一般会把包含用户信息的数据放到payload中，如下例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Helen&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>请注意，默认情况下JWT是未加密的，因为只是采用base64算法，拿到JWT字符串后可以转换回原本的JSON数据，任何人都可以解读其内容，因此不要构建隐私信息字段，比如用户的密码一定不能保存到JWT中，以防止信息泄露。JWT只是适合在网络中传输一些非敏感的信息</strong></p></blockquote><h2 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h2><p>签名哈希部分是对上面两部分数据签名，需要使用base64编码后的header和payload数据，通过指定的算法生成哈希，以确保数据不会被篡改。首先，需要指定一个密钥（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用header中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</span><br><span class="line">HMACSHA256(base64UrlEncode(header)+&quot;.&quot;+base64UrlEncode(payload),secret)</span><br></pre></td></tr></table></figure><p>在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用.分隔，就构成整个JWT对象</p><p><img src="https://pic.baobao555.tech/article/image-20200912220832713.png" alt="img"></p><blockquote><p>注意JWT每部分的作用，在服务端接收到客户端发送过来的JWT token之后：</p><p>header和payload可以直接利用base64解码出原文，从header中获取哈希签名的算法，从payload中获取有效数据<br>signature由于使用了不可逆的加密算法，无法解码出原文，它的作用是校验token有没有被篡改。服务端获取header中的加密算法之后，利用该算法加上secretKey对header、payload进行加密，比对加密后的数据和客户端发送过来的是否一致。注意secretKey只能保存在服务端，而且对于不同的加密算法其含义有所不同，一般对于MD5类型的摘要加密算法，secretKey实际上代表的是盐值</p></blockquote><h1 id="JWT的种类"><a href="#JWT的种类" class="headerlink" title="JWT的种类"></a>JWT的种类</h1><p>其实JWT(JSON Web Token)指的是一种规范，这种规范允许我们使用JWT在两个组织之间传递安全可靠的信息，JWT的具体实现可以分为以下几种：</p><ul><li>nonsecure JWT：未经过签名，不安全的JWT</li><li>JWS：经过签名的JWT</li><li>JWE：payload部分经过加密的JWT</li></ul><h2 id="nonsecure-JWT"><a href="#nonsecure-JWT" class="headerlink" title="nonsecure JWT"></a>nonsecure JWT</h2><p>未经过签名，不安全的JWT。其header部分没有指定签名算法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>并且也没有Signature部分</p><h2 id="JWS"><a href="#JWS" class="headerlink" title="JWS"></a>JWS</h2><p>JWS ，也就是JWT Signature，其结构就是在之前nonsecure JWT的基础上，在头部声明签名算法，并在最后添加上签名。创建签名，是保证jwt不能被他人随意篡改。我们通常使用的JWT一般都是JWS</p><p>为了完成签名，除了用到header信息和payload信息外，还需要算法的密钥，也就是secretKey。加密的算法一般有2类：</p><ul><li>对称加密：secretKey指加密密钥，可以生成签名与验签</li><li>非对称加密：secretKey指私钥，只用来生成签名，不能用来验签(验签用的是公钥)</li></ul><p>JWT的密钥或者密钥对，一般统一称为JSON Web Key，也就是JWK</p><p>到目前为止，jwt的签名算法有三种：</p><ul><li>HMAC【哈希消息验证码(对称)】：HS256/HS384/HS512</li><li>RSASSA【RSA签名算法(非对称)】（RS256/RS384/RS512）</li><li>ECDSA【椭圆曲线数据签名算法(非对称)】（ES256/ES384/ES512）</li></ul><h1 id="Java中使用JWT"><a href="#Java中使用JWT" class="headerlink" title="Java中使用JWT"></a>Java中使用JWT</h1><p>官网推荐了6个Java使用JWT的开源库，其中比较推荐使用的是java-jwt和jjwt-root</p><p><img src="https://pic.baobao555.tech/article/image-20200913093107135.png" alt="img"></p><h2 id="java-jwt"><a href="#java-jwt" class="headerlink" title="java-jwt"></a>java-jwt</h2><h3 id="对称签名"><a href="#对称签名" class="headerlink" title="对称签名"></a>对称签名</h3><p>首先引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>生成JWT的token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGenerateToken</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 指定token过期时间为10秒</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.SECOND, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWT.create()</span><br><span class="line">                .withHeader(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;())  <span class="comment">// Header</span></span><br><span class="line">                .withClaim(<span class="string">&quot;userId&quot;</span>, <span class="number">21</span>)  <span class="comment">// Payload</span></span><br><span class="line">                .withClaim(<span class="string">&quot;userName&quot;</span>, <span class="string">&quot;baobao&quot;</span>)</span><br><span class="line">                .withExpiresAt(calendar.getTime())  <span class="comment">// 过期时间</span></span><br><span class="line">                .sign(Algorithm.HMAC256(<span class="string">&quot;!34ADAS&quot;</span>));  <span class="comment">// 签名用的secret</span></span><br><span class="line"></span><br><span class="line">        System.out.println(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic.baobao555.tech/article/image-20200912224156671.png" alt="img"></p><blockquote><p>注意多次运行方法生成的token字符串内容是不一样的，尽管我们的payload信息没有变动。因为JWT中携带了超时时间，所以每次生成的token会不一样，我们利用base64解密工具可以发现payload确实携带了超时时间</p><p><img src="https://pic.baobao555.tech/article/image-20201004112056994.png" alt="img"></p></blockquote><p>解析JWT字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResolveToken</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 创建解析对象，使用的算法和secret要与创建token时保持一致</span></span><br><span class="line">    <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(<span class="string">&quot;!34ADAS&quot;</span>)).build();</span><br><span class="line">    <span class="comment">// 解析指定的token</span></span><br><span class="line">    <span class="type">DecodedJWT</span> <span class="variable">decodedJWT</span> <span class="operator">=</span> jwtVerifier.verify(<span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyTmFtZSI6ImJhb2JhbyIsImV4cCI6MTU5OTkyMjUyOCwidXNlcklkIjoyMX0.YhA3kh9KZOAb7om1C7o3vBhYp0f61mhQWWOoCrrhqvo&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取解析后的token中的payload信息</span></span><br><span class="line">    <span class="type">Claim</span> <span class="variable">userId</span> <span class="operator">=</span> decodedJWT.getClaim(<span class="string">&quot;userId&quot;</span>);</span><br><span class="line">    <span class="type">Claim</span> <span class="variable">userName</span> <span class="operator">=</span> decodedJWT.getClaim(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">    System.out.println(userId.asInt());</span><br><span class="line">    System.out.println(userName.asString());</span><br><span class="line">    <span class="comment">// 输出超时时间</span></span><br><span class="line">    System.out.println(decodedJWT.getExpiresAt());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后发现报异常，原因是之前生成的token已经过期</p><p><img src="https://pic.baobao555.tech/article/image-20200912224810668.png" alt="img"></p><p>再运行一次生成token的方法，然后在过期时间10秒之内将生成的字符串拷贝到解析方法中，运行解析方法即可成功</p><p><img src="https://pic.baobao555.tech/article/image-20200912225551597.png" alt="img"></p><p>我们可以将上述方法封装成工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtils</span> &#123;</span><br><span class="line">    <span class="comment">// 签名密钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;!DAR$&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> payload token携带的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getToken</span><span class="params">(Map&lt;String,String&gt; payload)</span>&#123;</span><br><span class="line">        <span class="comment">// 指定token过期时间为7天</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.DATE, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        JWTCreator.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> JWT.create();</span><br><span class="line">        <span class="comment">// 构建payload</span></span><br><span class="line">        payload.forEach((k,v) -&gt; builder.withClaim(k,v));</span><br><span class="line">        <span class="comment">// 指定过期时间和签名算法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> builder.withExpiresAt(calendar.getTime()).sign(Algorithm.HMAC256(SECRET));</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解析后的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">decode</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(SECRET)).build();</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">decodedJWT</span> <span class="operator">=</span> jwtVerifier.verify(token);</span><br><span class="line">        <span class="keyword">return</span> decodedJWT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="非对称签名"><a href="#非对称签名" class="headerlink" title="非对称签名"></a>非对称签名</h3><p>生成jwt串的时候需要指定私钥，解析jwt串的时候需要指定公钥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RSA_PRIVATE_KEY</span> <span class="operator">=</span> <span class="string">&quot;...&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RSA_PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">&quot;...&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> payload token携带的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTokenRsa</span><span class="params">(Map&lt;String,String&gt; payload)</span>&#123;</span><br><span class="line">    <span class="comment">// 指定token过期时间为7天</span></span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">    calendar.add(Calendar.DATE, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    JWTCreator.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> JWT.create();</span><br><span class="line">    <span class="comment">// 构建payload</span></span><br><span class="line">    payload.forEach((k,v) -&gt; builder.withClaim(k,v));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用hutool创建RSA</span></span><br><span class="line">    <span class="type">RSA</span> <span class="variable">rsa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RSA</span>(RSA_PRIVATE_KEY, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 获取私钥</span></span><br><span class="line">    <span class="type">RSAPrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> (RSAPrivateKey) rsa.getPrivateKey();</span><br><span class="line">    <span class="comment">// 签名时传入私钥</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> builder.withExpiresAt(calendar.getTime()).sign(Algorithm.RSA256(<span class="literal">null</span>, privateKey));</span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解析后的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">decodeRsa</span><span class="params">(String token)</span>&#123;</span><br><span class="line">    <span class="comment">// 利用hutool创建RSA</span></span><br><span class="line">    <span class="type">RSA</span> <span class="variable">rsa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RSA</span>(<span class="literal">null</span>, RSA_PUBLIC_KEY);</span><br><span class="line">    <span class="comment">// 获取RSA公钥</span></span><br><span class="line">    <span class="type">RSAPublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> (RSAPublicKey) rsa.getPublicKey();</span><br><span class="line">    <span class="comment">// 验签时传入公钥</span></span><br><span class="line">    <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(Algorithm.RSA256(publicKey, <span class="literal">null</span>)).build();</span><br><span class="line">    <span class="type">DecodedJWT</span> <span class="variable">decodedJWT</span> <span class="operator">=</span> jwtVerifier.verify(token);</span><br><span class="line">    <span class="keyword">return</span> decodedJWT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="jjwt-root"><a href="#jjwt-root" class="headerlink" title="jjwt-root"></a>jjwt-root</h2><h3 id="对称签名-1"><a href="#对称签名-1" class="headerlink" title="对称签名"></a>对称签名</h3><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法类似，可参考下列代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="comment">// token时效：24小时</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">EXPIRE</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;</span><br><span class="line">    <span class="comment">// 签名哈希的密钥，对于不同的加密算法来说含义不同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_SECRET</span> <span class="operator">=</span> <span class="string">&quot;ukc8BDbRigUDaY6pZFfWus2jZWLPHO&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id和昵称生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id  用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nickname 用户昵称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT规则生成的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtToken</span><span class="params">(String id, String nickname)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">JwtToken</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">                .setSubject(<span class="string">&quot;baobao-user&quot;</span>)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRE))</span><br><span class="line">                .claim(<span class="string">&quot;id&quot;</span>, id)</span><br><span class="line">                .claim(<span class="string">&quot;nickname&quot;</span>, nickname)</span><br><span class="line">            <span class="comment">// HS256算法实际上就是MD5加盐值，此时APP_SECRET就代表盐值</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, APP_SECRET)</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtToken token字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果token有效返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkToken</span><span class="params">(String jwtToken)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request Http请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果token有效返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkToken</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从http请求头中获取token字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token获取会员id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request Http请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解析token后获得的用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMemberIdByJwtToken</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> claimsJws.getBody();</span><br><span class="line">        <span class="keyword">return</span> (String)claims.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>jjwt在0.10版本以后发生了较大变化，pom依赖要引入多个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> <span class="comment">&lt;!-- or jjwt-gson if Gson is preferred --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标准规范中对各种加密算法的secretKey的长度有如下要求：</p><ul><li>HS256：要求至少 256 bits (32 bytes)</li><li>HS384：要求至少384 bits (48 bytes)</li><li>HS512：要求至少512 bits (64 bytes)</li><li>RS256 and PS256：至少2048 bits</li><li>RS384 and PS384：至少3072 bits</li><li>RS512 and PS512：至少4096 bits</li><li>ES256：至少256 bits (32 bytes)</li><li>ES384：至少384 bits (48 bytes)</li><li>ES512：至少512 bits (64 bytes)</li></ul><p>在jjwt0.10版本之前，没有强制要求，secretKey长度不满足要求时也可以签名成功。但是0.10版本后强制要求secretKey满足规范中的长度要求，否则生成jws时会抛出异常</p><p><img src="https://pic.baobao555.tech/article/image-20211108225429718.png" alt="img"></p><p>新版本的jjwt中，之前的签名和验签方法都是传入密钥的字符串，已经过时。最新的方法需要传入Key对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="comment">// token时效：24小时</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">EXPIRE</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;</span><br><span class="line">    <span class="comment">// 签名哈希的密钥，对于不同的加密算法来说含义不同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_SECRET</span> <span class="operator">=</span> <span class="string">&quot;ukc8BDbRigUDaY6pZFfWus2jZWLPHOsdadasdasfdssfeweee&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id和昵称生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id  用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nickname 用户昵称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT规则生成的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtToken</span><span class="params">(String id, String nickname)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">JwtToken</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setSubject(<span class="string">&quot;baobao-user&quot;</span>)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRE))</span><br><span class="line">                .claim(<span class="string">&quot;id&quot;</span>, id)</span><br><span class="line">                .claim(<span class="string">&quot;nickname&quot;</span>, nickname)</span><br><span class="line">                <span class="comment">// 传入Key对象</span></span><br><span class="line">                .signWith(Keys.hmacShaKeyFor(APP_SECRET.getBytes(StandardCharsets.UTF_8)), SignatureAlgorithm.HS256)</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="keyword">return</span> JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtToken token字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果token有效返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jws&lt;Claims&gt; <span class="title function_">decode</span><span class="params">(String jwtToken)</span> &#123;</span><br><span class="line">        <span class="comment">// 传入Key对象</span></span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = Jwts.parserBuilder().setSigningKey(Keys.hmacShaKeyFor(APP_SECRET.getBytes(StandardCharsets.UTF_8))).build().parseClaimsJws(jwtToken);</span><br><span class="line">        <span class="keyword">return</span> claimsJws;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="非对称签名-1"><a href="#非对称签名-1" class="headerlink" title="非对称签名"></a>非对称签名</h3><p>生成jwt串的时候需要指定私钥，解析jwt串的时候需要指定公钥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RSA_PRIVATE_KEY</span> <span class="operator">=</span> <span class="string">&quot;...&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RSA_PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">&quot;...&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id和昵称生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id  用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nickname 用户昵称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT规则生成的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtTokenRsa</span><span class="params">(String id, String nickname)</span>&#123;</span><br><span class="line">    <span class="comment">// 利用hutool创建RSA</span></span><br><span class="line">    <span class="type">RSA</span> <span class="variable">rsa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RSA</span>(RSA_PRIVATE_KEY, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">RSAPrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> (RSAPrivateKey) rsa.getPrivateKey();</span><br><span class="line">    <span class="type">String</span> <span class="variable">JwtToken</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">        .setSubject(<span class="string">&quot;baobao-user&quot;</span>)</span><br><span class="line">        .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">        .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRE))</span><br><span class="line">        .claim(<span class="string">&quot;id&quot;</span>, id)</span><br><span class="line">        .claim(<span class="string">&quot;nickname&quot;</span>, nickname)</span><br><span class="line">        <span class="comment">// 签名指定私钥</span></span><br><span class="line">        .signWith(privateKey, SignatureAlgorithm.RS256)</span><br><span class="line">        .compact();</span><br><span class="line">    <span class="keyword">return</span> JwtToken;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtToken token字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果token有效返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Jws&lt;Claims&gt; <span class="title function_">decodeRsa</span><span class="params">(String jwtToken)</span> &#123;</span><br><span class="line">    <span class="type">RSA</span> <span class="variable">rsa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RSA</span>(<span class="literal">null</span>, RSA_PUBLIC_KEY);</span><br><span class="line">    <span class="type">RSAPublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> (RSAPublicKey) rsa.getPublicKey();</span><br><span class="line">    <span class="comment">// 验签指定公钥</span></span><br><span class="line">    Jws&lt;Claims&gt; claimsJws = Jwts.parserBuilder().setSigningKey(publicKey).build().parseClaimsJws(jwtToken);</span><br><span class="line">    <span class="keyword">return</span> claimsJws;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="实际开发中的应用"><a href="#实际开发中的应用" class="headerlink" title="实际开发中的应用"></a>实际开发中的应用</h1><p>在实际的SpringBoot项目中，一般我们可以用如下流程做登录：</p><ol><li>在登录验证通过后，给用户生成一个对应的随机token(注意这个token不是指jwt，可以用uuid等算法生成)，然后将这个token作为key的一部分，用户信息作为value存入Redis，并设置过期时间，这个过期时间就是登录失效的时间</li><li>将第1步中生成的随机token作为JWT的payload生成JWT字符串返回给前端</li><li>前端之后每次请求都在请求头中的Authorization字段中携带JWT字符串</li><li>后端定义一个拦截器，每次收到前端请求时，都先从请求头中的Authorization字段中取出JWT字符串并进行验证，验证通过后解析出payload中的随机token，然后再用这个随机token得到key，从Redis中获取用户信息，如果能获取到就说明用户已经登录</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">JWT</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.校验JWT字符串</span></span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">decodedJWT</span> <span class="operator">=</span> JWTUtils.decode(JWT);</span><br><span class="line">            <span class="comment">// 2.取出JWT字符串载荷中的随机token，从Redis中获取用户信息</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SignatureVerificationException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无效签名&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (TokenExpiredException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;token已经过期&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;算法不一致&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;token无效&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在实际开发中需要用下列手段来增加JWT的安全性：</p><ul><li>因为JWT是在请求头中传递的，所以为了避免网络劫持，推荐使用HTTPS来传输，更加安全</li><li>JWT的哈希签名的密钥是存放在服务端的，所以只要服务器不被攻破，理论上JWT是安全的。因此要保证服务器的安全</li><li>JWT可以使用暴力穷举来破解，所以为了应对这种破解方式，可以定期更换服务端的哈希签名密钥(相当于盐值)。这样可以保证等破解结果出来了，你的密钥也已经换了</li></ul></blockquote>]]></content>
    
    
    <summary type="html">Java Web Token详解</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java反射机制</title>
    <link href="http://example.com/2023/03/05/Java%E5%8F%8D%E5%B0%84/"/>
    <id>http://example.com/2023/03/05/Java%E5%8F%8D%E5%B0%84/</id>
    <published>2023-03-05T07:00:00.000Z</published>
    <updated>2023-03-05T09:56:28.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java反射机制概述"><a href="#Java反射机制概述" class="headerlink" title="Java反射机制概述"></a>Java反射机制概述</h1><p>Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射。<br><img src="https://img-blog.csdnimg.cn/img_convert/55a0434a0a4bf6209c9daf4ba81a3808.png" alt="img"></p><blockquote><p>动态语言</p></blockquote><p>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。主要动态语言：Object-C、C#、JavaScript、PHP、Python、Erlang。</p><blockquote><p>静态语言</p></blockquote><p>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。</p><p>Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！<br>Java反射机制提供的功能</p><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul><p>反射相关的主要API</p><ul><li>java.lang.Class:代表一个类</li><li>java.lang.reflect.Method:代表类的方法</li><li>java.lang.reflect.Field:代表类的成员变量</li><li>java.lang.reflect.Constructor:代表类的构造器</li></ul><blockquote><p>实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> github;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好，我是🔔&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">showNation</span><span class="params">(String nation)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喷子实在太多了！！！&quot;</span> + nation);</span><br><span class="line">        <span class="keyword">return</span> nation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line">     <span class="comment">//反射之后 ，堆与Person的操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        <span class="comment">//1.通过反射，创建Person类的对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> clazz.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cons.newInstance(<span class="string">&quot;Jon&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) obj;</span><br><span class="line">        System.out.println(p.toString());</span><br><span class="line">        <span class="comment">//2.通过反射，调用对象指定的属性和方法</span></span><br><span class="line">        <span class="comment">//调用属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        age.set(p,<span class="number">10</span>);</span><br><span class="line">        System.out.println(p.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">show</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        show.invoke(p);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;+++++++++++++++++++++++++&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射，是可以调用Person类的私有结构的。比如：私有的构造器、方法、属性</span></span><br><span class="line">        <span class="comment">//调用私有的构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons2</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        cons2.setAccessible(<span class="literal">true</span>);<span class="comment">//访问私有变量或者私有构造器都需要设置可以访问否则会报错</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> (Person) cons2.newInstance(<span class="string">&quot;kalo&quot;</span>);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用私有的属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(p1,<span class="string">&quot;Taoyao&quot;</span>);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用私有的方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">showNation</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;LiNin&quot;</span>, String.class);</span><br><span class="line">        showNation.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">nation</span> <span class="operator">=</span> (String) showNation.invoke(p1,<span class="string">&quot;FaceBook&quot;</span>);</span><br><span class="line">        <span class="comment">//相当于String nation = p1.showNation(&quot;FaceBook&quot;)</span></span><br><span class="line">        System.out.println(nation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 疑问1：通过直接new的方式或反射的方式都可以调用公共的结构，开发中到底用那个？</span></span><br><span class="line"><span class="comment">     * 建议：直接new的方式。</span></span><br><span class="line"><span class="comment">     * 什么时候会使用：反射的方式。 反射的特征：动态性</span></span><br><span class="line"><span class="comment">     * 疑问2：反射机制与面向对象中的封装性是不是矛盾的？如何看待两个技术？</span></span><br><span class="line"><span class="comment">     * 不矛盾。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="理解Class类并获取Class实例"><a href="#理解Class类并获取Class实例" class="headerlink" title="理解Class类并获取Class实例"></a>理解Class类并获取Class实例</h1><h2 id="Class类的理解"><a href="#Class类的理解" class="headerlink" title="Class类的理解"></a>Class类的理解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于java.lang.Class类的理解</span></span><br><span class="line"><span class="comment"> * 1.类的加载过程：</span></span><br><span class="line"><span class="comment"> * 程序经过Javac.exe命令后，会生成一个或多个字节码文件(.class结尾)。</span></span><br><span class="line"><span class="comment"> * 接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件</span></span><br><span class="line"><span class="comment"> * 加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此</span></span><br><span class="line"><span class="comment"> * 运行时类，就作为Class的一个实例。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.换句话说，Class的实例就对应着一个运行时类。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Class类的常用方法</strong></p></blockquote><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>static Class forName（String name）</td><td>返回指定类名name的Class对象</td></tr><tr><td>Object newInstance（）</td><td>调用无参构造函数，返回Class对象的一个实例</td></tr><tr><td>getName（）</td><td>返回此Class对象所表示的实体（类、接口、数组类、基本类型或者void）名称</td></tr><tr><td>Class getSuperClass（）</td><td>返回当前Class对象的父类的Class对象</td></tr><tr><td>Class[] getSuperInterfaces（）</td><td>返回当前Class对象的接口</td></tr><tr><td>Classloader getClassLoader（）</td><td>返回该类的类加载器</td></tr><tr><td>Class getSuperclass（）</td><td>返回表示此Class所表示的实体的超类的Class</td></tr><tr><td>Constructor[] getConstructors()</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回Field对象的一个数组</td></tr><tr><td>Method getMethod(String name,Classs… paamTypes)</td><td>返回一个Method对象,此对象的形参类型为paamType</td></tr></tbody></table><h2 id="获取Class实例的4种方式"><a href="#获取Class实例的4种方式" class="headerlink" title="获取Class实例的4种方式"></a>获取Class实例的4种方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.换句话说，Class的实例就对应着一个运行时类。</span></span><br><span class="line"><span class="comment">     * 3.加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式</span></span><br><span class="line"><span class="comment">     * 来获取此运行时类。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：通过运行时类的对象,调用getClass()</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> p1.getClass();</span><br><span class="line">        System.out.println(c2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：调用Class的静态方法：forName(String classPath)</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;www.gh110.com&quot;</span>);</span><br><span class="line"><span class="comment">//        c3 = Class.forName(&quot;www.123.com&quot;);</span></span><br><span class="line">        System.out.println(c3);</span><br><span class="line"></span><br><span class="line">        System.out.println(c1 == c2);</span><br><span class="line">        System.out.println(c1 == c3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式四：使用类的加载器：ClassLoader  (了解)</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ReflectionTest.class.getClassLoader();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> classLoader.loadClass(<span class="string">&quot;www.gh110.com&quot;</span>);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line"></span><br><span class="line">        System.out.println(c1 == c4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Class实例对应的结构的说明"><a href="#Class实例对应的结构的说明" class="headerlink" title="Class实例对应的结构的说明"></a>Class实例对应的结构的说明</h2><p>1、哪些类型可以有Class对象？</p><p>（1）<code>class</code>：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类<br>（2）<code>interface</code>：接口<br>（3）<code>[]</code>：数组<br>（4）<code>enum</code>：枚举<br>（5）<code>annotation</code>：注解<code>@interface</code><br>（6）<code>primitivetype</code>：基本数据类型<br>（7）<code>void</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//万事万物皆对象？对象.xxx,File,URL,反射,前端、数据库操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Class实例可以是哪些结构的说明：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s1</span> <span class="operator">=</span> Object.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s2</span> <span class="operator">=</span> Comparable.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s3</span> <span class="operator">=</span> String[].class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="type">int</span>[][].class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s5</span> <span class="operator">=</span> ElementType.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s6</span> <span class="operator">=</span> Override.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s7</span> <span class="operator">=</span> <span class="type">int</span>.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s8</span> <span class="operator">=</span> <span class="keyword">void</span>.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s9</span> <span class="operator">=</span> Class.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s10</span> <span class="operator">=</span> a.getClass();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s11</span> <span class="operator">=</span> b.getClass();</span><br><span class="line">        <span class="comment">// 只要数组的元素类型与维度一样，就是同一个Class</span></span><br><span class="line">        System.out.println(s10 == s11);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="类的加载与ClassLoader的理解"><a href="#类的加载与ClassLoader的理解" class="headerlink" title="类的加载与ClassLoader的理解"></a>类的加载与<a href="https://so.csdn.net/so/search?q=ClassLoader&spm=1001.2101.3001.7020">ClassLoader</a>的理解</h1><h2 id="了解：类的加载过程"><a href="#了解：类的加载过程" class="headerlink" title="了解：类的加载过程"></a>了解：类的加载过程</h2><p><strong>.java文件到.class文件</strong></p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221216112400.png?raw=true" alt="blog_images20221216112400.png"></p><blockquote><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化。</p></blockquote><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221216112018.png?raw=true" alt="blog_images20221216112018.png"></p><blockquote><p>说明</p></blockquote><p>加载：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与。</p><p>链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。</p><ul><li>​    验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题</li><li>​    准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。</li><li>​    解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</li></ul><p>初始化：</p><ul><li>执行类构造器()方法的过程。类构造器()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。</li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li><li>虚拟机会保证一个类的()方法在多线程环境中被正确加锁和同步。</li></ul><h2 id="了解：什么时候会发生类初始化？"><a href="#了解：什么时候会发生类初始化？" class="headerlink" title="了解：什么时候会发生类初始化？"></a>了解：什么时候会发生类初始化？</h2><p>类的主动引用（一定会发生类的初始化）</p><ul><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了final常量）和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul><p>类的被动引用（不会发生类的初始化）</p><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化<ul><li>当通过子类引用父类的静态变量，不会导致子类初始化</li></ul></li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul><h2 id="ClassLoader的理解"><a href="#ClassLoader的理解" class="headerlink" title="ClassLoader的理解"></a>ClassLoader的理解</h2><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221216113344.png?raw=true" alt="blog_images20221216113344.png"></p><p>类加载器的作用：</p><ul><li>类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</li><li>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</li></ul><p>类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的类的加载器。</p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221216113538.png?raw=true" alt="blog_images20221216113538.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 了解类的加载器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//对于自定义类，使用系统类加载器进行加载</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoaderTest.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">        <span class="comment">//调用系统类加载器的getParent()：获取扩展类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader1</span> <span class="operator">=</span> classLoader.getParent();</span><br><span class="line">        System.out.println(classLoader1);</span><br><span class="line">        <span class="comment">//调用扩展类加载器的getParent()：无法获取引导类加载器</span></span><br><span class="line">        <span class="comment">//引导类加载器主要负责加载java的核心类库，无法加载自定义类的。</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader2</span> <span class="operator">=</span> classLoader1.getParent();</span><br><span class="line">        System.out.println(classLoader2);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader3</span> <span class="operator">=</span> String.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221216153258.png?raw=true" alt="blog_images20221216153258.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 了解类的加载器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Properties：用来读取配置文件。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//此时的文件默认在当前的module下。</span></span><br><span class="line">        <span class="comment">//读取配置文件的方式一：</span></span><br><span class="line"><span class="comment">//        FileInputStream fis = new FileInputStream(&quot;jdbc.properties&quot;);</span></span><br><span class="line"><span class="comment">//        pros.load(fis);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取配置文件的方式二：使用ClassLoader</span></span><br><span class="line">        <span class="comment">//配置文件默认识别为：当前module的src下</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoaderTest.class.getClassLoader();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> classLoader.getResourceAsStream(<span class="string">&quot;jdbc1.properties&quot;</span>);</span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user + <span class="string">&quot;,password = &quot;</span> + password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用ClassLoader加载配置文件"><a href="#使用ClassLoader加载配置文件" class="headerlink" title="使用ClassLoader加载配置文件"></a>使用ClassLoader加载配置文件</h2><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221216153258.png?raw=true" alt="blog_images20221216153258.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Test02.class.getClassLoader();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> classLoader.getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);<span class="comment">//默认从resources里面获取</span></span><br><span class="line">properties.load(is);</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">System.out.println(username);</span><br></pre></td></tr></table></figure><h1 id="通过反射，创建运行时类的对象"><a href="#通过反射，创建运行时类的对象" class="headerlink" title="通过反射，创建运行时类的对象"></a>通过反射，创建运行时类的对象</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过发射创建对应的运行时类的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewInstanceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * newInstance():调用此方法，创建对应的运行时类的对象。内部调用了运行时类的空参的构造器。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 要想此方法正常的创建运行时类的对象，要求：</span></span><br><span class="line"><span class="comment">         * 1.运行时类必须提供空参的构造器</span></span><br><span class="line"><span class="comment">         * 2.空参的构造器的访问权限得够。通常，设置为public。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 在javabean中要求提供一个public的空参构造器。原因：</span></span><br><span class="line"><span class="comment">         * 1.便于通过反射，创建运行时类的对象</span></span><br><span class="line"><span class="comment">         * 2.便于子类继承此运行时类时，默认调用super()时，保证父类有此构造器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="举例体会反射的动态性"><a href="#举例体会反射的动态性" class="headerlink" title="举例体会反射的动态性"></a>举例体会反射的动态性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过发射创建对应的运行时类的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewInstanceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);<span class="comment">//0,1,2</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">switch</span>(num)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;java.util.Date&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;java.lang.Object&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;www.java.Person&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> getInstance(classPath);</span><br><span class="line">                System.out.println(obj);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个指定类的对象。</span></span><br><span class="line"><span class="comment">     * classPath:指定类的全类名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getInstance</span><span class="params">(String classPath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span>  Class.forName(classPath);</span><br><span class="line">        <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="举例体会反射的动态性-1"><a href="#举例体会反射的动态性-1" class="headerlink" title="举例体会反射的动态性"></a>举例体会反射的动态性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过发射创建对应的运行时类的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewInstanceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);<span class="comment">//0,1,2</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">switch</span>(num)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;java.util.Date&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;java.lang.Object&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;www.java.Person&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> getInstance(classPath);</span><br><span class="line">                System.out.println(obj);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个指定类的对象。</span></span><br><span class="line"><span class="comment">     * classPath:指定类的全类名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getInstance</span><span class="params">(String classPath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span>  Class.forName(classPath);</span><br><span class="line">        <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="获取运行时类的完整结构"><a href="#获取运行时类的完整结构" class="headerlink" title="获取运行时类的完整结构"></a>获取运行时类的完整结构</h1>]]></content>
    
    
    <summary type="html">java反射</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringSecurity</title>
    <link href="http://example.com/2023/03/05/Spring%20Security/"/>
    <id>http://example.com/2023/03/05/Spring%20Security/</id>
    <published>2023-03-05T07:00:00.000Z</published>
    <updated>2023-03-05T09:53:55.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security介绍"><a href="#Spring-Security介绍" class="headerlink" title="Spring Security介绍"></a>Spring Security介绍</h1><h2 id="Spring-Security简介"><a href="#Spring-Security简介" class="headerlink" title="Spring Security简介"></a>Spring Security简介</h2><p>Spring 是非常流行和成功的 Java 应用开发框架，Spring Security 正是 Spring 家族中的成员。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。</p><p>正如你可能知道的关于安全方面的两个核心功能是“<strong>认证</strong>”和“<strong>授权</strong>”，一般来说，Web 应用的安全性包括<strong>用户认证（Authentication）和用户授权（Authorization）</strong>两个部分，这两点也是 SpringSecurity 重要核心功能。</p><p>（1）用户认证指的是：验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码，系统通过校验用户名和密码来完成认证过程。</p><p><strong>通俗点说就是系统认为用户是否能登录</strong></p><p>（2）用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</p><p><strong>通俗点讲就是系统判断用户是否有权限去做某些事情。</strong></p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>“Spring Security 开始于 2003 年年底,““spring 的 acegi 安全系统”。 起因是 Spring开发者邮件列表中的一个问题,有人提问是否考虑提供一个基于 spring 的安全实现。</p><p>Spring Security 以“The Acegi Secutity System for Spring” 的名字始于 2013 年晚些时候。一个问题提交到 Spring 开发者的邮件列表，询问是否已经有考虑一个机遇 Spring 的安全性社区实现。那时候 Spring 的社区相对较小（相对现在）。实际上 Spring 自己在2013 年只是一个存在于 ScourseForge 的项目，这个问题的回答是一个值得研究的领域，虽然目前时间的缺乏组织了我们对它的探索。</p><p>考虑到这一点，一个简单的安全实现建成但是并没有发布。几周后，Spring 社区的其他成员询问了安全性，这次这个代码被发送给他们。其他几个请求也跟随而来。到 2014 年一月大约有 20 万人使用了这个代码。这些创业者的人提出一个 SourceForge 项目加入是为了，这是在 2004 三月正式成立。</p><p>在早些时候，这个项目没有任何自己的验证模块，身份验证过程依赖于容器管理的安全性和 Acegi 安全性。而不是专注于授权。开始的时候这很适合，但是越来越多的用户请求额外的容器支持。容器特定的认证领域接口的基本限制变得清晰。还有一个相关的问题增加新的容器的路径，这是最终用户的困惑和错误配置的常见问题。</p><p>Acegi 安全特定的认证服务介绍。大约一年后，Acegi 安全正式成为了 Spring 框架的子项目。1.0.0 最终版本是出版于 2006 -在超过两年半的大量生产的软件项目和数以百计的改进和积极利用社区的贡献。</p><p>Acegi 安全 2007 年底正式成为了 Spring 组合项目，更名为”Spring Security”。</p><h1 id="同款产品对比"><a href="#同款产品对比" class="headerlink" title="同款产品对比"></a>同款产品对比</h1><h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><p>Spring 技术栈的组成部分。</p><p><a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a></p><p>通过提供完整可扩展的认证和授权支持保护你的应用程序。</p><p><strong>SpringSecurity 特点：</strong></p><p>⚫ 和 Spring 无缝整合。</p><p>⚫ 全面的权限控制。</p><p>⚫ 专门为 Web 开发而设计。</p><p>​    ◼旧版本不能脱离 Web 环境使用。</p><p>​    ◼新版本对整个框架进行了分层抽取，分成了核心模块和 Web 模块。单独引入核心模块就可以脱离 Web 环境。</p><p>⚫ 重量级。</p><h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h2><p>Apache 旗下的轻量级权限控制框架。</p><p><strong>特点：</strong></p><p>⚫ 轻量级。Shiro 主张的理念是把复杂的事情变简单。针对对性能有更高要求</p><p>的互联网应用有更好表现。</p><p>⚫ 通用性。</p><p>​    ◼好处：不局限于 Web 环境，可以脱离 Web 环境使用。</p><p>​    ◼缺陷：在 Web 环境下一些特定的需求需要手动编写代码定制。</p><p>Spring Security 是 Spring 家族中的一个安全管理框架，实际上，在 Spring Boot 出现之前，Spring Security 就已经发展了多年了，但是使用的并不多，安全管理这个领域，一直是 Shiro 的天下。</p><p>相对于 Shiro，在 SSM 中整合 Spring Security 都是比较麻烦的操作，所以，Spring Security 虽然功能比 Shiro 强大，但是使用反而没有 Shiro 多（Shiro 虽然功能没有Spring Security 多，但是对于大部分项目而言，Shiro 也够用了）。</p><p>自从有了 Spring Boot 之后，Spring Boot 对于 Spring Security 提供了自动化配置方案，可以使用更少的配置来使用 Spring Security。</p><p>因此，一般来说，常见的安全管理技术栈的组合是这样的：</p><p>• SSM + Shiro</p><p>• Spring Boot/Spring Cloud + Spring Security</p><p><strong>以上只是一个推荐的组合而已，如果单纯从技术上来说，无论怎么组合，都是可以运行的</strong></p><h1 id="Spring-Security实现权限"><a href="#Spring-Security实现权限" class="headerlink" title="Spring Security实现权限"></a>Spring Security实现权限</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>要对Web资源进行保护，最好的办法莫过于Filter<br>要想对方法调用进行保护，最好的办法莫过于<a href="https://so.csdn.net/so/search?q=AOP&spm=1001.2101.3001.7020">AOP</a>。</p><p>Spring Security进行认证和鉴权的时候,就是利用的一系列的Filter来进行拦截的。</p><p><img src="https://img-blog.csdnimg.cn/20201231155747261.png" alt="img"></p><p>如图所示，一个请求想要访问到API就会从左到右经过蓝线框里的过滤器，其中<strong>绿色部分是负责认证的过滤器，蓝色部分是负责异常处理，橙色部分则是负责授权</strong>。进过一系列拦截最终访问到我们的API。</p><p>这里面我们只需要重点关注两个过滤器即可：<code>UsernamePasswordAuthenticationFilter</code>负责登录认证，<code>FilterSecurityInterceptor</code>负责权限授权。</p><p>说明：<strong>Spring Security的核心逻辑全在这一套过滤器中，过滤器里会调用各种组件完成功能，掌握了这些过滤器和组件你就掌握了Spring Security</strong>！这个框架的使用方式就是对这些过滤器和组件进行扩展。</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">&lt;!-- Spring Security依赖 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：依赖包（spring-boot-starter-security）导入后，Spring Security就默认提供了许多功能将整个应用给保护了起来：</p><p>​    1、要求经过身份验证的用户才能与应用程序进行交互</p><p>​    2、创建好了默认登录表单</p><p>​    3、生成用户名为<code>user</code>的随机密码并打印在控制台上</p><p>​    4、<code>CSRF</code>攻击防护、<code>Session Fixation</code>攻击防护</p><p>​    5、等等等等……</p><p>引入依赖后我们在尝试去访问之前的接口就会自动跳转到一个SpringSecurity的默认登陆页面，默认用户名是user,密码会输出在控制台。</p><p> 必须登陆之后才能对接口进行访问。</p><p><strong>在进行SpringSecurity学习之前先认识HttpSecurity和WebSecurity</strong></p><p>为什么会有 Http security 这么个东西存在？</p><ul><li>为了阻止假用户冒充真实用户访问网站，所以需要 认证（authentication）。</li><li>为了阻止真实用户访问本不是他应该访问的页面，所以需要授权（authorization）。</li><li>为了阻止真实用户与网站之间传输的信息被第三方窃听到，所以需要加密（encryption）。</li></ul><blockquote><p>Spring Security是一个强大的、可根据需求高度自定义的用户认证和访问控制框架。Spring Security 怎么保证所有向<br>Spring application 发送请求的用户必须先通过认证？怎么保证用户可以通过表单或者 http<br>的方式进行认证。解决的办法是Spring<br>Security中有个WebSecurityConfigurerAdapter类，程序员通过继承这个类并重写<br>configure(HttpSecurity http) 方法就可以按照场景需求自定义认证和授权。</p></blockquote><blockquote><p>HttpSecurity是Spring Security Config用于配置http请求安全控制的安全构建器(类似于Spring<br>Security<br>XML配置中的http命名空间配置部分)，它的构建目标是一个SecurityFilterChain,实现类使用DefaultSecurityFilterChain。该目标SecurityFilterChain最终会被Spring<br>Security的安全过滤器FilterChainProxy所持有和应用于相应的http请求的安全控制</p></blockquote><p>当配置表单登录后，就需要一个登录页面供用户填写 用户名 和 密码。Spring Secrity<br>默认了一个页面，如果你觉得它很丑，也可以自己写一个，使用 loginPage(“/login”)<br>声明自定义的登录页面所在位置。当用户第一次访问 web 应用时会自动跳转到默认登录界面或者用户自定义的登录界面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">http</span><br><span class="line">.authorizeRequests()</span><br><span class="line">.anyRequest().authenticated()</span><br><span class="line">.and()</span><br><span class="line">.formLogin()</span><br><span class="line">.loginPage(<span class="string">&quot;/login&quot;</span>) </span><br><span class="line">.permitAll();        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个demo中，loginPage(“/login”)指定了登录页的URL，并允许所有的用户(包括没认证的)访问登录页，formLogin().permitAll()方法允许所有用户访问这个URL。<br>认证请求</p><p>应用程序的每个URL都要求用户通过认证，我们可以通过给http.authorizeRequests()方法添加子方法的方式为每个URL指定自定义要求。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">http</span><br><span class="line">.authorizeRequests()                                                                <span class="number">1</span></span><br><span class="line">.antMatchers(<span class="string">&quot;/resources/**&quot;</span>, <span class="string">&quot;/signup&quot;</span>, <span class="string">&quot;/about&quot;</span>).permitAll()                  <span class="number">2</span></span><br><span class="line">.antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)                                      <span class="number">3</span></span><br><span class="line">.antMatchers(<span class="string">&quot;/db/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ADMIN&#x27;) and hasRole(&#x27;DBA&#x27;)&quot;</span>)            <span class="number">4</span></span><br><span class="line">.anyRequest().authenticated()                                                   <span class="number">5</span></span><br><span class="line">.and()</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">.formLogin();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">**http.authorizeRequests()**下添加了多个匹配器，每个匹配器用来控制不同的URL接受不同的用户访问。简单讲，http.authorizeRequests()就是在进行请求的权限配置。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">所有用户都可以访问以/resources</span></span><br><span class="line"><span class="comment">    /**开头的URL，和/signup、/about两个URL。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">拥有ADMIN角色的用户可以访问以/admin/开头的URL。hasRole(String)：如果当前用户有String表示的角色，则返回True。</span></span><br><span class="line"><span class="comment">同时拥有ADMIN和DBA角色的用户可以访问以/db/**开头的URL。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">access(String)：当String为true时才可进行访问。</span></span><br><span class="line"><span class="comment">所有没被匹配器匹配到的URL都需用户通过认证。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">and()返回一个SecurityBuilder。Spring Security支持两种认证方式：formLogin()和httpBasic()。</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><blockquote><p><strong>安全构建器HttpSecurity和WebSecurity的区别是 :</strong></p><p>WebSecurity不仅通过HttpSecurity定义某些请求的安全控制，也通过其他方式定义其他某些请求可以忽略安全控制;<br>HttpSecurity仅用于定义需要安全控制的请求(当然HttpSecurity也可以指定某些请求不需要安全控制);<br>可以认为HttpSecurity是WebSecurity的一部分，WebSecurity是包含HttpSecurity的更大的一个概念;</p><p>注意 : 这里是从语义上讲，而不是从实现层面的表示形式上讲；</p><p>构建目标不同<br>    WebSecurity构建目标是整个Spring Security安全过滤器FilterChainProxy,<br>    而HttpSecurity的构建目标仅仅是FilterChainProxy中的一个SecurityFilterChain。</p></blockquote><h2 id="WebSecurityConfigurerAdapter已弃用"><a href="#WebSecurityConfigurerAdapter已弃用" class="headerlink" title="WebSecurityConfigurerAdapter已弃用"></a>WebSecurityConfigurerAdapter已弃用</h2><p>在 Spring Security 5.7.0-M2 中，弃用了 <code>WebSecurityConfigurerAdapter</code>，Spring 鼓励用户转向基于组件的安全配置。</p><h3 id="配置-HttpSecurity"><a href="#配置-HttpSecurity" class="headerlink" title="配置 HttpSecurity"></a>配置 <code>HttpSecurity</code></h3><p>在 Spring Security 5.4 中，Spring 引入了通过创建 SecurityFilterChain bean 来配置 HttpSecurity 的能力。<br><del>以下是使用 WebSecurityConfigurerAdapter 的示例配置，该配置使用 HTTP Basic 保护所有站点：</del>（不推荐使用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">            .authorizeHttpRequests((authz) -&gt; authz</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">            )</span><br><span class="line">            .httpBasic(withDefaults());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>推荐的方法是注册一个 <code>SecurityFilterChain</code> bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">            .authorizeHttpRequests((authz) -&gt; authz</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">            )</span><br><span class="line">            .httpBasic(withDefaults());</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置WebSecurity"><a href="#配置WebSecurity" class="headerlink" title="配置WebSecurity"></a>配置<code>WebSecurity</code></h3><p>在 Spring Security 5.4 中，Spring 还引入了 <code>WebSecurityCustomizer</code>。<code>WebSecurityCustomizer</code> 是一个回调接口，可用于自定义 <code>WebSecurity</code>。<del>下面是使用 <code>WebSecurityConfigurerAdapter</code> 的示例配置，它忽略匹配 <code>/ignore1</code> 或 <code>/ignore2</code> 的请求：</del>(不推荐使用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> &#123;</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/ignore1&quot;</span>, <span class="string">&quot;/ignore2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐的方法是注册一个 <code>WebSecurityCustomizer</code> bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebSecurityCustomizer <span class="title function_">webSecurityCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (web) -&gt; web.ignoring().antMatchers(<span class="string">&quot;/ignore1&quot;</span>, <span class="string">&quot;/ignore2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpSecurity常用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">URL匹配</span><br><span class="line">requestMatchers() 配置一个request Mather数组，参数为RequestMatcher 对象，其match 规则自定义,需要的时候放在最前面，对需要匹配的的规则进行自定义与过滤</span><br><span class="line">authorizeRequests() URL权限配置</span><br><span class="line">antMatchers() 配置一个request Mather 的 string数组，参数为 ant 路径格式， 直接匹配url</span><br><span class="line">anyRequest 匹配任意url，无参 ,最好放在最后面</span><br><span class="line"></span><br><span class="line">保护URL</span><br><span class="line">authenticated() 保护UrL，需要用户登录</span><br><span class="line">permitAll() 指定URL无需保护，一般应用与静态资源文件</span><br><span class="line">hasRole(String role) 限制单个角色访问，角色将被增加 “ROLE_” .所以”ADMIN” 将和 “ROLE_ADMIN”进行比较. 另一个方法是hasAuthority(String authority)</span><br><span class="line">hasAnyRole(String… roles) 允许多个角色访问. 另一个方法是hasAnyAuthority(String… authorities)</span><br><span class="line">access(String attribute) 该方法使用 SPEL, 所以可以创建复杂的限制 例如如access(“permitAll”), access(“hasRole(‘ADMIN’) and hasIpAddress(‘123.123.123.123’)”)</span><br><span class="line">hasIpAddress(String ipaddressExpression) 限制IP地址或子网</span><br><span class="line"></span><br><span class="line">登录login</span><br><span class="line">formLogin() 基于表单登录</span><br><span class="line">loginPage() 登录页</span><br><span class="line">defaultSuccessUrl 登录成功后的默认处理页</span><br><span class="line">failuerHandler登录失败之后的处理器</span><br><span class="line">successHandler登录成功之后的处理器</span><br><span class="line">failuerUrl登录失败之后系统转向的url，默认是this.loginPage + “?error”</span><br><span class="line"></span><br><span class="line">登出logout</span><br><span class="line">logoutUrl 登出url ， 默认是/logout， 它可以是一个ant path url</span><br><span class="line">logoutSuccessUrl 登出成功后跳转的 url 默认是&quot;/login?logout&quot;</span><br><span class="line">logoutSuccessHandler 登出成功处理器，设置后会把logoutSuccessUrl 置为null</span><br></pre></td></tr></table></figure><h2 id="校验登录"><a href="#校验登录" class="headerlink" title="校验登录"></a>校验登录</h2><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221230131610.png?raw=true" alt="blog_images20221230131610.png"></p><p>SpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。这里我们可以看看入门案例中的过滤器。</p><p><img src="https://img-blog.csdnimg.cn/b9054ffc41f54640b43508506177dea5.png" alt="在这里插入图片描述"></p><p>图中只展示了核心过滤器，其它的非核心过滤器并没有在图中展示。</p><ul><li>UsernamePasswordAuthenticationFilter:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</li><li>ExceptionTranslationFilter：处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException。</li><li>FilterSecurityInterceptor：负责权限校验的过滤器。</li></ul><h3 id="认证流程详解"><a href="#认证流程详解" class="headerlink" title="认证流程详解"></a>认证流程详解</h3><p><img src="https://github.com/446773160/Picbed/blob/main/blog_imagesimage-20220620115942257.png?raw=true" alt="blog_imagesimage-20220620115942257.png"></p><ul><li><p>UsernamePasswordAuthenticationFilter：是我们最常用的用户名和密码认证方式的主要处理类,构造了一个UsernamePasswordAuthenticationToken对象实现类，将用请求信息封装为Authentication</p></li><li><p>Authentication接口: 封装了用户相关信息。</p></li><li><p>AuthenticationManager接口：定义了认证Authentication的方法，是认证相关的核心接口，也是发起认证的出发点，因为在实际需求中，我们可能会允许用户使用用户名+密码登录，同时允许用户使用邮箱+密码，手机号码+密码登录，甚至，可能允许用户使用指纹登录（还有这样的操作？没想到吧），所以说AuthenticationManager一般不直接认证，AuthenticationManager接口的常用实现类ProviderManager 内部会维护一个List列表，存放多种认证方式，实际上这是委托者模式的应用（Delegate）。也就是说，核心的认证入口始终只有一个：AuthenticationManager</p></li><li><p>AuthenticationManager，ProviderManager ，AuthenticationProvider…</p></li><li><p>用户名+密码（UsernamePasswordAuthenticationToken），邮箱+密码，手机号码+密码登录则对应了三个AuthenticationProvider</p></li><li><p>DaoAuthenticationProvider:用于解析并认证 UsernamePasswordAuthenticationToken 的这样一个认证服务提供者,对应以上的几种登录方式。</p></li><li><p>UserDetailsService接口：Spring Security 会将前端填写的username 传给 UserDetailService.loadByUserName方法。我们只需要从数据库中根据用户名查找到用户信息然后封装为UserDetails的实现类返回给SpringSecurity 即可，自己不需要进行密码的比对工作，密码比对交由SpringSecurity处理。</p></li><li><p>UserDetails接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。</p></li></ul><h3 id="流程开发"><a href="#流程开发" class="headerlink" title="流程开发"></a>流程开发</h3><p>登录：</p><p> <strong>1.自定义登录接口</strong></p><p> 调用ProviderManager的方法进行认证 如果认证通过生成jwt</p><p> 把用户信息存入redis中</p><p><strong>2.自定义UserDetailsService</strong></p><p> 在这个实现类中去查询数据库</p><p>校验：</p><p> 1.定义Jwt认证过滤器</p><p> 获取token</p><p> 解析token获取其中的userid</p><p> 从redis中获取用户信息</p><p> 存入SecurityContextHolder</p><p>配置SecurityConfiguration</p><p>自定义UserDetails</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> com.example.spring.pojo.User user;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginUser</span><span class="params">(com.example.spring.pojo.User user, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(user.getUsername(), user.getPassword(), authorities);</span><br><span class="line">        <span class="built_in">this</span>.user=user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> com.example.spring.pojo.User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(com.example.spring.pojo.User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SpringSecurity</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis学习</title>
    <link href="http://example.com/2022/12/01/Redis%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2022/12/01/Redis%E5%BA%94%E7%94%A8/</id>
    <published>2022-12-01T08:30:00.000Z</published>
    <updated>2022-12-02T06:57:01.774Z</updated>
    
    <content type="html"><![CDATA[<p><strong>PS：Linux启动redis</strong></p><p>sudo service redis-server start</p><p>redis-cli</p><h1 id="Redis是什么？what？"><a href="#Redis是什么？what？" class="headerlink" title="Redis是什么？what？"></a>Redis是什么？what？</h1><p>Redis（Remote Dictionary Server )，即远程字典服务 !<br>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。<br>免费和开源！是当下最热门的 NoSQL 技术之一！也被人们称之为结构化数据库！<br>Redis能干嘛？<br>1、内存存储、持久化，内存中是断电即失、所以说持久化很重要（rdb、aof） 2、效率高，可以用于高速缓存<br>3、发布订阅系统<br>4、地图信息分析<br>5、计时器、计数器（浏览量！）<br>6、…</p><h1 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">ping</span>  #查看当前连接是否正常，正常返回PONG</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; clear  #清楚当前控制台（为了更好的看到下面输入的命令）</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; keys *  #查看当前库里所有的key</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; flushall  #清空所有库的内容</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; keys *  #查看所以的key</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name didadida  #设置key value键值对</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get name #获取键值</span><br><span class="line">&quot;didadida&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; exists name  #判断当前key是否存在</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">move</span> name <span class="number">1</span>  #移除当前库<span class="number">1</span>的key为‘name‘的数据 成功返回<span class="number">1</span>不成功返回<span class="number">0</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; flushall  #再次清空所有库的内容</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; expire name <span class="number">15</span>  #设置key为’name‘的数据过期时间为<span class="number">15</span>秒 单位seconds</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ttl name  #查看当前key为’name‘的剩余生命周期时间</span><br><span class="line">(integer) <span class="number">13</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">type</span> name</span><br><span class="line">string</span><br></pre></td></tr></table></figure><h1 id="Redis基本数据类型"><a href="#Redis基本数据类型" class="headerlink" title="Redis基本数据类型"></a>Redis基本数据类型</h1><h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h2><h3 id="创建、添加、查询、追加、获取长度，判断是否存在的操作"><a href="#创建、添加、查询、追加、获取长度，判断是否存在的操作" class="headerlink" title="创建、添加、查询、追加、获取长度，判断是否存在的操作"></a>创建、添加、查询、追加、获取长度，判断是否存在的操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#创建</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name didadida</span><br><span class="line">OK</span><br><span class="line">#查询</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line">&quot;didadida&quot;</span><br><span class="line">#添加</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">append</span> name hello #返回添加之后的字符串长度</span><br><span class="line">(integer) <span class="number">13</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; exists name  #判断key为‘name’的数据存在不存在，存在返回<span class="number">1</span> ，不存在返回<span class="number">0</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; strlen name  #获取字符串长度</span><br><span class="line">(integer) <span class="number">13</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> key1 &quot;hello world!&quot;  #注意点：插入的数据中如果有空格的数据，请用“”双引号，否则会报错！</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> key1 hello world!  #报错，因为在Redis中空格就是分隔符，相当于该参数已结束</span><br><span class="line">(error) ERR syntax error</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> key1 hello,world!  #逗号是可以的</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="自增自减操作"><a href="#自增自减操作" class="headerlink" title="自增自减操作"></a>自增自减操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> num <span class="number">0</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get num</span><br><span class="line">&quot;<span class="number">0</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; incr num #指定key为‘num’的数据自增<span class="number">1</span>，返回结果  相当于java中 i++</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get num #一般用来做文章浏览量、点赞数、收藏数等功能</span><br><span class="line">&quot;<span class="number">1</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; decr num  #指定key为‘num’的数据自减<span class="number">1</span>，返回结果  相当于java中 i--</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; decr num ##可以一直减为负数~ 一般用来做文章取消点赞、取消收藏等功能</span><br><span class="line">(integer) -<span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; incrby num <span class="number">10</span> #后面跟上by  指定key为‘num’的数据自增‘参数（<span class="number">10</span>）’，返回结果</span><br><span class="line">(integer) <span class="number">9</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; decrby num <span class="number">10</span> #后面跟上by  指定key为‘num’的数据自减‘参数（<span class="number">10</span>）’，返回结果</span><br><span class="line">(integer) -<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="截取、替换字符串操作"><a href="#截取、替换字符串操作" class="headerlink" title="截取、替换字符串操作"></a>截取、替换字符串操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; getrange name <span class="number">0</span> <span class="number">4</span> #截取字符串，相当于java中的subString，下标从<span class="number">0</span>开始，不会改变原有数据 下标是左闭右闭</span><br><span class="line">&quot;hello&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; getrange name <span class="number">0</span> -<span class="number">1</span> #倒数第一个数据下标是-<span class="number">1</span>，倒数第二个是-<span class="number">2</span>依次类推</span><br><span class="line">&quot;hello world&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; setrange name <span class="number">5</span> <span class="number">666</span>  #此语句跟java中<span class="built_in">replace</span>有点类似，下标也是从<span class="number">0</span>开始，但是有区别：java中是指定替换字符，Redis中是从指定位置开始替换，替换的数据根据你所需替换的长度一致，返回值是替换后的长度</span><br><span class="line">(integer) <span class="number">13</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line">&quot;hello666world&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; SETRANGE name <span class="number">5</span> <span class="number">67</span> ##该处只替换了两位</span><br><span class="line">(integer) <span class="number">13</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line">&quot;hello676world&quot;</span><br></pre></td></tr></table></figure><h3 id="设置过期时间、不存在设置操作"><a href="#设置过期时间、不存在设置操作" class="headerlink" title="设置过期时间、不存在设置操作"></a>设置过期时间、不存在设置操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#设置过期时间，跟Expire的区别是前者设置已存在的key的过期时间，而setex是在创建的时候设置过期时间</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; setex name <span class="number">15</span> hello #新建一个key为‘name’，值为‘hello’，过期时间为<span class="number">15</span>秒的字符串数据</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ttl name #利用ttl查看剩余时间</span><br><span class="line">(integer) <span class="number">13</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ttl name #返回-<span class="number">2</span>表示不存在已经过期了</span><br><span class="line">(integer) -<span class="number">2</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; setnx name hello #如果key为‘name’不存在，新增数据，返回值<span class="number">1</span>证明成功</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; setnx name world  #如果key为‘name’的已存在，设置失败，返回值<span class="number">0</span>，也就是说这个跟<span class="built_in">set</span>的区别是：<span class="built_in">set</span>会替换原有的值，而setnx不会，存在即不设置，确保了数据误操作~</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="插入多条数据（mset、mget）操作"><a href="#插入多条数据（mset、mget）操作" class="headerlink" title="插入多条数据（mset、mget）操作"></a>插入多条数据（mset、mget）操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; mset k1 v1 k2 v2 k3 v3 #插入多条数据</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; keys * #查询所有key值</span><br><span class="line"><span class="number">1</span>) &quot;k3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;k2&quot;</span><br><span class="line"><span class="number">3</span>) &quot;k1&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; mget k1 k2 k3  #查询key为‘k1’，‘k2’，‘k3’的数据</span><br><span class="line"><span class="number">1</span>) &quot;v1&quot;</span><br><span class="line"><span class="number">2</span>) &quot;v2&quot;</span><br><span class="line"><span class="number">3</span>) &quot;v3&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; msetnx k1 v1 k4 v4  #msetnx是一个原子性的操作，在一定程度上保证了事务！要么都成功，要么都失败！相当于<span class="keyword">if</span>中的条件&amp;&amp;（与）  由于里面已经有k1所有插入失败</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; msetnx k4 v4 k5 v5 #全部成功</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) &quot;k1&quot;</span><br><span class="line"><span class="number">2</span>) &quot;k2&quot;</span><br><span class="line"><span class="number">3</span>) &quot;k4&quot;</span><br><span class="line"><span class="number">4</span>) &quot;k3&quot;</span><br><span class="line"><span class="number">5</span>) &quot;k5&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="添加获取对象、get-set操作"><a href="#添加获取对象、get-set操作" class="headerlink" title="添加获取对象、get set操作"></a>添加获取对象、get set操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#这里其实本质上还是字符串，但是我们讲其key巧妙的设计了一下。</span><br><span class="line">#mset student:<span class="number">1</span>:name  student 相当于类名，<span class="number">1</span> 相当于id，name 相当于属性</span><br><span class="line">#如果所需数据全部这样设计，那么我们在java的业务代码中，就不需要关注太多的key</span><br><span class="line">#只需要找到student类，下面哪个id，需要哪个属性即可，减少了代码的繁琐，在一定程度上可以理解为这个一个类的对象！</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; mset student:<span class="number">1</span>:name liao.sc student:<span class="number">1</span>:age <span class="number">18</span>  #新增一个key为‘student:<span class="number">1</span>:name’，value为‘liao.sc ’等等</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; keys * #获取所有键值</span><br><span class="line"><span class="number">1</span>) &quot;student:<span class="number">1</span>:age&quot;</span><br><span class="line"><span class="number">2</span>) &quot;student:<span class="number">1</span>:name&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; mget student:<span class="number">1</span>:age student:<span class="number">1</span>:name #获取所有value</span><br><span class="line"><span class="number">1</span>) &quot;<span class="number">18</span>&quot;</span><br><span class="line"><span class="number">2</span>) &quot;liao.sc&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; getset name hello #先get再<span class="built_in">set</span>，先获取key，如果没有，<span class="built_in">set</span>值进去，返回的是get的值</span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get name #获取name的值</span><br><span class="line">&quot;hello&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; getset name world #先获取key，如果有，<span class="built_in">set</span>（替换）最新的值进去，返回的是get的值</span><br><span class="line">&quot;hello&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get name #替换成功</span><br><span class="line">&quot;world&quot;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><em>String是Redis中最常用的一种数据类型，也是Redis中最简单的一种数据类型。首先，表面上它是字符串，但其实他可以灵活的表示字符串、整数、浮点数3种值。Redis会自动的识别这3种值。</em></p><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><h3 id="lpush（左插入）、lrange（查询集合）、rpush（右插入）操作"><a href="#lpush（左插入）、lrange（查询集合）、rpush（右插入）操作" class="headerlink" title="lpush（左插入）、lrange（查询集合）、rpush（右插入）操作"></a>lpush（左插入）、lrange（查询集合）、rpush（右插入）操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lpush list v1  #左插入,如果没有会新建一个集合</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lrange list <span class="number">0</span> -<span class="number">1</span> #查询集合所有数据，-<span class="number">1</span>表示最后一个元素，-<span class="number">2</span>表示倒数第二个元素</span><br><span class="line"><span class="number">1</span>) &quot;v3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;v2&quot;</span><br><span class="line"><span class="number">3</span>) &quot;v1&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lpush  list v1 v2 v3 v4 v5 #批量添加元素</span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lrange list <span class="number">0</span> -<span class="number">1</span> #查看所有元素</span><br><span class="line"><span class="number">1</span>) &quot;v5&quot;</span><br><span class="line"><span class="number">2</span>) &quot;v4&quot;</span><br><span class="line"><span class="number">3</span>) &quot;v3&quot;</span><br><span class="line"><span class="number">4</span>) &quot;v2&quot;</span><br><span class="line"><span class="number">5</span>) &quot;v1&quot;</span><br><span class="line">#这里大家有没有注意到，先进去的会到后面，也就是我们的lpush的意思是左插入，l--left</span><br><span class="line">#rpush和lpush相似属于右插入这边不过多赘述</span><br></pre></td></tr></table></figure><h3 id="lpop（左移除）、rpop（右移除）操作"><a href="#lpop（左移除）、rpop（右移除）操作" class="headerlink" title="lpop（左移除）、rpop（右移除）操作"></a>lpop（左移除）、rpop（右移除）操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lpop list #从左边第一个开始移除</span><br><span class="line">&quot;v5&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lrange list <span class="number">0</span> -<span class="number">1</span> #查看全部数据</span><br><span class="line"><span class="number">1</span>) &quot;v4&quot;</span><br><span class="line"><span class="number">2</span>) &quot;v3&quot;</span><br><span class="line"><span class="number">3</span>) &quot;v2&quot;</span><br><span class="line"><span class="number">4</span>) &quot;v1&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; rpop list #从右边第一个开始移除</span><br><span class="line">&quot;v1&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lrange list <span class="number">0</span> -<span class="number">1</span> #查看全部数据</span><br><span class="line"><span class="number">1</span>) &quot;v4&quot;</span><br><span class="line"><span class="number">2</span>) &quot;v3&quot;</span><br><span class="line"><span class="number">3</span>) &quot;v2&quot;</span><br></pre></td></tr></table></figure><h3 id="lindex（查询指定下标元素）、llen（获取集合长度）-操作"><a href="#lindex（查询指定下标元素）、llen（获取集合长度）-操作" class="headerlink" title="lindex（查询指定下标元素）、llen（获取集合长度） 操作"></a>lindex（查询指定下标元素）、llen（获取集合长度） 操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lindex list <span class="number">1</span> #从左边开始查询下标为<span class="number">1</span>的数据</span><br><span class="line">&quot;v3&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; llen list #从左边开始计算集合的长度</span><br><span class="line">(integer) <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="lrem（根据value移除指定的值）"><a href="#lrem（根据value移除指定的值）" class="headerlink" title="lrem（根据value移除指定的值）"></a>lrem（根据value移除指定的值）</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lrange list <span class="number">0</span> -<span class="number">1</span> #查看集合所有数据</span><br><span class="line"><span class="number">1</span>) &quot;v4&quot;</span><br><span class="line"><span class="number">2</span>) &quot;v3&quot;</span><br><span class="line"><span class="number">3</span>) &quot;v2&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lrem list <span class="number">1</span> v3 #移除集合list里面值为v3的元素一个</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lrem list <span class="number">0</span> v2 #这里<span class="number">0</span>和<span class="number">1</span>的效果是一样的，移除list集合里面值为v2的元素一个</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt;lpush list  v3 v2 v2 v2 #这里再插入几个元素</span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lrem list <span class="number">3</span> v2 #这里移除三个v2的元素</span><br><span class="line">(integer) <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="ltrim（截取元素）、rpoplpush（移除指定集合中最后一个元素到一个新的集合中）操作"><a href="#ltrim（截取元素）、rpoplpush（移除指定集合中最后一个元素到一个新的集合中）操作" class="headerlink" title="ltrim（截取元素）、rpoplpush（移除指定集合中最后一个元素到一个新的集合中）操作"></a>ltrim（截取元素）、rpoplpush（移除指定集合中最后一个元素到一个新的集合中）操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lpush list1 k1 k2 k3 #新建两个集合</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lpush list2 v1 v2 v3</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ltrim list1 <span class="number">1</span> <span class="number">2</span> #截取了list1的值此时list1的值已经发生了改变</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lrange list1 <span class="number">0</span> -<span class="number">1</span>#查看list1集合的值</span><br><span class="line"><span class="number">1</span>) &quot;k2&quot;</span><br><span class="line"><span class="number">2</span>) &quot;k1&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; rpoplpush list1 list2 #移除list1集合中的最后一个元素到list2中</span><br><span class="line">&quot;k1&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lrange list2 <span class="number">0</span> -<span class="number">1</span> #查看list2</span><br><span class="line"><span class="number">1</span>) &quot;k1&quot;</span><br><span class="line"><span class="number">2</span>) &quot;v3&quot;</span><br><span class="line"><span class="number">3</span>) &quot;v2&quot;</span><br><span class="line"><span class="number">4</span>) &quot;v1&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lrange list1 <span class="number">0</span> -<span class="number">1</span> #查看list1集合</span><br><span class="line"><span class="number">1</span>) &quot;k2&quot;</span><br></pre></td></tr></table></figure><h3 id="lset（更新）、linsert操作"><a href="#lset（更新）、linsert操作" class="headerlink" title="lset（更新）、linsert操作"></a>lset（更新）、linsert操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lpush list k1 k2 k3 #新建一个集合</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lset list -<span class="number">1</span> v1 #更新list集合中最后一个元素是v1</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lrange list <span class="number">0</span> -<span class="number">1</span> #查看list集合</span><br><span class="line"><span class="number">1</span>) &quot;k3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;k2&quot;</span><br><span class="line"><span class="number">3</span>) &quot;v1&quot;</span><br><span class="line">##注意点：</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lset list1 <span class="number">0</span> vvvv  #如果指定的‘集合’不存在，报错</span><br><span class="line">(error) ERR no such key</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lset list <span class="number">8</span> vvv  #如果集合存在，但是指定的‘下标’不存在，报错</span><br><span class="line">(error) ERR index out of range</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; linsert list after v1 v2 #在集合list中插入v2到v1后面</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; linsert list before v1 v2 #在集合list中插入v2到v1前面</span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; lrange list <span class="number">0</span> -<span class="number">1</span> #查看list集合</span><br><span class="line"><span class="number">1</span>) &quot;k3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;k2&quot;</span><br><span class="line"><span class="number">3</span>) &quot;v2&quot;</span><br><span class="line"><span class="number">4</span>) &quot;v1&quot;</span><br><span class="line"><span class="number">5</span>) &quot;v2&quot;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>实际上是一个链表，before Node after ， left，right 都可以插入值</li><li>如果key 不存在，创建新的链表</li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在！</li><li>在两边插入或者改动值，效率最高！ 中间元素，相对来说效率会低一点~</li><li>消息排队！消息队列 （Lpush Rpop）， 栈（ Lpush Lpop）！</li></ul><h2 id="Set（集合）元素唯一不重复"><a href="#Set（集合）元素唯一不重复" class="headerlink" title="Set（集合）元素唯一不重复"></a>Set（集合）元素唯一不重复</h2><h3 id="sadd（添加）、smembers（查看所有元素）、sismember（判断是否存在）、scard（查看长度）、srem（移除指定元素）操作"><a href="#sadd（添加）、smembers（查看所有元素）、sismember（判断是否存在）、scard（查看长度）、srem（移除指定元素）操作" class="headerlink" title="sadd（添加）、smembers（查看所有元素）、sismember（判断是否存在）、scard（查看长度）、srem（移除指定元素）操作"></a>sadd（添加）、smembers（查看所有元素）、sismember（判断是否存在）、scard（查看长度）、srem（移除指定元素）操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; sadd <span class="built_in">set</span> hello world <span class="number">11</span> <span class="number">22</span> #添加<span class="built_in">set</span>集合（可批量可单个，写法一致，不再赘述）</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; smembers <span class="built_in">set</span> #查看<span class="built_in">set</span>中所有元素</span><br><span class="line"><span class="number">1</span>) &quot;world&quot;</span><br><span class="line"><span class="number">2</span>) &quot;hello&quot;</span><br><span class="line"><span class="number">3</span>) &quot;<span class="number">11</span>&quot;</span><br><span class="line"><span class="number">4</span>) &quot;<span class="number">22</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; sismember <span class="built_in">set</span> hello #判断某个值在不在<span class="built_in">set</span>中，在返回<span class="number">1</span>不存在返回<span class="number">0</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; scard <span class="built_in">set</span> #查看集合长度</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; srem <span class="built_in">set</span> <span class="number">22</span> #移除指定元素</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="srandmember（抽随机）操作"><a href="#srandmember（抽随机）操作" class="headerlink" title="srandmember（抽随机）操作"></a>srandmember（抽随机）操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; srandmember <span class="built_in">set</span> <span class="number">3</span>#随机查看三个值并且返回</span><br><span class="line"><span class="number">1</span>) &quot;<span class="number">5</span>&quot;</span><br><span class="line"><span class="number">2</span>) &quot;<span class="number">1</span>&quot;</span><br><span class="line"><span class="number">3</span>) &quot;<span class="number">7</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; srandmember <span class="built_in">set</span> <span class="number">5</span>#随机查看五个值并且返回</span><br><span class="line"><span class="number">1</span>) &quot;<span class="number">7</span>&quot;</span><br><span class="line"><span class="number">2</span>) &quot;<span class="number">4</span>&quot;</span><br><span class="line"><span class="number">3</span>) &quot;<span class="number">2</span>&quot;</span><br><span class="line"><span class="number">4</span>) &quot;<span class="number">3</span>&quot;</span><br><span class="line"><span class="number">5</span>) &quot;<span class="number">6</span>&quot;</span><br></pre></td></tr></table></figure><h3 id="spop（随机删除元素）、smove（移动指定元素到新的集合中）操作"><a href="#spop（随机删除元素）、smove（移动指定元素到新的集合中）操作" class="headerlink" title="spop（随机删除元素）、smove（移动指定元素到新的集合中）操作"></a>spop（随机删除元素）、smove（移动指定元素到新的集合中）操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; spop <span class="built_in">set</span> <span class="number">1</span> #随机删除一个</span><br><span class="line"><span class="number">1</span>) &quot;<span class="number">3</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; spop <span class="built_in">set</span> <span class="number">3</span> #随机删除三个</span><br><span class="line"><span class="number">1</span>) &quot;<span class="number">4</span>&quot;</span><br><span class="line"><span class="number">2</span>) &quot;<span class="number">5</span>&quot;</span><br><span class="line"><span class="number">3</span>) &quot;<span class="number">7</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; smembers <span class="built_in">set</span></span><br><span class="line"><span class="number">1</span>) &quot;<span class="number">1</span>&quot;</span><br><span class="line"><span class="number">2</span>) &quot;<span class="number">2</span>&quot;</span><br><span class="line"><span class="number">3</span>) &quot;<span class="number">6</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; smove <span class="built_in">set</span> myset <span class="number">2</span>  #移动指定<span class="built_in">set</span>中的元素到新的<span class="built_in">set</span>集合中，如果没有则会新建一个</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="sdiff（差集）、sinter（交集）、sunion（并集）操作"><a href="#sdiff（差集）、sinter（交集）、sunion（并集）操作" class="headerlink" title="sdiff（差集）、sinter（交集）、sunion（并集）操作"></a>sdiff（差集）、sinter（交集）、sunion（并集）操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; sadd myset1 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; sadd myset2 <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; SMEMBERS myset1</span><br><span class="line"><span class="number">1</span>) &quot;<span class="number">1</span>&quot;</span><br><span class="line"><span class="number">2</span>) &quot;<span class="number">2</span>&quot;</span><br><span class="line"><span class="number">3</span>) &quot;<span class="number">3</span>&quot;</span><br><span class="line"><span class="number">4</span>) &quot;<span class="number">4</span>&quot;</span><br><span class="line"><span class="number">5</span>) &quot;<span class="number">5</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; SMEMBERS myset2</span><br><span class="line"><span class="number">1</span>) &quot;<span class="number">3</span>&quot;</span><br><span class="line"><span class="number">2</span>) &quot;<span class="number">4</span>&quot;</span><br><span class="line"><span class="number">3</span>) &quot;<span class="number">5</span>&quot;</span><br><span class="line"><span class="number">4</span>) &quot;<span class="number">6</span>&quot;</span><br><span class="line"><span class="number">5</span>) &quot;<span class="number">7</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; SDIFF myset1 myset2  #查询指定的<span class="built_in">set</span>之间的差集，可以是多个<span class="built_in">set</span></span><br><span class="line"><span class="number">1</span>) &quot;<span class="number">1</span>&quot;</span><br><span class="line"><span class="number">2</span>) &quot;<span class="number">2</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; SINTER myset1 myset2  #查询指定的<span class="built_in">set</span>之间的交集，可以是多个<span class="built_in">set</span></span><br><span class="line"><span class="number">1</span>) &quot;<span class="number">3</span>&quot;</span><br><span class="line"><span class="number">2</span>) &quot;<span class="number">4</span>&quot;</span><br><span class="line"><span class="number">3</span>) &quot;<span class="number">5</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; sunion myset1 myset2  #查询指定的<span class="built_in">set</span>之间的并集，可以是多个<span class="built_in">set</span></span><br><span class="line"><span class="number">1</span>) &quot;<span class="number">1</span>&quot;</span><br><span class="line"><span class="number">2</span>) &quot;<span class="number">2</span>&quot;</span><br><span class="line"><span class="number">3</span>) &quot;<span class="number">3</span>&quot;</span><br><span class="line"><span class="number">4</span>) &quot;<span class="number">4</span>&quot;</span><br><span class="line"><span class="number">5</span>) &quot;<span class="number">5</span>&quot;</span><br><span class="line"><span class="number">6</span>) &quot;<span class="number">6</span>&quot;</span><br><span class="line"><span class="number">7</span>) &quot;<span class="number">7</span>&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结：可实现共同好友、共同关注等需求。"><a href="#总结：可实现共同好友、共同关注等需求。" class="headerlink" title="总结：可实现共同好友、共同关注等需求。"></a>总结：可实现共同好友、共同关注等需求。</h3><h2 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h2><h3 id="hset（添加hash）、hget（查询）、hgetall（查询所有）、hdel（删除hash中指定的值）、hlen（获取hash的长度）、hexists（判断key是否存在）操作"><a href="#hset（添加hash）、hget（查询）、hgetall（查询所有）、hdel（删除hash中指定的值）、hlen（获取hash的长度）、hexists（判断key是否存在）操作" class="headerlink" title="hset（添加hash）、hget（查询）、hgetall（查询所有）、hdel（删除hash中指定的值）、hlen（获取hash的长度）、hexists（判断key是否存在）操作"></a>hset（添加hash）、hget（查询）、hgetall（查询所有）、hdel（删除hash中指定的值）、hlen（获取hash的长度）、hexists（判断key是否存在）操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hset myhash name liaosc age <span class="number">18</span> #添加hash，可多个</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hget myhash name #获取hash中key是name的值</span><br><span class="line">&quot;liaosc&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hget myhash age #获取hash中key是age的值</span><br><span class="line">&quot;<span class="number">18</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hgetall myhash #获取hash中所有的值，包含key</span><br><span class="line"><span class="number">1</span>) &quot;name&quot;</span><br><span class="line"><span class="number">2</span>) &quot;liaosc&quot;</span><br><span class="line"><span class="number">3</span>) &quot;age&quot;</span><br><span class="line"><span class="number">4</span>) &quot;<span class="number">18</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hdel myhash name age #删除指定hash中的key（可多个），key删除后对应的value也会被删除</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hlen myhash #获取指定hash的长度，相当于length、size</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hexists myhash name #判断key是否存在于指定的hash，存在返回<span class="number">1</span> 不存在返回<span class="number">0</span></span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="hkeys（获取所有key）、hvals（获取所有value）、hincrby（给值加增量）、hsetnx（存在不添加）操作"><a href="#hkeys（获取所有key）、hvals（获取所有value）、hincrby（给值加增量）、hsetnx（存在不添加）操作" class="headerlink" title="hkeys（获取所有key）、hvals（获取所有value）、hincrby（给值加增量）、hsetnx（存在不添加）操作"></a>hkeys（获取所有key）、hvals（获取所有value）、hincrby（给值加增量）、hsetnx（存在不添加）操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hkeys myhash #获取所有的key</span><br><span class="line"><span class="number">1</span>) &quot;name&quot;</span><br><span class="line"><span class="number">2</span>) &quot;age&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hvals myhash #获取所有的value</span><br><span class="line"><span class="number">1</span>) &quot;liaosc&quot;</span><br><span class="line"><span class="number">2</span>) &quot;<span class="number">18</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hincrby myhash age <span class="number">2</span> #让hash中age的value指定+<span class="number">2</span>(自增)</span><br><span class="line">(integer) <span class="number">20</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hincrby myhash age -<span class="number">1</span> #让hash中age的value指定-<span class="number">1</span>(自减)</span><br><span class="line">(integer) <span class="number">19</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hsetnx myhash nokey novalue  #添加不存在就新增返回新增成功的数量（只能单个增加哦）</span><br><span class="line">(integer) <span class="number">1</span> </span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hsetnx myhash name miaotiao  #添加存在则失败返回<span class="number">0</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hgetall myhash #获取所有值</span><br><span class="line"><span class="number">1</span>) &quot;name&quot;</span><br><span class="line"><span class="number">2</span>) &quot;liaosc&quot;</span><br><span class="line"><span class="number">3</span>) &quot;age&quot;</span><br><span class="line"><span class="number">4</span>) &quot;<span class="number">19</span>&quot;</span><br><span class="line"><span class="number">5</span>) &quot;nokey&quot;</span><br><span class="line"><span class="number">6</span>) &quot;novalue&quot;</span><br></pre></td></tr></table></figure><p>总结：比String更加适合存对象~</p><h2 id="zSet（有序集合）"><a href="#zSet（有序集合）" class="headerlink" title="zSet（有序集合）"></a><strong>zSet</strong>（有序集合）</h2><h3 id="zadd（添加）、zrange（查询）、zrangebyscore（排序小-大）、zrevrange（排序大-小）、zrangebyscore-withscores（查询所有值包含key）操作"><a href="#zadd（添加）、zrange（查询）、zrangebyscore（排序小-大）、zrevrange（排序大-小）、zrangebyscore-withscores（查询所有值包含key）操作" class="headerlink" title="zadd（添加）、zrange（查询）、zrangebyscore（排序小-大）、zrevrange（排序大-小）、zrangebyscore withscores（查询所有值包含key）操作"></a>zadd（添加）、zrange（查询）、zrangebyscore（排序小-大）、zrevrange（排序大-小）、zrangebyscore withscores（查询所有值包含key）操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; zadd myzset <span class="number">1</span> one <span class="number">2</span> two <span class="number">3</span> three  #添加zset值，可多个</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZRANGE myzset <span class="number">0</span> -<span class="number">1</span>  #查询所有的值</span><br><span class="line"><span class="number">1</span>) &quot;one&quot;</span><br><span class="line"><span class="number">2</span>) &quot;two&quot;</span><br><span class="line"><span class="number">3</span>) &quot;three&quot;</span><br><span class="line">#-inf 负无穷  +inf 正无穷</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZRANGEBYSCORE myzset -inf +inf  #将zset的值根据key来从小到大排序并输出</span><br><span class="line"><span class="number">1</span>) &quot;one&quot;</span><br><span class="line"><span class="number">2</span>) &quot;two&quot;</span><br><span class="line"><span class="number">3</span>) &quot;three&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZRANGEBYSCORE myzset <span class="number">0</span> <span class="number">1</span>  #只查询key&lt;=<span class="number">1</span>的值并且排序从小到大</span><br><span class="line"><span class="number">1</span>) &quot;one&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZREVRANGE myzset <span class="number">1</span> -<span class="number">1</span>  #从大到小排序输出</span><br><span class="line"><span class="number">1</span>) &quot;two&quot;</span><br><span class="line"><span class="number">2</span>) &quot;one&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZRANGEBYSCORE myzset -inf +inf withscores  #查询指定zset的所有值，包含序号的值</span><br><span class="line"><span class="number">1</span>) &quot;one&quot;</span><br><span class="line"><span class="number">2</span>) &quot;<span class="number">1</span>&quot;</span><br><span class="line"><span class="number">3</span>) &quot;two&quot;</span><br><span class="line"><span class="number">4</span>) &quot;<span class="number">2</span>&quot;</span><br><span class="line"><span class="number">5</span>) &quot;three&quot;</span><br><span class="line"><span class="number">6</span>) &quot;<span class="number">3</span>&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="zrem（移除元素）、zcard（查看元素个数）、zcount（查询指定区间内的元素个数）操作"><a href="#zrem（移除元素）、zcard（查看元素个数）、zcount（查询指定区间内的元素个数）操作" class="headerlink" title="zrem（移除元素）、zcard（查看元素个数）、zcount（查询指定区间内的元素个数）操作"></a>zrem（移除元素）、zcard（查看元素个数）、zcount（查询指定区间内的元素个数）操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; zadd myset <span class="number">1</span> v1 <span class="number">2</span> v2 <span class="number">3</span> v3 <span class="number">4</span> v4</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZRANGE myset <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) &quot;v1&quot;</span><br><span class="line"><span class="number">2</span>) &quot;v2&quot;</span><br><span class="line"><span class="number">3</span>) &quot;v3&quot;</span><br><span class="line"><span class="number">4</span>) &quot;v4&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; zrem myset v3  #移除指定的元素，可多个</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZRANGE myset <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) &quot;v1&quot;</span><br><span class="line"><span class="number">2</span>) &quot;v2&quot;</span><br><span class="line"><span class="number">3</span>) &quot;v4&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; zcard myset  #查看zset的元素个数，相当于长度，size。</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; zcount myset <span class="number">0</span> <span class="number">100</span>  #查询指定区间内的元素个数</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; zcount myset <span class="number">0</span> <span class="number">2</span>  #查询指定区间内的元素个数</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：成绩表排序，工资表排序，年龄排序等需求可以用zset来实现！</p><h1 id="Redis三种特殊类型"><a href="#Redis三种特殊类型" class="headerlink" title="Redis三种特殊类型"></a>Redis三种特殊类型</h1><h2 id="Geospatial：-地理位置"><a href="#Geospatial：-地理位置" class="headerlink" title="Geospatial： 地理位置"></a>Geospatial： 地理位置</h2><p><strong>城市经纬度查询：</strong> <a href="https://jingweidu.bmcx.com/">经纬度查询</a><br>注意点1：两极无法直接添加，我们一般会下载城市数据，直接通过java程序一次性导入！<br>注意点2：有效的经度从-180度到180度。<br>注意点3：有效的纬度从-85.05112878度到85.05112878度。<br>注意点4：m 为米。km 为千米。mi 为英里。ft 为英尺。<br>①geoadd（添加）、geopos（查看）、geodist（计算距离）操作</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; geoadd city <span class="number">118</span>.<span class="number">8921</span> <span class="number">31</span>.<span class="number">32751</span> nanjing <span class="number">197</span>.<span class="number">30794</span> <span class="number">31</span>.<span class="number">79322</span>  </span><br><span class="line">#当经纬度其中一个或者两个超过界限值，报错，信息如下：</span><br><span class="line">(error) ERR syntax error. Try GEOADD key [x1] [y1] [name1] [x2] [y2] [name2] ...</span><br><span class="line">#添加城市经纬度 语法格式： geoadd key 经度 纬度 name +++可多个添加</span><br><span class="line">#添加成功后返回添加成功的数量值</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; geoadd city <span class="number">118</span>.<span class="number">8921</span> <span class="number">31</span>.<span class="number">32751</span> nanjing <span class="number">117</span>.<span class="number">30794</span> <span class="number">31</span>.<span class="number">79322</span> hefei <span class="number">102</span>.<span class="number">82147</span> <span class="number">24</span>.<span class="number">88554</span> kunming <span class="number">91</span>.<span class="number">13775</span> <span class="number">29</span>.<span class="number">65262</span> lasa <span class="number">116</span>.<span class="number">23128</span> <span class="number">40</span>.<span class="number">22077</span> beijing <span class="number">106</span>.<span class="number">54041</span> <span class="number">29</span>.<span class="number">40268</span> chongqing  </span><br><span class="line">(integer) <span class="number">6</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZRANGE city <span class="number">0</span> -<span class="number">1</span>  #注意：geo的查看方式和zset的命令是一致的，</span><br><span class="line">#由此可知，geo本质上还是个集合，不过Redis官方对其进行了二次封装</span><br><span class="line"><span class="number">1</span>) &quot;lasa&quot;</span><br><span class="line"><span class="number">2</span>) &quot;kunming&quot;</span><br><span class="line"><span class="number">3</span>) &quot;chongqing&quot;</span><br><span class="line"><span class="number">4</span>) &quot;hefei&quot;</span><br><span class="line"><span class="number">5</span>) &quot;nanjing&quot;</span><br><span class="line"><span class="number">6</span>) &quot;beijing&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; geopos city nanjing  #查看看指定城市的经纬度信息</span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) &quot;<span class="number">118</span>.<span class="number">89209836721420288</span>&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;<span class="number">31</span>.<span class="number">32750976275760735</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; geopos city nanjing beijing  #查看看多个城市的经纬度信息</span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) &quot;<span class="number">118</span>.<span class="number">89209836721420288</span>&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;<span class="number">31</span>.<span class="number">32750976275760735</span>&quot;</span><br><span class="line"><span class="number">2</span>) <span class="number">1</span>) &quot;<span class="number">116</span>.<span class="number">23128265142440796</span>&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;<span class="number">40</span>.<span class="number">22076905438526495</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; geodist city nanjing beijing   #计算南京到北京之间的距离，默认返回单位是m</span><br><span class="line">&quot;<span class="number">1017743</span>.<span class="number">1413</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; geodist city nanjing beijing km  #km  千米</span><br><span class="line">&quot;<span class="number">1017</span>.<span class="number">7431</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; geodist city nanjing beijing mi  #mi  英里</span><br><span class="line">&quot;<span class="number">632</span>.<span class="number">3978</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; geodist city nanjing beijing ft  #ft  英尺</span><br><span class="line">&quot;<span class="number">3339052</span>.<span class="number">3010</span>&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="georadius（查询附近位置）操作"><a href="#georadius（查询附近位置）操作" class="headerlink" title="georadius（查询附近位置）操作"></a>georadius（查询附近位置）操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZRANGE city <span class="number">0</span> -<span class="number">1</span>  #查看城市</span><br><span class="line"><span class="number">1</span>) &quot;lasa&quot;</span><br><span class="line"><span class="number">2</span>) &quot;kunming&quot;</span><br><span class="line"><span class="number">3</span>) &quot;chongqing&quot;</span><br><span class="line"><span class="number">4</span>) &quot;hefei&quot;</span><br><span class="line"><span class="number">5</span>) &quot;nanjing&quot;</span><br><span class="line"><span class="number">6</span>) &quot;beijing&quot;</span><br><span class="line">#查看指定位置的<span class="number">1000</span>公里范围内有哪些城市</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; georadius city <span class="number">120</span> <span class="number">38</span> <span class="number">1000</span> km  </span><br><span class="line"><span class="number">1</span>) &quot;beijing&quot;</span><br><span class="line"><span class="number">2</span>) &quot;hefei&quot;</span><br><span class="line"><span class="number">3</span>) &quot;nanjing&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; georadius city <span class="number">120</span> <span class="number">38</span> <span class="number">400</span> km  #查看指定位置的<span class="number">400</span>公里范围内有哪些城市</span><br><span class="line">(empty array)</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; georadius city <span class="number">120</span> <span class="number">38</span> <span class="number">550</span> km  #查看指定位置的<span class="number">550</span>公里范围内有哪些城市</span><br><span class="line"><span class="number">1</span>) &quot;beijing&quot;</span><br><span class="line">#查看指定位置的<span class="number">550</span>公里范围内有哪些城市,withcoord指定返回城市的name</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; georadius city <span class="number">120</span> <span class="number">38</span> <span class="number">1000</span> km withcoord</span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) &quot;beijing&quot;</span><br><span class="line">   <span class="number">2</span>) <span class="number">1</span>) &quot;<span class="number">116</span>.<span class="number">23128265142440796</span>&quot;</span><br><span class="line">      <span class="number">2</span>) &quot;<span class="number">40</span>.<span class="number">22076905438526495</span>&quot;</span><br><span class="line"><span class="number">2</span>) <span class="number">1</span>) &quot;hefei&quot;</span><br><span class="line">   <span class="number">2</span>) <span class="number">1</span>) &quot;<span class="number">117</span>.<span class="number">30793744325637817</span>&quot;</span><br><span class="line">      <span class="number">2</span>) &quot;<span class="number">31</span>.<span class="number">79321915080526395</span>&quot;</span><br><span class="line"><span class="number">3</span>) <span class="number">1</span>) &quot;nanjing&quot;</span><br><span class="line">   <span class="number">2</span>) <span class="number">1</span>) &quot;<span class="number">118</span>.<span class="number">89209836721420288</span>&quot;</span><br><span class="line">      <span class="number">2</span>) &quot;<span class="number">31</span>.<span class="number">32750976275760735</span>&quot;</span><br><span class="line">#查看指定位置的<span class="number">550</span>公里范围内有哪些城市,withdist指定返回城市的’经纬度‘值</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; georadius city <span class="number">120</span> <span class="number">38</span> <span class="number">1000</span> km withcoord withdist</span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) &quot;beijing&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;<span class="number">408</span>.<span class="number">3496</span>&quot;</span><br><span class="line">   <span class="number">3</span>) <span class="number">1</span>) &quot;<span class="number">116</span>.<span class="number">23128265142440796</span>&quot;</span><br><span class="line">      <span class="number">2</span>) &quot;<span class="number">40</span>.<span class="number">22076905438526495</span>&quot;</span><br><span class="line"><span class="number">2</span>) <span class="number">1</span>) &quot;hefei&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;<span class="number">732</span>.<span class="number">6371</span>&quot;</span><br><span class="line">   <span class="number">3</span>) <span class="number">1</span>) &quot;<span class="number">117</span>.<span class="number">30793744325637817</span>&quot;</span><br><span class="line">      <span class="number">2</span>) &quot;<span class="number">31</span>.<span class="number">79321915080526395</span>&quot;</span><br><span class="line"><span class="number">3</span>) <span class="number">1</span>) &quot;nanjing&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;<span class="number">749</span>.<span class="number">0265</span>&quot;</span><br><span class="line">   <span class="number">3</span>) <span class="number">1</span>) &quot;<span class="number">118</span>.<span class="number">89209836721420288</span>&quot;</span><br><span class="line">      <span class="number">2</span>) &quot;<span class="number">31</span>.<span class="number">32750976275760735</span>&quot;</span><br><span class="line">#查看指定位置的<span class="number">550</span>公里范围内有哪些城市,withhash指定返回城市的’经纬度‘的hash值</span><br><span class="line">#如果两个城市的hash值越’像‘，证明城市距离越近！</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; georadius city <span class="number">120</span> <span class="number">38</span> <span class="number">1000</span> km withcoord withdist withhash</span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) &quot;beijing&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;<span class="number">408</span>.<span class="number">3496</span>&quot;</span><br><span class="line">   <span class="number">3</span>) (integer) <span class="number">4069896088584598</span></span><br><span class="line">   <span class="number">4</span>) <span class="number">1</span>) &quot;<span class="number">116</span>.<span class="number">23128265142440796</span>&quot;</span><br><span class="line">      <span class="number">2</span>) &quot;<span class="number">40</span>.<span class="number">22076905438526495</span>&quot;</span><br><span class="line"><span class="number">2</span>) <span class="number">1</span>) &quot;hefei&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;<span class="number">732</span>.<span class="number">6371</span>&quot;</span><br><span class="line">   <span class="number">3</span>) (integer) <span class="number">4052763834193093</span></span><br><span class="line">   <span class="number">4</span>) <span class="number">1</span>) &quot;<span class="number">117</span>.<span class="number">30793744325637817</span>&quot;</span><br><span class="line">      <span class="number">2</span>) &quot;<span class="number">31</span>.<span class="number">79321915080526395</span>&quot;</span><br><span class="line"><span class="number">3</span>) <span class="number">1</span>) &quot;nanjing&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;<span class="number">749</span>.<span class="number">0265</span>&quot;</span><br><span class="line">   <span class="number">3</span>) (integer) <span class="number">4054278565840695</span></span><br><span class="line">   <span class="number">4</span>) <span class="number">1</span>) &quot;<span class="number">118</span>.<span class="number">89209836721420288</span>&quot;</span><br><span class="line">      <span class="number">2</span>) &quot;<span class="number">31</span>.<span class="number">32750976275760735</span>&quot;</span><br><span class="line">#查看指定位置的<span class="number">550</span>公里范围内有哪些城市,count num 指定返回’num‘个城市数据量</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; georadius city <span class="number">120</span> <span class="number">38</span> <span class="number">1000</span> km withcoord withdist withhash count <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) &quot;beijing&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;<span class="number">408</span>.<span class="number">3496</span>&quot;</span><br><span class="line">   <span class="number">3</span>) (integer) <span class="number">4069896088584598</span></span><br><span class="line">   <span class="number">4</span>) <span class="number">1</span>) &quot;<span class="number">116</span>.<span class="number">23128265142440796</span>&quot;</span><br><span class="line">      <span class="number">2</span>) &quot;<span class="number">40</span>.<span class="number">22076905438526495</span>&quot;</span><br><span class="line"><span class="number">2</span>) <span class="number">1</span>) &quot;hefei&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;<span class="number">732</span>.<span class="number">6371</span>&quot;</span><br><span class="line">   <span class="number">3</span>) (integer) <span class="number">4052763834193093</span></span><br><span class="line">   <span class="number">4</span>) <span class="number">1</span>) &quot;<span class="number">117</span>.<span class="number">30793744325637817</span>&quot;</span><br><span class="line">      <span class="number">2</span>) &quot;<span class="number">31</span>.<span class="number">79321915080526395</span>&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="georadiusbymember-（查找指定元素指定范围内的元素）、geohash-（返回经纬度的hash值）、zrange、zrem（使用zset命令操作geo）"><a href="#georadiusbymember-（查找指定元素指定范围内的元素）、geohash-（返回经纬度的hash值）、zrange、zrem（使用zset命令操作geo）" class="headerlink" title="georadiusbymember （查找指定元素指定范围内的元素）、geohash （返回经纬度的hash值）、zrange、zrem（使用zset命令操作geo）"></a>georadiusbymember （查找指定元素指定范围内的元素）、geohash （返回经纬度的hash值）、zrange、zrem（使用zset命令操作geo）</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#查询南京 <span class="number">500</span>公里范围有哪些城市</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; georadiusbymember city nanjing <span class="number">500</span> km</span><br><span class="line"><span class="number">1</span>) &quot;hefei&quot;</span><br><span class="line"><span class="number">2</span>) &quot;nanjing&quot;</span><br><span class="line">#查询重庆 <span class="number">1500</span>公里范围有哪些城市</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; georadiusbymember city chongqing <span class="number">1500</span> km</span><br><span class="line"><span class="number">1</span>) &quot;lasa&quot;</span><br><span class="line"><span class="number">2</span>) &quot;kunming&quot;</span><br><span class="line"><span class="number">3</span>) &quot;chongqing&quot;</span><br><span class="line"><span class="number">4</span>) &quot;hefei&quot;</span><br><span class="line"><span class="number">5</span>) &quot;nanjing&quot;</span><br><span class="line"><span class="number">6</span>) &quot;beijing&quot;</span><br><span class="line">#返回北京和南京的经纬度的 hash值</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; geohash city beijing nanjing</span><br><span class="line"><span class="number">1</span>) &quot;wx4sucvncn0&quot;</span><br><span class="line"><span class="number">2</span>) &quot;wtsd1qyxfx0&quot;</span><br><span class="line">#查看所有城市name</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZRANGE city <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) &quot;lasa&quot;</span><br><span class="line"><span class="number">2</span>) &quot;kunming&quot;</span><br><span class="line"><span class="number">3</span>) &quot;chongqing&quot;</span><br><span class="line"><span class="number">4</span>) &quot;hefei&quot;</span><br><span class="line"><span class="number">5</span>) &quot;nanjing&quot;</span><br><span class="line"><span class="number">6</span>) &quot;beijing&quot;</span><br><span class="line">#根据geo中的name删除g元素</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZREM city lasa</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">#删除成功</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZRANGE city <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) &quot;kunming&quot;</span><br><span class="line"><span class="number">2</span>) &quot;chongqing&quot;</span><br><span class="line"><span class="number">3</span>) &quot;hefei&quot;</span><br><span class="line"><span class="number">4</span>) &quot;nanjing&quot;</span><br><span class="line"><span class="number">5</span>) &quot;beijing&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：实际需求中，我们可以用来查询附近的人、计算两人之间的距离等。当然，那些所需的经纬度我们肯定要结合java代码来一次导入，手动查询和录入太过于浪费时间！</p><h2 id="Hyperloglog：-基数"><a href="#Hyperloglog：-基数" class="headerlink" title="Hyperloglog： 基数"></a>Hyperloglog： 基数</h2><p>首先得明白什么是基数？<br>再数学层面上可以说是：两个数据集中不重复的元素~<br>但是再Redis中，可能会有一定的误差性。 官方给出的误差率是0.81%。<br>Hyperloglog的优点： 占用的内存是固定的，2^64个元素，相当于只需要12kb的内存即可。效率极高！<br>pfadd（添加数据集）、pfcount（统计数据集）、pfmegre（合并数据集-自动去重）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; pfadd dataList <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>  #添加数据集</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; pfcount dataList  #统计数据集中的元素</span><br><span class="line">(integer) <span class="number">7</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; pfadd dataList1 <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span>  #添加数据集</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; pfcount dataList1  #统计数据集中的元素</span><br><span class="line">(integer) <span class="number">7</span></span><br><span class="line">#将dataList 和dataList1  两个数据集合并成一个新的 newdata数据集，并且自动去重</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; pfmerge newdata dataList dataList1  </span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; pfcount newdata</span><br><span class="line">(integer) <span class="number">10</span></span><br></pre></td></tr></table></figure><p>总结：如果在实际业务中，允许一定的误差值，我们可以使用基数统计来计算~效率非常高！比如：网站的访问量，就可以利用<strong>Hyperloglog</strong>来进行计算统计！</p><h2 id="Bitmap：-位存储"><a href="#Bitmap：-位存储" class="headerlink" title="Bitmap： 位存储"></a>Bitmap： 位存储</h2><p>Bitmap 位图，数据结构！ 都是操作二进制位来进行记录，就只有0 和 1 两个状态！<br>setbit（添加）、getset（获取）、bitcount（统计）操作</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; setbit login <span class="number">1</span> <span class="number">1</span>   #添加周一已登陆 为<span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; setbit login <span class="number">2</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; setbit login <span class="number">3</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; setbit login <span class="number">4</span> <span class="number">0</span>  #添加周四已登陆 为<span class="number">0</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; setbit login <span class="number">5</span> <span class="number">0</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; setbit login <span class="number">6</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; setbit login <span class="number">7</span> <span class="number">0</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; getbit login <span class="number">1</span>  #获取周一是否登录</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; getbit login <span class="number">4</span>  #获取周四是否登陆</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; bitcount login  #统计这周登陆的天数</span><br><span class="line">(integer) <span class="number">4</span></span><br></pre></td></tr></table></figure><p>总结：实际需求中，可能需要我们统计用户的登陆信息，员工的打卡信息等等。只要是事务的只有<strong>两个状态</strong>的，我们都可以用Bitmap来进行操作！！！</p><h1 id="Redis中的事务和乐观锁如何实现"><a href="#Redis中的事务和乐观锁如何实现" class="headerlink" title="Redis中的事务和乐观锁如何实现"></a>Redis中的事务和乐观锁如何实现</h1><p><strong>事务</strong><br>①原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的操作要么都做，要么都不做。<br>②一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。<br>③隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。<br>④持久性（durability）。持久性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。<br>在Redis事务没有没有隔离级别的概念！<br>在Redis单条命令式保证原子性的，但是事务不保证原子性！</p><p><strong>乐观锁</strong><br>①当程序中可能出现并发的情况时，就需要保证在并发情况下数据的准确性，以此确保当前用户和其他用户一起操作时，所得到的结果和他单独操作时的结果是一样的。<br>②没有做好并发控制，就可能导致脏读、幻读和不可重复读等问题。<br>在Redis是可以实现乐观锁的！</p><h2 id="Redis如何实现事务？"><a href="#Redis如何实现事务？" class="headerlink" title="Redis如何实现事务？"></a>Redis如何实现事务？</h2><h3 id="正常执行事务"><a href="#正常执行事务" class="headerlink" title="正常执行事务"></a>正常执行事务</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; multi  #开启事务</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name dingyongjun  #添加数据</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> age <span class="number">26</span>  #添加数据</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> high <span class="number">172</span>  #添加数据</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; exec  #执行事务</span><br><span class="line"><span class="number">1</span>) OK</span><br><span class="line"><span class="number">2</span>) OK</span><br><span class="line"><span class="number">3</span>) OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get name  #获取数据成功，证明事务执行成功</span><br><span class="line">&quot;dingyongjun&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get age</span><br><span class="line">&quot;<span class="number">26</span>&quot;</span><br></pre></td></tr></table></figure><h3 id="放弃事务"><a href="#放弃事务" class="headerlink" title="放弃事务"></a>放弃事务</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; multi  #开启事务</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name dingyongjun  #添加数据</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> age <span class="number">26</span>  #添加数据</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; discard  #放弃事务</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get name  #不会执行事务里面的添加操作</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h3 id="编译时异常，代码有问题，或者命令有问题，所有的命令都不会被执行"><a href="#编译时异常，代码有问题，或者命令有问题，所有的命令都不会被执行" class="headerlink" title="编译时异常，代码有问题，或者命令有问题，所有的命令都不会被执行"></a>编译时异常，代码有问题，或者命令有问题，所有的命令都不会被执行</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; multi  #开启事务</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name dingyongjun  #添加数据</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> age <span class="number">23</span>  #添加数据</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; getset name  #输入一个错误的命令，这时候已经报错了，但是这个还是进入了事务的队列当中</span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> &#x27;getset&#x27; command</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> high <span class="number">173</span>  #添加数据</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; exec  #执行事务，报错，并且所有的命令都不会执行</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get name  #获取数据为空，证明没有执行</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h3 id="运行时异常，除了语法错误不会被执行且抛出异常后，其他的正确命令可以正常执行"><a href="#运行时异常，除了语法错误不会被执行且抛出异常后，其他的正确命令可以正常执行" class="headerlink" title="运行时异常，除了语法错误不会被执行且抛出异常后，其他的正确命令可以正常执行"></a>运行时异常，除了语法错误不会被执行且抛出异常后，其他的正确命令可以正常执行</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; multi  #开启事务</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name dingyongjun  #添加字符串数据</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; incr name  #对字符串数据进行自增操作</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> age <span class="number">23</span>  #添加数据</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get age  #获取数据</span><br><span class="line">QUEUED </span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; exec  #执行事务。虽然对字符串数据进行自增操作报错了，但是其他的命令还是可以正常执行的</span><br><span class="line"><span class="number">1</span>) OK</span><br><span class="line"><span class="number">2</span>) (error) ERR value is <span class="keyword">not</span> an integer or out of range</span><br><span class="line"><span class="number">3</span>) OK</span><br><span class="line"><span class="number">4</span>) &quot;<span class="number">23</span>&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get age  #获取数据成功</span><br><span class="line">&quot;<span class="number">23</span>&quot;</span><br></pre></td></tr></table></figure><p>总结：由以上可以得出结论，Redis是支持单条命令事务的，但是事务并不能保证原子性！</p><h2 id="Redis如何实现乐观锁？"><a href="#Redis如何实现乐观锁？" class="headerlink" title="Redis如何实现乐观锁？"></a>Redis如何实现乐观锁？</h2><h3 id="watch（监视）"><a href="#watch（监视）" class="headerlink" title="watch（监视）"></a>watch（监视）</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> money <span class="number">100</span>  #添加金钱<span class="number">100</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> cost <span class="number">0</span>  #添加花费<span class="number">0</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; watch money  #监控金钱</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; multi  #开启事务</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; DECRBY money <span class="number">30</span>  #金钱-<span class="number">30</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; incrby cost <span class="number">30</span>  #花费+<span class="number">30</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; exec  #执行事务，成功！这时候数据没有发生变动才可以成功</span><br><span class="line"><span class="number">1</span>) (integer) <span class="number">70</span></span><br><span class="line"><span class="number">2</span>) (integer) <span class="number">30</span></span><br></pre></td></tr></table></figure><h3 id="多线程测试watch"><a href="#多线程测试watch" class="headerlink" title="多线程测试watch"></a>多线程测试watch</h3><p>#线程1</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#线程<span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> money <span class="number">100</span>  #添加金钱<span class="number">100</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> cost <span class="number">0</span>  #添加花费<span class="number">0</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; watch money  #开启监视（乐观锁）</span><br><span class="line">OK </span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; multi  #开启事务</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; DECRBY money <span class="number">20</span>  #金钱-<span class="number">20</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; INCRBY cost <span class="number">20</span>   #花费+<span class="number">20</span></span><br><span class="line">QUEUED</span><br><span class="line">#这里先不要执行，先执行线程<span class="number">2</span>来修改被监视的值</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; exec  #执行报错，因为我们监视了money这个值，如果事务要对这个值进行操作前</span><br><span class="line">#监视器会判断这个值是否正常，如果发生改变，事务执行失败！</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>#线程2</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#线程<span class="number">2</span>，这个在事务执行前操作执行</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; INCRBY money <span class="number">20</span>  #金钱+<span class="number">20</span></span><br><span class="line">(integer) <span class="number">120</span></span><br></pre></td></tr></table></figure><p>总结：乐观锁和悲观锁的区别。<br><strong>悲观锁：</strong> 什么时候都会出问题，所以一直监视着，没有执行当前步骤完成前，不让任何线程执行，十分浪费性能！一般不使用！<br><strong>乐观锁：</strong> 只有更新数据的时候去判断一下，在此期间是否有人修改过被监视的这个数据，没有的话正常执行事务，反之执行失败！</p><h1 id="SpringBoot如何整合Redis"><a href="#SpringBoot如何整合Redis" class="headerlink" title="SpringBoot如何整合Redis"></a>SpringBoot如何整合Redis</h1><p>SpringBoot应该不用过多介绍了吧！是Spring当前最火的一个框架，既然学习了Redis，我们肯定是要在实际项目中使用，那么肯定首选整合SpringBoot啦！</p><p>简单介绍下SpringBoot对Jedis的支持吧，在1.×版本的时候，SpringBoot的底层还是使用Jedis来连接Redis的，但是在2.×版本后，就换成了Lettuce。两者的区别如下：<br><strong>Jedis:</strong> 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接池！ 更像 BIO 模式！<br><strong>Lettuce:</strong> 采用netty，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据了，更像 NIO 模式！</p><h2 id="添加POM依赖："><a href="#添加POM依赖：" class="headerlink" title="添加POM依赖："></a>添加POM依赖：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--集成redis--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--序列化--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.54<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--lombok,自动生成set、get等方法--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置连接的application-yml文件："><a href="#配置连接的application-yml文件：" class="headerlink" title="配置连接的application.yml文件："></a>配置连接的application.yml文件：</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testRedis</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;dadadingdada!&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">其他方法如下</span></span><br><span class="line"><span class="comment">// redisTemplate  #操作不同的数据类型，api和我们的指令是一样的 </span></span><br><span class="line"><span class="comment">// opsForValue  #操作字符串 类似String </span></span><br><span class="line"><span class="comment">// opsForList  #操作List 类似List </span></span><br><span class="line"><span class="comment">// opsForSet  #操作set</span></span><br><span class="line"><span class="comment">// opsForHash  #操作hash</span></span><br><span class="line"><span class="comment">// opsForZSet  #操作zset</span></span><br><span class="line"><span class="comment">// opsForGeo   #操作geo</span></span><br><span class="line"><span class="comment">// opsForHyperLogLog  #操作HyperLogLog</span></span><br><span class="line"><span class="comment">// 除了进本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的 CRUD </span></span><br><span class="line"><span class="comment">// 获取redis的连接对象 </span></span><br><span class="line"><span class="comment">// RedisConnection connection = redisTemplate.getConnectionFactory().getConnection(); </span></span><br><span class="line"><span class="comment">// connection.flushDb(); </span></span><br><span class="line"><span class="comment">// connection.flushAll();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>证明如果是用基本RedisTemplate类来操作Redis的话，是基本上可以达到所有的效果的，因为具体方法和命令大体一致！</p><h2 id="对象的保存和读取"><a href="#对象的保存和读取" class="headerlink" title="对象的保存和读取"></a>对象的保存和读取</h2><p>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.annotation.MyAnnotation;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liao.sc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/6 15:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStr</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会报异常   </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;liao.sc&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221201153557.png?raw=true" alt="blog_images20221201153557.png"></p><p>结论：所以在操作Redis中，关于对象的保存我们得序列化才可以正常操作！</p><h2 id="自定义封装RedisTemplate类"><a href="#自定义封装RedisTemplate类" class="headerlink" title="自定义封装RedisTemplate类"></a>自定义封装RedisTemplate类</h2><p>上面说了大体上可以实现，但是为了在工作中更容易操作Redis，我们一般重新封装RedisTemplate类，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"><span class="comment">//解决Redis存储对象没有序列化问题</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 这是我给大家写好的一个固定模板，大家在企业中，拿去就可以直接使用！</span></span><br><span class="line">    <span class="comment">// 自己定义了一个RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        <span class="comment">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// Json序列化配置</span></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// String 的序列化</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>序列化完成后我们再试试对象的添加获取</p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221201154258.png?raw=true" alt="blog_images20221201154258.png"></p><h2 id="封装RedisUtils类："><a href="#封装RedisUtils类：" class="headerlink" title="封装RedisUtils类："></a>封装RedisUtils类：</h2><p>在实际工作中，我们不可能用<strong>RedisTemplate</strong> 来操作Redis的，因为实在太繁琐，所以我们一般自定义一个RedisUtils工具类来操作Redis！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RedisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">keys</span><span class="params">(String keys)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.keys(keys);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入, 不存在放入，存在返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setnx</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().setIfAbsent(key,value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间,不存在放入，存在返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setnx</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().setIfAbsent(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hget</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hmget</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hdel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hincr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by 要减少记(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hdecr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sHasKey</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSet</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSetAndTime</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sGetSetSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lGet</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lGetListSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lGetIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lUpdateIndex</span><span class="params">(String key, <span class="type">long</span> index, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">remove</span> <span class="operator">=</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：其实这篇讲了这么多，大家可以发现，SpringBoot真的是极度方便，整合Redis之后我们只需要简单的操作即可完美使用Redis！<br>但是，前面的内容还都是Redis相关的基础，接下来我将继续整理关于Redis的进阶知识！</p><h1 id="Redis的配置文件详解"><a href="#Redis的配置文件详解" class="headerlink" title="Redis的配置文件详解"></a>Redis的配置文件详解</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bind <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> # 绑定的ip </span><br><span class="line">protected-<span class="built_in">mode</span> yes # 保护模式 </span><br><span class="line">port <span class="number">6379</span> # 端口设置</span><br></pre></td></tr></table></figure><p>通用GENERAL</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes # 以守护进程的方式运行，默认是 no，我们需要自己开启为yes！ </span><br><span class="line">pidfile /var/run/redis_6379.pid # 如果以后台的方式运行，我们就需要指定一个 pid 文件！ </span><br><span class="line"># 日志 </span><br><span class="line"># Specify the server verbosity level. </span><br><span class="line"># This can be one of:</span><br><span class="line"># debug (a lot of information, useful <span class="keyword">for</span> development/testing) </span><br><span class="line"># verbose (many rarely useful info, but <span class="keyword">not</span> a mess like the debug level) </span><br><span class="line"># notice (moderately verbose, what you want <span class="keyword">in</span> production probably) 生产环境 </span><br><span class="line"># warning (only very important / critical messages are logged)</span><br><span class="line">loglevel notice </span><br><span class="line">logfile &quot;&quot; # 日志的文件位置名 </span><br><span class="line">databases <span class="number">16</span> # 数据库的数量，默认是 <span class="number">16</span> 个数据库 </span><br><span class="line">always-show-logo yes # 是否总是显示LOGO</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>快照（RDB）：持久化，在规定的时间内，执行了多少次操作则会持久化到文件 .rdb .aof文件<br><strong>Redis是内存数据库，如果没有持久化，那么数据断电即失！</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 如果<span class="number">900</span>s内，如果至少有一个<span class="number">1</span> key进行了修改，我们及进行持久化操作 </span><br><span class="line">save <span class="number">900</span> <span class="number">1</span> </span><br><span class="line"># 如果<span class="number">300</span>s内，如果至少<span class="number">10</span> key进行了修改，我们及进行持久化操作 </span><br><span class="line">save <span class="number">300</span> <span class="number">10</span> </span><br><span class="line"># 如果<span class="number">60</span>s内，如果至少<span class="number">10000</span> key进行了修改，我们及进行持久化操作 </span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span> </span><br><span class="line"># 我们之后学习持久化，会自己定义这个测试！</span><br></pre></td></tr></table></figure><p>SECURITY 安全<br>可以在这里设置Redis的密码，默认是没有密码的。</p><p>通过命令设置</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">ping</span></span><br><span class="line">PONG</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; config get requirepass  #获取Redis的密码</span><br><span class="line"><span class="number">1</span>) &quot;requirepass&quot;</span><br><span class="line"><span class="number">2</span>) &quot;&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; config <span class="built_in">set</span> requirepass &quot;<span class="number">123456</span>&quot;  #设置Redis的密码为<span class="number">123456</span></span><br><span class="line">OK</span><br><span class="line"># Ctrl+C 退出当前连接</span><br><span class="line">[root@dyjcomputer bin]# redis-cli -p <span class="number">6379</span>  #重新连接</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">ping</span>  #测试<span class="built_in">ping</span>，失败，所有的命令都显示无权限</span><br><span class="line">(error) NOAUTH Authentication required.  </span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> k1 v1  #失败，所有的命令都显示无权限</span><br><span class="line">(error) NOAUTH Authentication required.  </span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; auth <span class="number">123456</span>  #auth + 密码  登陆上去</span><br><span class="line">OK </span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">ping</span>  #正常</span><br><span class="line">PONG</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; config get requirepass  #获取密码，正常</span><br><span class="line"><span class="number">1</span>) &quot;requirepass&quot;</span><br><span class="line"><span class="number">2</span>) &quot;<span class="number">123456</span>&quot;</span><br></pre></td></tr></table></figure><p>通过修改配置文件设置，找到图示位置，添加密码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass <span class="number">12346</span></span><br></pre></td></tr></table></figure><p>重启Redis测试！</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">ping</span></span><br><span class="line">(error) NOAUTH Authentication required.  </span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; auth <span class="number">123456</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; <span class="built_in">ping</span></span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><p>限制CLIENTS</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">maxclients <span class="number">10000</span>   #设置能连接上redis的最大客户端的数量 </span><br><span class="line">maxmemory &lt;bytes&gt;  #redis 配置最大的内存容量 </span><br><span class="line">maxmemory-policy noeviction  #内存到达上限之后的处理策略 </span><br><span class="line"><span class="number">1</span>、volatile-lru：只对设置了过期时间的key进行LRU（默认值） </span><br><span class="line"><span class="number">2</span>、allkeys-lru ： 删除lru算法的key </span><br><span class="line"><span class="number">3</span>、volatile-random：随机删除即将过期key </span><br><span class="line"><span class="number">4</span>、allkeys-random：随机删除 </span><br><span class="line"><span class="number">5</span>、volatile-ttl ： 删除即将过期的 </span><br><span class="line"><span class="number">6</span>、noeviction ： 永不过期，返回错误</span><br></pre></td></tr></table></figure><p>APPEND ONLY 模式 aof配置（持久化保存）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appendonly no  #默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下,rdb完全够用！ </span><br><span class="line">appendfilename &quot;appendonly.aof&quot;  #持久化的文件的名字 </span><br><span class="line"># appendfsync always # 每次修改都会 sync。消耗性能 </span><br><span class="line">appendfsync everysec # 每秒执行一次 sync，可能会丢失这<span class="number">1</span>s的数据！ </span><br><span class="line"># appendfsync no  #不执行 sync，这个时候操作系统自己同步数据，速度最快！</span><br></pre></td></tr></table></figure><h1 id="Redis持久化之RDB和AOF"><a href="#Redis持久化之RDB和AOF" class="headerlink" title="Redis持久化之RDB和AOF"></a>Redis持久化之RDB和AOF</h1><p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能 !</p>]]></content>
    
    
    <summary type="html">Redis详解</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>论文模板</title>
    <link href="http://example.com/2022/11/29/%E6%B0%B4%E8%AE%BA%E6%96%87/"/>
    <id>http://example.com/2022/11/29/%E6%B0%B4%E8%AE%BA%E6%96%87/</id>
    <published>2022-11-29T07:00:00.000Z</published>
    <updated>2022-11-29T09:02:55.527Z</updated>
    
    <content type="html"><![CDATA[<p>你一定要记住，你知道的别不一定知道，那么你可以不说，但是你说出来，一定要是真的</p><h1 id="论文模板"><a href="#论文模板" class="headerlink" title="论文模板"></a>论文模板</h1><ol><li>模型确定，</li><li>结果正在跑（或已结束），</li><li>目标期刊已定，一般可以定顶刊<ol><li>从目标期刊中打印3-5份最近的论文定模板</li></ol></li><li>第一遍初稿写的时候没必要注意排版格式</li></ol><h2 id="Abstrac"><a href="#Abstrac" class="headerlink" title="Abstrac"></a>Abstrac</h2><p>简单描述你这个领域，你这个领域出现了什么问题（创新在这里），你用了什么方法解决，你的方法有了性能提升。简述</p><p>关键词：</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>描述你这个了领域，这个领域对这个现实世界有什么帮助。</p><p>你这个领域出现了什么问题（引用别人的），尽量用可视化的例子来表达</p><p>我就想着解决这个问题，我通过以下三点（我加的小模块）解决了这个问题：</p><ol><li>1</li><li>2</li><li>3</li></ol><p>总结，我这个性能是很好</p><h2 id="Realted-Work"><a href="#Realted-Work" class="headerlink" title="Realted Work"></a>Realted Work</h2><p>首先描述你这个领域的普遍做法（选）</p><p>具体讲别人是怎么做的</p><p>总结下，受上面的启发，我怎么做的（简述）</p><h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><h3 id="Basic-Module"><a href="#Basic-Module" class="headerlink" title="Basic Module"></a>Basic Module</h3><p>用的一些小模块，简单讲，不要把你懂得当做别人也懂</p><h3 id="你的方法（一般为标题）"><a href="#你的方法（一般为标题）" class="headerlink" title="你的方法（一般为标题）"></a>你的方法（一般为标题）</h3><p>你的方法分成多个小模块</p><p>编码器-解码器架构</p><ol><li>总的讲一下你的方法的一个架构，一个组成</li><li>编码器<ol><li>a编码器<ol><li>目标检测</li><li>知识图谱</li></ol></li><li>b编码器</li></ol></li><li>解码器<ol><li>正向解码器</li><li>反向解码器</li></ol></li></ol><h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h2><h3 id="Experiments-Settings"><a href="#Experiments-Settings" class="headerlink" title="Experiments Settings"></a>Experiments Settings</h3><p>一些你用到的东西，评价的东西（可以模仿别人写）</p><ol><li>Data Sets   数据</li><li>Evaluation Metrics 评价指标</li><li>Parameter Settings  参数设定</li></ol><h3 id="Performance-Comprison"><a href="#Performance-Comprison" class="headerlink" title="Performance Comprison"></a>Performance Comprison</h3><p>和近几年的比较</p><p>你可以挑几个差点的顶刊顶会</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="Quantitative-Analysis（消融实验）"><a href="#Quantitative-Analysis（消融实验）" class="headerlink" title="Quantitative Analysis（消融实验）"></a>Quantitative Analysis（消融实验）</h3><p>基准模型加模块（加了a、b、c三个模块）</p><p>去掉abc</p><p>仅去掉a+b</p><p>仅去掉c</p><h3 id="Case-Study"><a href="#Case-Study" class="headerlink" title="Case Study"></a>Case Study</h3><p>案例分析：实例分析</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>我做了一件事，这件事怎么做的，有了提升</p><h2 id="Acknowledgments"><a href="#Acknowledgments" class="headerlink" title="Acknowledgments"></a>Acknowledgments</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>]]></content>
    
    
    <summary type="html">小论文</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringBoot注解</title>
    <link href="http://example.com/2022/11/29/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <id>http://example.com/2022/11/29/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-11-29T07:00:00.000Z</published>
    <updated>2022-11-29T09:01:44.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h1><p>这个注解是Spring Boot最核心的注解，用在 Spring Boot的主类上，标识这是一个 Spring Boot 应用，用来开启 Spring Boot 的各项能力。实际上这个注解是@Configuration,@EnableAutoConfiguration,@ComponentScan三个注解的组合。由于这些注解一般都是一起使用，所以Spring Boot提供了一个统一的注解@SpringBootApplication。</p><h1 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h1><p>允许 Spring Boot 自动配置注解，开启这个注解之后，Spring Boot 就能根据当前类路径下的包或者类来配置 Spring Bean。</p><p>如：当前类路径下有 Mybatis 这个 JAR 包，MybatisAutoConfiguration 注解就能根据相关参数来配置 Mybatis 的各个 Spring Bean。</p><p>@EnableAutoConfiguration实现的关键在于引入了AutoConfigurationImportSelector，其核心逻辑为selectImports方法，逻辑大致如下：</p><p>　●　从配置文件META-INF/spring.factories加载所有可能用到的自动配置类；</p><p>　●　去重，并将exclude和excludeName属性携带的类排除；</p><p>　●　过滤，将满足条件（@Conditional）的自动配置类返回；</p><h1 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h1><p>用于定义配置类，指出该类是 Bean 配置的信息源，相当于传统的xml配置文件，一般加在主类上。如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类——可以使用@ImportResource注解加载xml配置文件。</p><h1 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h1><p>组件扫描。让spring Boot扫描到Configuration类并把它加入到程序上下文。</p><p>@ComponentScan注解默认就会装配标识了@Controller，@Service，@Repository，@Component注解的类到spring容器中。</p><h1 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h1><p>用于标注数据访问组件，即DAO组件。</p><p>使用@Repository注解可以确保DAO或者repositories提供异常转译，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。</p><h1 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h1><p>一般用于修饰service层的组件</p><h1 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h1><p>用于标注控制层组件(如struts中的action)，表示这是个控制器bean,并且是将函数的返回值直 接填入HTTP响应体中,是REST风格的控制器；它是@Controller和@ResponseBody的合集。</p><h1 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h1><p>表示该方法的返回结果直接写入HTTP response body中。一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，加上@responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如异步获取json数据，<strong>加上@responsebody后，会直接返回json数据。</strong></p><h1 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h1><p>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><h1 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h1><p>相当于XML中的<bean></bean>,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。</p><h1 id="AutoWired"><a href="#AutoWired" class="headerlink" title="@AutoWired"></a>@AutoWired</h1><p>byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。</p><p>当加上（required=false）时，就算找不到bean也不报错。</p><h1 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h1><p>当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用</p><h1 id="Resource-name-”name”-type-”type”"><a href="#Resource-name-”name”-type-”type”" class="headerlink" title="@Resource(name=”name”,type=”type”)"></a>@Resource(name=”name”,type=”type”)</h1><p>没有括号内内容的话，默认byName。与@Autowired干类似的事。</p><h1 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h1><p>RequestMapping是一个用来处理请求地址映射的注解；提供路由信息，负责URL到Controller中的具体函数的映射，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><ul><li><code>value</code>:映射的请求URL或者其别名</li><li><code>method</code>:兼容HTTP的方法名</li><li><code>params</code>:根据HTTP参数的存在、缺省或值对请求进行过滤</li><li><code>header</code>:根据HTTP Header的存在、缺省或值对请求进行过滤</li><li><code>consume</code>:设定在HTTP请求正文中允许使用的媒体类型</li><li><code>product</code>:在HTTP响应体中允许使用的媒体类型</li></ul><p>提示：在使用@RequestMapping之前，请求处理类还需要使用@Controller或@RestController进行标记下面是使用@RequestMapping的两个示例：</p><p><img src="https://s8.51cto.com/oss/202206/15/326128e90f0e1cc1856700db0139f1dc75c338.jpg" alt="图片"></p><p>@RequestMapping还可以对类进行标记，这样类中的处理方法在映射请求路径时，会自动将类上@RequestMapping设置的value拼接到方法中映射路径之前，如下：</p><p><img src="https://s9.51cto.com/oss/202206/15/d2060b050f5ab0c35ef4884792f07f887cedd1.jpg" alt="图片"></p><h1 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h1><p><code>@PathVariable</code>注解是将方法中的参数绑定到请求URI中的模板变量上。可以通过<code>@RequestMapping</code>注解来指定URI的模板变量，然后使用<code>@PathVariable</code>注解将方法中的参数绑定到模板变量上。特别地，<code>@PathVariable</code>注解允许我们使用value或name属性来给参数取一个别名。下面是使用此注解的一个示例：</p><p><img src="https://s9.51cto.com/oss/202206/15/67b5d0e51e44b21cd511748b3b3b5356fcfc56.jpg" alt="图片"></p><p>模板变量名需要使用<code>&#123; &#125;</code>进行包裹，如果方法的参数名与URI模板变量名一致，则在<code>@PathVariable</code>中就可以省略别名的定义。下面是一个简写的示例：</p><p><img src="https://s4.51cto.com/oss/202206/15/d866b84086cb835ecd56331161bb9a0361816c.jpg" alt="图片"></p><p>提示：如果参数是一个非必须的，可选的项，则可以在@PathVariable中设置require=false@RequestParam@RequestParam注解用于将方法的参数与Web请求的传递的参数进行绑定。使用@RequestParam可以轻松的访问HTTP请求参数的值。下面是使用该注解的代码示例：</p><p><img src="https://s2.51cto.com/oss/202206/15/816c991693fd4bcaa39898c45b2ab0b42e869f.jpg" alt="图片"></p><p>该注解的其他属性配置与<code>@PathVariable</code>的配置相同，特别的，如果传递的参数为空，还可以通过defaultValue设置一个默认值。示例代码如下：</p><p><img src="https://s8.51cto.com/oss/202206/15/15e6aa6840a3df347a82134b60fa4d0dc72ea9.jpg" alt="图片"></p><h1 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h1><p>@RequestBody在处理请求方法的参数列表中使用，它可以将请求主体中的参数绑定到一个对象中，请求主体参数是通过<code>HttpMessageConverter</code>传递的，根据请求主体中的参数名与对象的属性名进行匹配并绑定值。此外，还可以通过@Valid注解对请求主体中的参数进行校验。下面是一个使用<code>@RequestBody</code>的示例：</p><p><img src="https://s2.51cto.com/oss/202206/15/d745a8798e08963a39c350241753f1fd688fc2.jpg" alt="图片"></p><p>@Valid在进行数据校验的时候需要在实体类的字段名上加上注解标注字段的取值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 姓名 */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;请输入名称&quot;)</span></span><br><span class="line">    <span class="meta">@Length(message = &quot;名称不能超过个 &#123;max&#125; 字符&quot;, max = 10)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 年龄 */</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;请输入年龄&quot;)</span></span><br><span class="line">    <span class="meta">@Range(message = &quot;年龄范围为 &#123;min&#125; 到 &#123;max&#125; 之间&quot;, min = 1, max = 100)</span></span><br><span class="line">    <span class="keyword">public</span> Integer age;</span><br></pre></td></tr></table></figure><p>标注之后在RequestBody进行映射的时候会对数据进行验证，如果不符合要求则会返回message信息</p><h1 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h1><p><code>@GetMapping</code>注解用于处理HTTP GET请求，并将请求映射到具体的处理方法中。具体来说，@GetMapping是一个组合注解，它相当于是<code>@RequestMapping(method=RequestMethod.GET)</code>的快捷方式。下面是<code>@GetMapping</code>的一个使用示例：</p><p><img src="https://s3.51cto.com/oss/202206/15/f4de9f638b01d70bee9156b39eca886f71254e.jpg" alt="图片"></p><h1 id="PostMapping"><a href="#PostMapping" class="headerlink" title="@PostMapping"></a>@PostMapping</h1><p><code>@PostMapping</code>注解用于处理HTTP POST请求，并将请求映射到具体的处理方法中。@PostMapping与@GetMapping一样，也是一个组合注解，它相当于是<code>@RequestMapping(method=HttpMethod.POST)</code>的快捷方式。下面是使用<code>@PostMapping</code>的一个示例：</p><p><img src="https://s7.51cto.com/oss/202206/15/247798479df3a6a26e53640831216acbaeb500.jpg" alt="图片"></p><h1 id="PutMapping"><a href="#PutMapping" class="headerlink" title="@PutMapping"></a>@PutMapping</h1><p><code>@PutMapping</code>注解用于处理HTTP PUT请求，并将请求映射到具体的处理方法中，@PutMapping是一个组合注解，相当于是<code>@RequestMapping(method=HttpMethod.PUT)</code>的快捷方式。下面是使用<code>@PutMapping</code>的一个示例：</p><p><img src="https://s7.51cto.com/oss/202206/15/4468c6249f67830d8a64718d91585f02c18da1.jpg" alt="图片"></p><h1 id="DeleteMapping"><a href="#DeleteMapping" class="headerlink" title="@DeleteMapping"></a>@DeleteMapping</h1><p><code>@DeleteMapping</code>注解用于处理HTTP DELETE请求，并将请求映射到删除方法中。@DeleteMapping是一个组合注解，它相当于是<code>@RequestMapping(method=HttpMethod.DELETE)</code>的快捷方式。下面是使用<code>@DeleteMapping</code>的一个示例：</p><p><img src="https://s5.51cto.com/oss/202206/15/994d47a01df0279903f123410493b9e0b870a3.jpg" alt="图片"></p><h1 id="PatchMapping"><a href="#PatchMapping" class="headerlink" title="@PatchMapping"></a>@PatchMapping</h1><p><code>@PatchMapping</code>注解用于处理HTTP PATCH请求，并将请求映射到对应的处理方法中。@PatchMapping相当于是<code>@RequestMapping(method=HttpMethod.PATCH)</code>的快捷方式。下面是一个简单的示例：</p><p><img src="https://s6.51cto.com/oss/202206/15/b9f511b11392a89b5ca900ffc34c73775753b4.jpg" alt="图片"></p><h1 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h1><p><code>@ControllerAdvice</code>是@Component注解的一个延伸注解，Spring会自动扫描并检测被@ControllerAdvice所标注的类。<code>@ControllerAdvice</code>需要和<code>@ExceptionHandler</code>、<code>@InitBinder</code>以及<code>@ModelAttribute</code>注解搭配使用，主要是用来处理控制器所抛出的异常信息。首先，我们需要定义一个被<code>@ControllerAdvice</code>所标注的类，在该类中，定义一个用于处理具体异常的方法，并使用@ExceptionHandler注解进行标记。此外，在有必要的时候，可以使用<code>@InitBinder</code>在类中进行全局的配置，还可以使用@ModelAttribute配置与视图相关的参数。使用<code>@ControllerAdvice</code>注解，就可以快速的创建统一的，自定义的异常处理类。下面是一个使用<code>@ControllerAdvice</code>的示例代码：</p><h2 id="ControllerAdvice-配合-ExceptionHandler-实现全局异常处理"><a href="#ControllerAdvice-配合-ExceptionHandler-实现全局异常处理" class="headerlink" title="@ControllerAdvice 配合 @ExceptionHandler 实现全局异常处理"></a>@ControllerAdvice 配合 @ExceptionHandler 实现全局异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(IllegalArgumentException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleException</span><span class="params">(IllegalArgumentException e)</span>&#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;errorMessage&quot;</span>, <span class="string">&quot;参数不符合规范!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ControllerAdvice-配合-ModelAttribute-预设全局数据"><a href="#ControllerAdvice-配合-ModelAttribute-预设全局数据" class="headerlink" title="@ControllerAdvice 配合 @ModelAttribute 预设全局数据"></a>@ControllerAdvice 配合 @ModelAttribute 预设全局数据</h2><p>我们先来看看 <code>ModelAttribute</code>注解类的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation that binds a method parameter or method return value</span></span><br><span class="line"><span class="comment"> * to a named model attribute, exposed to a web view. Supported</span></span><br><span class="line"><span class="comment"> * for controller classes with &#123;<span class="doctag">@link</span> RequestMapping <span class="doctag">@RequestMapping</span>&#125;</span></span><br><span class="line"><span class="comment"> * methods.</span></span><br><span class="line"><span class="comment"> * 此注解用于绑定一个方法参数或者返回值到一个被命名的model属性中，暴露给web视图。支持在</span></span><br><span class="line"><span class="comment"> * 在Controller类中注有<span class="doctag">@RequestMapping</span>的方法使用（这里有点拗口，不过结合下面的使用介绍</span></span><br><span class="line"><span class="comment"> * 你就会明白的)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ModelAttribute &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AliasFor(&quot;name&quot;)</span></span><br><span class="line">String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">binding</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际上这个注解的作用就是，允许你往 <code>Model</code> 中注入全局属性（可以供所有Controller中注有@Request Mapping的方法使用），<code>value</code> 和 <code>name</code> 用于指定 属性的 <code>key</code> ，<code>binding</code> 表示是否绑定，默认为 <code>true</code>。</p><p>具体使用方法如下：</p><p>全局参数绑定</p><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyGlobalHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">presetParam</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;globalAttr&quot;</span>,<span class="string">&quot;this is a global attribute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyGlobalHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute()</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">presetParam</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种方式对于加单个属性比较方便。默认会把返回值（如上面的map）作为属性的value，而对于key有两种指定方式：</p><p>当 @ModelAttribute() 不传任何参数的时候，默认会把返回值的字符串值作为key，如上例的 key 则是 ”map”（值得注意的是，不支持字符串的返回值作为key）。<br>当 @ModelAttribute(“myMap”) 传参数的时候，则以参数值作为key，这里 key 则是 ”myMap“。</p><p><strong>全局参数使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdviceController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;methodOne&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">methodOne</span><span class="params">(Model model)</span>&#123; </span><br><span class="line">        Map&lt;String, Object&gt; modelMap = model.asMap();</span><br><span class="line">        <span class="keyword">return</span> (String)modelMap.get(<span class="string">&quot;globalAttr&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@GetMapping(&quot;methodTwo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">methodTwo</span><span class="params">(<span class="meta">@ModelAttribute(&quot;globalAttr&quot;)</span> String globalAttr)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> globalAttr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;methodThree&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">methodThree</span><span class="params">(ModelMap modelMap)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (String) modelMap.get(<span class="string">&quot;globalAttr&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求参数预处理"><a href="#请求参数预处理" class="headerlink" title="请求参数预处理"></a>请求参数预处理</h3><p>@ControllerAdvice 配合 @InitBinder 实现对请求参数的预处理</p><p>再次之前我们先来了解一下 <code>@IniiBinder</code>，先看一下源码，我会提取一些重要的注释进行浅析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation that identifies methods which initialize the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.web.bind.WebDataBinder&#125; which</span></span><br><span class="line"><span class="comment"> * will be used for populating command and form object arguments</span></span><br><span class="line"><span class="comment"> * of annotated handler methods.</span></span><br><span class="line"><span class="comment"> * 粗略翻译：此注解用于标记那些 (初始化[用于组装命令和表单对象参数的]WebDataBinder)的方法。</span></span><br><span class="line"><span class="comment"> * 原谅我的英语水平，翻译起来太拗口了，从句太多就用‘()、[]’分割一下便于阅读</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Init-binder methods must not have a return value; they are usually</span></span><br><span class="line"><span class="comment"> * declared as &#123;<span class="doctag">@code</span> void&#125;.</span></span><br><span class="line"><span class="comment"> * 粗略翻译：初始化绑定的方法禁止有返回值，他们通常声明为 &#x27;void&#x27;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Typical arguments are &#123;<span class="doctag">@link</span> org.springframework.web.bind.WebDataBinder&#125;</span></span><br><span class="line"><span class="comment"> * in combination with &#123;<span class="doctag">@link</span> org.springframework.web.context.request.WebRequest&#125;</span></span><br><span class="line"><span class="comment"> * or &#123;<span class="doctag">@link</span> java.util.Locale&#125;, allowing to register context-specific editors.</span></span><br><span class="line"><span class="comment"> * 粗略翻译：典型的参数是`WebDataBinder`，结合`WebRequest`或`Locale`使用，允许注册特定于上下文的编辑 </span></span><br><span class="line"><span class="comment"> * 器。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 总结如下：</span></span><br><span class="line"><span class="comment"> *  1. <span class="doctag">@InitBinder</span> 标识的方法的参数通常是 WebDataBinder。</span></span><br><span class="line"><span class="comment"> *  2. <span class="doctag">@InitBinder</span> 标识的方法,可以对 WebDataBinder 进行初始化。WebDataBinder 是 DataBinder 的一</span></span><br><span class="line"><span class="comment"> *            个子类,用于完成由表单字段到 JavaBean 属性的绑定。</span></span><br><span class="line"><span class="comment"> *  3. <span class="doctag">@InitBinder</span> 标识的方法不能有返回值,必须声明为void。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> InitBinder &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The names of command/form attributes and/or request parameters</span></span><br><span class="line"><span class="comment"> * that this init-binder method is supposed to apply to.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Default is to apply to all command/form attributes and all request parameters</span></span><br><span class="line"><span class="comment"> * processed by the annotated handler class. Specifying model attribute names or</span></span><br><span class="line"><span class="comment"> * request parameter names here restricts the init-binder method to those specific</span></span><br><span class="line"><span class="comment"> * attributes/parameters, with different init-binder methods typically applying to</span></span><br><span class="line"><span class="comment"> * different groups of attributes or parameters.</span></span><br><span class="line"><span class="comment"> * 粗略翻译：此init-binder方法应该应用于的命令/表单属性和/或请求参数的名称。默认是应用于所有命   * 令/表单属性和所有由带注释的处理类处理的请求参数。这里指定模型属性名或请求参数名将init-binder * 方法限制为那些特定的属性/参数，不同的init-binder方法通常应用于不同的属性或参数组。</span></span><br><span class="line"><span class="comment"> * 我至己都理解不太理解这说的是啥呀，我们还是看例子吧</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们来看看具体用途，其实这些用途在 <code>Controller</code>里也可以定义，但是作用范围就只限当前Controller，因此下面的例子我们将结合 <code>ControllerAdvice</code> 作全局处理。</p><h3 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyGlobalHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processParam</span><span class="params">(WebDataBinder dataBinder)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建一个字符串微调编辑器</span></span><br><span class="line"><span class="comment">         * 参数&#123;boolean emptyAsNull&#125;: 是否把空字符串(&quot;&quot;)视为 null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">StringTrimmerEditor</span> <span class="variable">trimmerEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTrimmerEditor</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 注册自定义编辑器</span></span><br><span class="line"><span class="comment">         * 接受两个参数&#123;Class&lt;?&gt; requiredType, PropertyEditor propertyEditor&#125;</span></span><br><span class="line"><span class="comment">         * requiredType：所需处理的类型</span></span><br><span class="line"><span class="comment">         * propertyEditor：属性编辑器，StringTrimmerEditor就是 propertyEditor的一个子类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        dataBinder.registerCustomEditor(String.class, trimmerEditor);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//同上，这里就不再一步一步讲解了</span></span><br><span class="line">        dataBinder.registerCustomEditor(Date.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">CustomDateEditor</span>(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>), <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样之后呢，就可以实现全局的实现对 <code>Controller</code> 中<code>RequestMapping</code>标识的方法中的所有 <code>String</code> 和<code>Date</code>类型的参数都会被作相应的处理。</p><p>测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinderTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;processParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">test</span><span class="params">(String str, Date date)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;str&quot;</span>, str);</span><br><span class="line">        map.put(<span class="string">&quot;data&quot;</span>, date);</span><br><span class="line">        <span class="keyword">return</span>  map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数绑定</p><p>参数绑定可以解决特定问题，那么我们先来看看我们面临的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">// omitted getters and setters.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="comment">// omitted getters and setters.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinderTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;bindParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Person person, Book book)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们会发现 <code>Person</code>类和 <code>Book</code> 类都有 <code>name</code>属性，那么这个时候就会出先问题，它可没有那么只能区分哪个<code>name</code>是哪个类的。因此 <code>@InitBinder</code>就派上用场了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyGlobalHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @InitBinder(&quot;person&quot;) 对应找到@RequstMapping标识的方法参数中</span></span><br><span class="line"><span class="comment">     * 找参数名为person的参数。</span></span><br><span class="line"><span class="comment">     * 在进行参数绑定的时候，以‘p.’开头的都绑定到名为person的参数中。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InitBinder(&quot;person&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BindPerson</span><span class="params">(WebDataBinder dataBinder)</span>&#123;</span><br><span class="line">        dataBinder.setFieldDefaultPrefix(<span class="string">&quot;p.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder(&quot;book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BindBook</span><span class="params">(WebDataBinder dataBinder)</span>&#123;</span><br><span class="line">        dataBinder.setFieldDefaultPrefix(<span class="string">&quot;b.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因此，传入的同名信息就能对应绑定到相应的实体类中：</p><blockquote><p>p.name -&gt; Person.name b.name -&gt; Book.name</p><p>还有一点注意的是如果 @InitBinder(“value”) 中的 value 值和 Controller 中 @RequestMapping() 标识的方法的参数名不匹配，则就会产生绑定失败的后果,如：</p><p>@InitBinder(“p”)、@InitBinder(“b”)</p><p>public void test(Person person, Book book)</p><p>上述情况就会出现绑定失败，有两种解决办法</p><p>第一中：统一名称，要么全叫p，要么全叫person，只要相同就行。</p><p>第二种：方法参数加 @ModelAttribute，有点类似@RequestParam</p><p>@InitBinder(“p”)、@InitBinder(“b”)</p><p>public void test(@ModelAttribute(“p”) Person person, @ModelAttribute(“b”) Book book)</p></blockquote><h1 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h1><p><code>@ExceptionHander</code>注解用于标注处理特定类型异常类所抛出异常的方法。当控制器中的方法抛出异常时，Spring会自动捕获异常，并将捕获的异常信息传递给被<code>@ExceptionHandler</code>标注的方法。下面是使用该注解的一个示例：</p><p><img src="https://s3.51cto.com/oss/202206/15/26e18e20674af12382c686c32272827e75430a.jpg" alt="图片"></p><h1 id="ResponseStatus"><a href="#ResponseStatus" class="headerlink" title="@ResponseStatus"></a>@ResponseStatus</h1><p>@ResponseStatus注解可以标注请求处理方法。使用此注解，可以指定响应所需要的HTTP STATUS。特别地，我们可以使用HttpStauts类对该注解的value属性进行赋值。下面是使用@ResponseStatus注解的一个示例：</p><p><img src="https://s4.51cto.com/oss/202206/15/f4401b4412d2f369049171b4a3e9579b749a5f.jpg" alt="图片"></p><h1 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h1><p>通过此注解，可以通过模型索引名称来访问已经存在于控制器中的model。下面是使用此注解的一个简单示例：</p><p><img src="https://s7.51cto.com/oss/202206/15/123a5574786bad89ef2957975f86f36e550036.jpg" alt="图片"></p><p>与<code>@PathVariable</code>和<code>@RequestParam</code>注解一样，如果参数名与模型具有相同的名字，则不必指定索引名称，简写示例如下：</p><p><img src="https://s9.51cto.com/oss/202206/15/d8d0ad4826e4d6eb5ef6858dc1f57cdc060ba8.jpg" alt="图片"></p><p>特别地，如果使用<code>@ModelAttribute</code>对方法进行标注，Spring会将方法的返回值绑定到具体的Model上。示例如下：</p><p><img src="https://s3.51cto.com/oss/202206/15/b458b53921fd2d263696357fd1b0fc95f8ba01.jpg" alt="图片"></p><p>在Spring调用具体的处理方法之前，被<code>@ModelAttribute</code>注解标注的所有方法都将被执行。**@CrossOrigin**``注解将为请求处理类或请求处理方法提供跨域调用支持。如果我们将此注解标注类，那么类中的所有方法都将获得支持跨域的能力。使用此注解的好处是可以微调跨域行为。使用此注解的示例如下：</p><p><img src="https://s7.51cto.com/oss/202206/15/c5ee5f4771df9a7c7482576e8f46bccf105623.jpg" alt="图片"></p><h1 id="DependsOn"><a href="#DependsOn" class="headerlink" title="@DependsOn"></a>@DependsOn</h1><p><code>@DependsOn</code>注解可以配置Spring IoC容器在初始化一个Bean之前，先初始化其他的Bean对象。下面是此注解使用示例代码：</p><p><img src="https://s2.51cto.com/oss/202206/15/f42652c422cbc9ffd9238948675cbec8b0d99f.jpg" alt="图片"></p><h1 id="Bean-1"><a href="#Bean-1" class="headerlink" title="@Bean"></a>@Bean</h1><p>@Bean注解主要的作用是告知Spring，被此注解所标注的类将需要纳入到Bean管理工厂中。@Bean注解的用法很简单，在这里，着重介绍@Bean注解中<code>initMethod</code>和<code>destroyMethod</code>的用法。示例如下：</p><p><img src="https://s2.51cto.com/oss/202206/15/88813cc2291888b570f058a37aa0d31677bcd2.jpg" alt="图片"></p><h1 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h1><p>@Scope注解可以用来定义@Component标注的类的作用范围以及@Bean所标记的类的作用范围。@Scope所限定的作用范围有：<code>singleton</code>、<code>prototype</code>、<code>request</code>、<code>session</code>、<code>globalSession</code>或者其他的自定义范围。这里以prototype为例子进行讲解。当一个Spring Bean被声明为prototype（原型模式）时，在每次需要使用到该类的时候，Spring IoC容器都会初始化一个新的改类的实例。在定义一个Bean时，可以设置Bean的scope属性为<code>prototype：scope=“prototype”</code>,也可以使用@Scope注解设置，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Scope(value=ConfigurableBeanFactory.SCOPE_PROPTOTYPE)</span><br></pre></td></tr></table></figure><p>下面将给出两种不同的方式来使用@Scope注解，示例代码如下：</p><p><img src="https://s2.51cto.com/oss/202206/15/58a728501eba99314547134b0b1fec2c3c1366.jpg" alt="图片"></p><p><strong>单例模式</strong>当@Scope的作用范围设置成Singleton时，被此注解所标注的类只会被Spring IoC容器初始化一次。在默认情况下，Spring IoC容器所初始化的类实例都为singleton。同样的原理，此情形也有两种配置方式，示例代码如下：</p><p><img src="https://s5.51cto.com/oss/202206/15/050a2fc37ece2cf8472756e71d5f9c6e054364.jpg" alt="图片"></p><h1 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h1><p>@Autowired注解用于标记Spring将要解析和注入的依赖项。此注解可以作用在构造函数、字段和setter方法上。</p><h2 id="作用于构造函数"><a href="#作用于构造函数" class="headerlink" title="作用于构造函数"></a>作用于构造函数</h2><p><img src="https://s5.51cto.com/oss/202206/15/c695029224973fbd2f62445c9fae8f8f9758c6.jpg" alt="图片"></p><h2 id="作用于setter方法"><a href="#作用于setter方法" class="headerlink" title="作用于setter方法"></a>作用于setter方法</h2><p>下面是@Autowired注解标注setter方法的示例代码：</p><p><img src="https://s4.51cto.com/oss/202206/15/e6c42c5318e3b879e001523c6327501e03c8ea.jpg" alt="图片"></p><h2 id="作用于字段"><a href="#作用于字段" class="headerlink" title="作用于字段"></a>作用于字段</h2><p>@Autowired注解标注字段是最简单的，只需要在对应的字段上加入此注解即可，示例代码如下：</p><p><img src="https://s5.51cto.com/oss/202206/15/a67869204dfa7603aa85979d8b45bc0ab7c993.jpg" alt="图片"></p><h1 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h1><p>当系统中需要配置多个具有相同类型的bean时，@Primary可以定义这些Bean的优先级。下面将给出一个实例代码来说明这一特性：</p><p><img src="https://s2.51cto.com/oss/202206/15/b8399867508b7dbe11d8217092abf86c36bf57.jpg" alt="图片"></p><h1 id="PostConstruct与-PreDestroy"><a href="#PostConstruct与-PreDestroy" class="headerlink" title="@PostConstruct与@PreDestroy"></a>@PostConstruct与@PreDestroy</h1><p>值得注意的是，这两个注解不属于Spring,它们是源于JSR-250中的两个注解，位于<code>common-annotations.jar</code>中。@PostConstruct注解用于标注在Bean被Spring初始化之前需要执行的方法。@PreDestroy注解用于标注Bean被销毁前需要执行的方法。下面是具体的示例代码：</p><p><img src="https://s9.51cto.com/oss/202206/15/d6adcbe386f0942a203086e19cd0bc36d0c7cf.jpg" alt="图片"></p><h1 id="Qualifier-1"><a href="#Qualifier-1" class="headerlink" title="@Qualifier"></a>@Qualifier</h1><p>当系统中存在同一类型的多个Bean时，@Autowired在进行依赖注入的时候就不知道该选择哪一个实现类进行注入。此时，我们可以使用@Qualifier注解来微调，帮助@Autowired选择正确的依赖项。下面是一个关于此注解的代码示例：</p><p><img src="https://s9.51cto.com/oss/202206/15/3802111933c371a4bc54998f7e202181feb384.jpg" alt="图片"></p><h1 id="ConditionalOnBean与-ConditionalOnMissingBean"><a href="#ConditionalOnBean与-ConditionalOnMissingBean" class="headerlink" title="@ConditionalOnBean与@ConditionalOnMissingBean"></a>@ConditionalOnBean与@ConditionalOnMissingBean</h1><p>这两个注解属于对象条件注解，根据是否存在某个对象作为依据来决定是否要执行某些配置方法。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(name=&quot;dataSource&quot;)</span></span><br><span class="line">LocalContainerEntityManagerFactoryBean <span class="title function_">entityManagerFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> MyBean <span class="title function_">myBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ConditionalOnProperty"><a href="#ConditionalOnProperty" class="headerlink" title="@ConditionalOnProperty"></a>@ConditionalOnProperty</h1><p>@ConditionalOnProperty注解会根据Spring配置文件中的配置项是否满足配置要求，从而决定是否要执行被其标注的方法。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name=&quot;alipay&quot;,havingValue=&quot;on&quot;)</span></span><br><span class="line">Alipay <span class="title function_">alipay</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Alipay</span>();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="ConditionalOnResource"><a href="#ConditionalOnResource" class="headerlink" title="@ConditionalOnResource"></a>@ConditionalOnResource</h1><p>此注解用于检测当某个配置文件存在使，则触发被其标注的方法，下面是使用此注解的代码示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ConditionalOnResource(resources = &quot;classpath:website.properties&quot;)</span><br><span class="line">Properties addWebsiteProperties()&#123;</span><br><span class="line">        //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ConditionalOnWebApplication与-ConditionalOnNotWebApplication"><a href="#ConditionalOnWebApplication与-ConditionalOnNotWebApplication" class="headerlink" title="@ConditionalOnWebApplication与@ConditionalOnNotWebApplication"></a>@ConditionalOnWebApplication与@ConditionalOnNotWebApplication</h1><p>这两个注解用于判断当前的应用程序是否是Web应用程序。如果当前应用是Web应用程序，则使用Spring WebApplicationContext,并定义其会话的生命周期。下面是一个简单的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line">HealthCheckController <span class="title function_">healthCheckController</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ConditionalExpression"><a href="#ConditionalExpression" class="headerlink" title="@ConditionalExpression"></a>@ConditionalExpression</h1><p>此注解可以让我们控制更细粒度的基于表达式的配置条件限制。当表达式满足某个条件或者表达式为真的时候，将会执行被此注解标注的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalException(&quot;$&#123;localstore&#125; &amp;&amp; $&#123;local == &#x27;true&#x27;&#125;&quot;)</span></span><br><span class="line">LocalFileStore <span class="title function_">store</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h1><p>@Conditional注解可以控制更为复杂的配置条件。在Spring内置的条件控制注解不满足应用需求的时候，可以使用此注解定义自定义的控制条件，以达到自定义的要求。下面是使用该注解的简单示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Conditioanl(CustomConditioanl.class)</span></span><br><span class="line">CustomProperties <span class="title function_">addCustomProperties</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SpringBoot</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>String类</title>
    <link href="http://example.com/2022/11/29/String%E7%B1%BB/"/>
    <id>http://example.com/2022/11/29/String%E7%B1%BB/</id>
    <published>2022-11-29T07:00:00.000Z</published>
    <updated>2022-11-29T09:01:12.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><p><code>String</code>类表示的字符串。java程序中的所有字符串，如 <code>&quot;abc&quot;</code>，实现这个类的实例。 </p><p>字符串是常量，它们的值不能被创建后改变。支持可变字符串字符串缓冲区。因为字符串对象是不可改变的，所以它们可以被共享。例如：</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure></blockquote><h2 id="String的使用"><a href="#String的使用" class="headerlink" title="String的使用"></a>String的使用</h2><ul><li>String:字符串，使用一对“”引起来表示。</li><li>1.String声明为final的，不可被继承</li><li>2.String实现了Serializable接口：表示字符串是支持序列化的。实现了Comparable接口：表示String可以比较大小</li><li>3.String内部定义了final char[] value用于存储字符串数据</li><li>4.String:代表不可变的字符序列。简称：不可变性。</li></ul><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在常量池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//本质上this.value = new char[0];</span></span><br><span class="line"><span class="type">String</span>  <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//this.value = original.value; 在堆中</span></span><br><span class="line"><span class="type">String</span>  <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(String original); </span><br><span class="line"></span><br><span class="line"><span class="comment">//this.value = Arrays.copyOf(value, value.length);</span></span><br><span class="line"><span class="type">String</span>  <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="type">char</span>[] a);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span>  <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="type">char</span>[] a,<span class="type">int</span> startIndex,<span class="type">int</span> count);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断值是否相同需要使用String.equals()方法。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String()<span class="comment">//创建一个内容为空的字符串</span></span><br><span class="line">String(String value)<span class="comment">//根据指定的字符串内容创建对象</span></span><br><span class="line">String(<span class="type">char</span>[] value)<span class="comment">//根据指定的字符数组创建对象</span></span><br><span class="line">String(<span class="type">byte</span>[] bytes)<span class="comment">//根据指定的字节数组创建对象</span></span><br></pre></td></tr></table></figure><h2 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * int length()：返回字符串的长度：return value.length</span></span><br><span class="line"><span class="comment"> * char charAt(int index)：返回某索引处的字符return value[index]</span></span><br><span class="line"><span class="comment"> * boolean isEmpty()：判断是否是空字符串：return value.length==0</span></span><br><span class="line"><span class="comment"> * String toLowerCase()：使用默认语言环境，将String中的所有字符转换为小写</span></span><br><span class="line"><span class="comment"> * String toUpperCase()：使用默认语言环境，将String中的所有字符转换为大写</span></span><br><span class="line"><span class="comment"> * String trim()：返回字符串的副本，忽略前导空白和尾部空白</span></span><br><span class="line"><span class="comment"> * boolean equals(Object obj)：比较字符串的内容是否相同</span></span><br><span class="line"><span class="comment"> * boolean equals IgnoreCase(String anotherString)：与equals方法类似，忽略大小写</span></span><br><span class="line"><span class="comment"> * String concat(String str)：将指定字符串连接到此字符串的结尾。等价于用“+”</span></span><br><span class="line"><span class="comment"> * int compareTo(String anotherString)：比较两个字符串的大小</span></span><br><span class="line"><span class="comment"> * String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</span></span><br><span class="line"><span class="comment"> * String substring(int beginIndex,int endIndex)：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</span></span><br><span class="line"><span class="comment"> * boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</span></span><br><span class="line"><span class="comment"> * boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</span></span><br><span class="line"><span class="comment"> * int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</span></span><br><span class="line"><span class="comment"> * int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</span></span><br><span class="line"><span class="comment"> * int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</span></span><br><span class="line"><span class="comment"> * int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注：indexOf和lastIndexOf方法如果未找到都是返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 替换：</span></span><br><span class="line"><span class="comment"> * String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</span></span><br><span class="line"><span class="comment"> * String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</span></span><br><span class="line"><span class="comment"> * String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</span></span><br><span class="line"><span class="comment"> * String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 匹配:</span></span><br><span class="line"><span class="comment"> * boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 切片：</span></span><br><span class="line"><span class="comment"> * String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</span></span><br><span class="line"><span class="comment"> * String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="理解String的不可变性"><a href="#理解String的不可变性" class="headerlink" title="理解String的不可变性"></a>理解String的不可变性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String:字符串，使用一对“”引起来表示。</span></span><br><span class="line"><span class="comment">     * 1.String声明为final的，不可被继承</span></span><br><span class="line"><span class="comment">     * 2.String实现了Serializable接口：表示字符串是支持序列化的。</span></span><br><span class="line"><span class="comment">     *         实现了Comparable接口：表示String可以比较大小</span></span><br><span class="line"><span class="comment">     * 3.String内部定义了final char[] value用于存储字符串数据</span></span><br><span class="line"><span class="comment">     * 4.String:代表不可变的字符序列。简称：不可变性。</span></span><br><span class="line"><span class="comment">     *      体现：1.当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。</span></span><br><span class="line"><span class="comment">     *           2.当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</span></span><br><span class="line"><span class="comment">     *           3.当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</span></span><br><span class="line"><span class="comment">     * 5.通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。</span></span><br><span class="line"><span class="comment">     * 6.字符串常量池中是不会存储相同内容的字符串的。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;  <span class="comment">//字面量的定义方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">//比较s1和s2的地址值</span></span><br><span class="line"></span><br><span class="line">        System.out.println(s1);<span class="comment">//hello</span></span><br><span class="line">        System.out.println(s2);<span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        s3 += <span class="string">&quot;def&quot;</span>;</span><br><span class="line">        System.out.println(s3);<span class="comment">//abcdef</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;**********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s4.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">        System.out.println(s4);<span class="comment">//abc</span></span><br><span class="line">        System.out.println(s5);<span class="comment">//mbc</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="String不同拼接操作的对比"><a href="#String不同拼接操作的对比" class="headerlink" title="String不同拼接操作的对比"></a>String不同拼接操作的对比</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结论</span></span><br><span class="line"><span class="comment">     *     1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。</span></span><br><span class="line"><span class="comment">     *     2.只要其中有一个是变量，结果就在堆中</span></span><br><span class="line"><span class="comment">     *     3.如果拼接的结果调用intern()方法，返回值就在常量池中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s2 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">        System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span>;<span class="comment">//s4:常量</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s4 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">        System.out.println(s1 == s5);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span> + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s1 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span> + s2;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> s1 + s2;</span><br><span class="line"></span><br><span class="line">        System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">        System.out.println(s3 == s5);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s3 == s6);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s5 == s6);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s3 == s7);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s5 == s6);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s5 == s7);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s6 == s7);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s8</span> <span class="operator">=</span> s5.intern();<span class="comment">//返回值得到的s8使用的常量值中已经存在的“javaEEhadoop”</span></span><br><span class="line">        System.out.println(s3 == s8);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="String与其他类型的转换"><a href="#String与其他类型的转换" class="headerlink" title="String与其他类型的转换"></a>String与其他类型的转换</h2><h3 id="String与基本数据类型包装类的转换"><a href="#String与基本数据类型包装类的转换" class="headerlink" title="String与基本数据类型包装类的转换"></a>String与基本数据类型包装类的转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    String与基本数据类型、包装类之间的转换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *    String --&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)</span></span><br><span class="line"><span class="comment">     *    基本数据类型、包装类 --&gt; String:调用String重载的valueOf(xxx)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="comment">//        int num = (int)str1;//错误的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(str1);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> String.valueOf(num);   <span class="comment">//&quot;123</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> num + <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(str1 == str3);   <span class="comment">//false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="String与char-之间的转换"><a href="#String与char-之间的转换" class="headerlink" title="String与char[]之间的转换"></a>String与char[]之间的转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String 与 char[]之间的转换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * String --&gt; char[]:调用String的toCharArray()</span></span><br><span class="line"><span class="comment"> * char[] --&gt; String:调用String的构造器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc123&quot;</span>; <span class="comment">//题目： a21cb3</span></span><br><span class="line">  <span class="type">char</span>[] charArray = str1.toCharArray(); <span class="comment">//字符串转换成字符</span></span><br><span class="line">  <span class="type">char</span>[] arr = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">  <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);  <span class="comment">//字符转换成字符串</span></span><br></pre></td></tr></table></figure><h3 id="String与byte-之间的转换"><a href="#String与byte-之间的转换" class="headerlink" title="String与byte[]之间的转换"></a>String与byte[]之间的转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String 与 byte[]之间的转换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 编码：String --&gt; byte[]:调用String的getBytes()</span></span><br><span class="line"><span class="comment"> * 解码：byte[] --&gt; String:调用String的构造器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 编码：字符串 --&gt;字节  (看得懂 ---&gt;看不懂的二进制数据)</span></span><br><span class="line"><span class="comment"> * 解码：编码的逆过程，字节 --&gt; 字符串 （看不懂的二进制数据 ---&gt; 看得懂）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc123重工&quot;</span>;</span><br><span class="line">    <span class="type">byte</span>[] bytes = str1.getBytes();<span class="comment">//使用默认的字符编码集,进行转换</span></span><br><span class="line">    System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] gbks = str1.getBytes(<span class="string">&quot;gbk&quot;</span>);<span class="comment">//使用gbk字符集进行编码。</span></span><br><span class="line">    System.out.println(Arrays.toString(gbks));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);<span class="comment">//使用默认的字符集，进行解码。</span></span><br><span class="line">    System.out.println(str2);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(gbks);</span><br><span class="line">    System.out.println(str3);<span class="comment">//出现乱码。原因：编码集和解码集不一致！</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(gbks,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">    System.out.println(str4);<span class="comment">//没有出现乱码。原因：编码集和解码集一致！</span></span><br></pre></td></tr></table></figure><h2 id="StringBuffer和StringBuilder的介绍"><a href="#StringBuffer和StringBuilder的介绍" class="headerlink" title="StringBuffer和StringBuilder的介绍"></a>StringBuffer和StringBuilder的介绍</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String、StringBuffer、StringBuilder三者的异同？</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * String:不可变的字符序列；底层使用char[]存储</span></span><br><span class="line"><span class="comment"> * StringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储</span></span><br><span class="line"><span class="comment"> * StringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h1><h2 id="StringBuffer的源码分析"><a href="#StringBuffer的源码分析" class="headerlink" title="StringBuffer的源码分析"></a>StringBuffer的源码分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于StringBuffer和StringBuilder的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferBuilderTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 源码分析：</span></span><br><span class="line"><span class="comment">     * String str = new String();//char[] value = new char[0];</span></span><br><span class="line"><span class="comment">     * String str1 = new String(&quot;abc&quot;);//char[] value = new char[]&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * StringBuffer sb1 = new StringBuffer();//char[] value = new char[16];底层创建了一个长度是16的数组。</span></span><br><span class="line"><span class="comment">     * System.out.println(sb1.length());//</span></span><br><span class="line"><span class="comment">     * sb1.append(&#x27;a&#x27;);//value[0] = &#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">     * sb1.append(&#x27;b&#x27;);//value[1] = &#x27;b&#x27;;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * StringBuffer sb2 = new StringBuffer(&quot;abc&quot;);//char[] value = new char[&quot;abc&quot;.length() + 16];</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * //问题1.System.out.println(sb2.length());//3</span></span><br><span class="line"><span class="comment">     * //问题2.扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。</span></span><br><span class="line"><span class="comment">     *        默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 意义：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        sb1.setCharAt(<span class="number">0</span>,<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">        System.out.println(sb1);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        System.out.println(sb2.length());   <span class="comment">//0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer() <span class="comment">//构造一个没有字符的字符串缓冲区，并构造了16个字符的初始容量。  </span></span><br><span class="line">StringBuffer(CharSequence seq) <span class="comment">//构建一个包含指定的 CharSequence相同字符的字符串缓冲区。  </span></span><br><span class="line">StringBuffer(<span class="type">int</span> capacity) <span class="comment">//构造一个没有字符的字符串缓冲区，并构造指定的初始容量。  </span></span><br><span class="line">StringBuffer(String str) <span class="comment">//构造一个初始化为指定字符串内容的字符串缓冲区。  </span></span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StringBuffer的常用方法：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接</span></span><br><span class="line"><span class="comment"> * StringBuffer delete(int start,int end)：删除指定位置的内容</span></span><br><span class="line"><span class="comment"> * StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str</span></span><br><span class="line"><span class="comment"> * StringBuffer insert(int offset, xxx)：在指定位置插入xxx</span></span><br><span class="line"><span class="comment"> * StringBuffer reverse() ：把当前字符序列逆转</span></span><br><span class="line"><span class="comment"> * public int indexOf(String str)</span></span><br><span class="line"><span class="comment"> * public String substring(int start,int end):返回一个从start开始到end索引结束的左闭右开区间的子字符串</span></span><br><span class="line"><span class="comment"> * public int length()</span></span><br><span class="line"><span class="comment"> * public char charAt(int n )</span></span><br><span class="line"><span class="comment"> * public void setCharAt(int n ,char ch)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 总结：</span></span><br><span class="line"><span class="comment"> *     增：append(xxx)</span></span><br><span class="line"><span class="comment"> *     删：delete(int start,int end)</span></span><br><span class="line"><span class="comment"> *     改：setCharAt(int n ,char ch) / replace(int start, int end, String str)</span></span><br><span class="line"><span class="comment"> *     查：charAt(int n )</span></span><br><span class="line"><span class="comment"> *     插：insert(int offset, xxx)</span></span><br><span class="line"><span class="comment"> *     长度：length();</span></span><br><span class="line"><span class="comment"> *     遍历：for() + charAt() / toString()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="字符串拼接方法解析"><a href="#字符串拼接方法解析" class="headerlink" title="字符串拼接方法解析"></a>字符串拼接方法解析</h2><h3 id="使用-拼接字符串的实现原理"><a href="#使用-拼接字符串的实现原理" class="headerlink" title="使用**+**拼接字符串的实现原理"></a>使用**+**拼接字符串的实现原理</h3><p>前面提到过，使用+拼接字符串，其实只是 Java 提供的一个语法糖， 那么，我们就</p><p>来解一解这个语法糖，看看他的内部原理到底是如何实现的。</p><p>还是这样一段代码。我们把他生成的字节码进行反编译，看看结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">wechat</span> <span class="operator">=</span> <span class="string">&quot;Hollis&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">introduce</span> <span class="operator">=</span> <span class="string">&quot;每日更新 Java 相关技术文章&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">hollis</span> <span class="operator">=</span> wechat + <span class="string">&quot;,&quot;</span> + introduce;</span><br></pre></td></tr></table></figure><p>反编译后的内容如下，反编译工具为 jad。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">wechat</span> <span class="operator">=</span> <span class="string">&quot;Hollis&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">introduce</span> <span class="operator">=</span> <span class="string">&quot;\u6BCF\u65E5\u66F4\u65B0Java\u76F8\u5173\u6280\u672F\u6</span></span><br><span class="line"><span class="string">587\u7AE0&quot;</span>;<span class="comment">//每日更新 Java 相关技术文章</span></span><br><span class="line"><span class="type">String</span> <span class="variable">hollis</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">StringBuilder</span>()).append(wechat).append(<span class="string">&quot;,&quot;</span>).append(<span class="type">int</span></span><br><span class="line">roduce).toString();</span><br></pre></td></tr></table></figure><p>通过查看反编译以后的代码，我们可以发现，原来字符串常量在拼接过程中，是将String 转成了 StringBuilder 后，使用其 append 方法进行处理的。那 么 也 就 是 说 ， J a v a 中 的 + 对 字 符 串 的 拼 接 ， 其 实 现 原 理 是 使 用StringBuilder.append。</p><h3 id="concat-是如何实现的"><a href="#concat-是如何实现的" class="headerlink" title="concat 是如何实现的"></a>concat 是如何实现的</h3><p>我们再来看一下 concat 方法的源代码，看一下这个方法又是如何实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">concat</span><span class="params">(String str)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">otherLen</span> <span class="operator">=</span> str.length();</span><br><span class="line"><span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> value.length;</span><br><span class="line"><span class="type">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class="line">str.getChars(buf, len);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码首先创建了一个字符数组，长度是已有字符串和待拼接字符串的长度之和，再把两个字符串的值复制到新的字符数组中，并使用这个字符数组创建一个新的 String 对象并返回。通过源码我们也可以看到，经过 concat 方法，其实是 new 了一个新的 String，这也就呼应到前面我们说的字符串的不变性问题上了。</p><h3 id="StringBuffer-和-StringBuilder"><a href="#StringBuffer-和-StringBuilder" class="headerlink" title="StringBuffer 和 StringBuilder"></a>StringBuffer 和 StringBuilder</h3><p>接下来我们看看 StringBuffer 和 StringBuilder 的实现原理。</p><p>和 String 类类似，StringBuilder 类也封装了一个字符数组，定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] value;</span><br></pre></td></tr></table></figure><p>与 String 不同的是，它并不是 final 的，所以他是可以修改的。另外，与 String 不同，字符数组中不一定所有位置都已经被使用，它有一个实例变量，表示数组中已经使用的字符个数，定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> count;</span><br></pre></td></tr></table></figure><p>其 append 源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">super</span>.append(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类继承了 AbstractStringBuilder 类，看下其 append 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> AbstractStringBuilder <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (str == <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> appendNull();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> str.length();</span><br><span class="line"></span><br><span class="line">ensureCapacityInternal(count + len);</span><br><span class="line"></span><br><span class="line">str.getChars(<span class="number">0</span>, len, value, count);</span><br><span class="line"></span><br><span class="line">count += len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>append 会直接拷贝字符到内部的字符数组中，如果字符数组长度不够，会进行扩展。</p><p>StringBuffer 和 StringBuilder 类似，最大的区别就是 StringBuffer 是线程安全的，</p><p>看一下 StringBuffer 的 append 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line"></span><br><span class="line">toStringCache = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">super</span>.append(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法使用 synchronized 进行声明，说明是一个线程安全的方法。而 StringBuilder则不是线程安全的。</p><h3 id="StringUtils-join-是如何实现的"><a href="#StringUtils-join-是如何实现的" class="headerlink" title="StringUtils.join 是如何实现的"></a>StringUtils.join 是如何实现的</h3><p>通过查看 StringUtils.join 的源代码，我们可以发现，其实他也是通过 StringBuilder来实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">join</span><span class="params">(<span class="keyword">final</span> Object[] array, String separator, <span class="keyword">final</span> <span class="type">int</span></span></span><br><span class="line"><span class="params">startIndex, <span class="keyword">final</span> <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (array == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (separator == <span class="literal">null</span>) &#123;</span><br><span class="line">separator = EMPTY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// endIndex - startIndex &gt; 0: Len = NofStrings *(len(firstString) + len(s</span></span><br><span class="line">eparator))</span><br><span class="line"><span class="comment">// (Assuming that all Strings are roughly equally long)</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">noOfItems</span> <span class="operator">=</span> endIndex - startIndex;</span><br><span class="line"><span class="keyword">if</span> (noOfItems &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(noOfItems * <span class="number">16</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; endIndex; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; startIndex) &#123;</span><br><span class="line">buf.append(separator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (array[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">buf.append(array[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> buf.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效率比较"><a href="#效率比较" class="headerlink" title="效率比较"></a>效率比较</h3><p>既然有这么多种字符串拼接的方法，那么到底哪一种效率最高呢？我们来简单对比一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">//这里是初始字符串定义</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line"><span class="comment">//这里是字符串拼接代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">t2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;cost:&quot;</span> + (t2 - t1));</span><br></pre></td></tr></table></figure><p>我们使用形如以上形式的代码，分别测试下五种字符串拼接代码的运行时间。得到结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+cost:<span class="number">5119</span></span><br><span class="line">StringBuilder cost:<span class="number">3</span></span><br><span class="line">StringBuffer cost:<span class="number">4</span></span><br><span class="line">concat cost:<span class="number">3623</span></span><br><span class="line">StringUtils.join cost:<span class="number">25726</span></span><br></pre></td></tr></table></figure><p>从结果可以看出，用时从短到长的对比是：</p><blockquote><p>StringBuilder&lt;StringBuffer&lt;concat&lt;+&lt;StringUtils.join</p></blockquote><p>StringBuffer 在 StringBuilder 的基础上，做了同步处理，所以在耗时上会相对多一些。</p><p>StringUtils.join 也是使用了 StringBuilder，并且其中还是有很多其他操作，所以耗时</p><p>较长，这个也容易理解。其实 StringUtils.join 更擅长处理字符串数组或者列表的拼接。</p><p>那么问题来了，前面我们分析过，其实使用+拼接字符串的实现原理也是使用的</p><p>StringBuilder，那为什么结果相差这么多，高达 1000 多倍呢？我们再把以下代码反编译下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hollis&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(i);</span><br><span class="line">str += s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">t2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;+ cost:&quot;</span> + (t2 - t1));</span><br></pre></td></tr></table></figure><p>反编译后代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hollis&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(i);</span><br><span class="line">str = (<span class="keyword">new</span> <span class="title class_">StringBuilder</span>()).append(str).append(s).toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">t2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println((<span class="keyword">new</span> <span class="title class_">StringBuilder</span>()).append(<span class="string">&quot;+ cost:&quot;</span>).append(t2 - t1).to</span><br><span class="line"><span class="title function_">String</span><span class="params">()</span>);</span><br></pre></td></tr></table></figure><p>我们可以看到反编译后的代码，在 for 循环中，每次都是 new 了一个 StringBuilder，然后再把 String 转成 StringBuilder，再进行 append。而频繁的新建对象当然要耗费很多时间了，不仅仅会耗费时间，频繁的创建对象，还会造成内存资源的浪费。所以， Java 开发手册建议：循环体内，字符串的连接方式，使用 StringBuilder 的append 方法进行扩展。而不要使用+。 </p>]]></content>
    
    
    <summary type="html">java基础</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringBoot基础</title>
    <link href="http://example.com/2022/11/29/SpringBoot/"/>
    <id>http://example.com/2022/11/29/SpringBoot/</id>
    <published>2022-11-29T07:00:00.000Z</published>
    <updated>2022-11-29T09:02:07.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-依赖管理特性"><a href="#SpringBoot-依赖管理特性" class="headerlink" title="SpringBoot-依赖管理特性"></a>SpringBoot-依赖管理特性</h1><ul><li><p>父项目做依赖管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">依赖管理</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">上面项目的父项目如下：</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">它几乎声明了所有开发中常用的依赖的版本号，自动版本仲裁机制</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>开发导入starter场景启动器</li></ul><p>​         1.见到很多 spring-boot-starter-* ： *就某种场景</p><p>​         2.只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</p><pre><code>     3.更多SpringBoot所有支持的场景      4.见到的 *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</code></pre></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">所有场景启动器最底层的依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无需关注版本号，自动版本仲裁</p><ol><li>引入依赖默认都可以不写版本</li><li>引入非版本仲裁的jar，要写版本号。</li></ol><p>可以修改默认版本号</p><ol><li>查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。</li><li>在当前项目里面重写配置，如下面的代码。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="SpringBoot-自动配置特性"><a href="#SpringBoot-自动配置特性" class="headerlink" title="SpringBoot-自动配置特性"></a>SpringBoot-自动配置特性</h1><p>自动配好Tomcat</p><ul><li>引入Tomcat依赖。</li><li>配置Tomcat</li></ul><p>自动配好SpringMVC</p><ul><li>引入SpringMVC全套组件</li><li>自动配好SpringMVC常用组件（功能）</li></ul><p>自动配好Web常见功能，如：字符编码问题</p><ul><li>SpringBoot帮我们配置好了所有web开发的常见场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">    String[] names = run.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的包结构</p><ul><li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li><li>无需以前的包扫描配置</li><li>想要改变扫描路径<ul><li>@SpringBootApplication(scanBasePackages=“com.lun”)</li><li>@ComponentScan 指定扫描路径</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">等同于</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.lun&quot;)</span></span><br></pre></td></tr></table></figure><p>各种配置拥有默认值</p><ul><li>默认配置最终都是映射到某个类上，如：<code>MultipartProperties</code></li><li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li></ul><p>按需加载所有自动配置项</p><ul><li>非常多的starter</li><li>引入了哪些场景这个场景的自动配置才会开启</li><li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li></ul><h1 id="底层注解-Configuration详解"><a href="#底层注解-Configuration详解" class="headerlink" title="底层注解-@Configuration详解"></a>底层注解-@Configuration详解</h1><ul><li>基本使用<ul><li>Full模式与Lite模式</li><li>示例</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、配置类里面使用<span class="doctag">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class="line"><span class="comment"> * 2、配置类本身也是组件</span></span><br><span class="line"><span class="comment"> * 3、proxyBeanMethods：代理bean的方法</span></span><br><span class="line"><span class="comment"> *      Full(proxyBeanMethods = true)（保证每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是单实例的）（默认）</span></span><br><span class="line"><span class="comment"> *      Lite(proxyBeanMethods = false)（每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是新创建的）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">tomcatPet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@Configuration测试代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.boot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、从容器中获取组件</span></span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom01</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom02</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;组件：&quot;</span>+(tom01 == tom02));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、com.atguigu.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span></span><br><span class="line">        <span class="type">MyConfig</span> <span class="variable">bean</span> <span class="operator">=</span> run.getBean(MyConfig.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。</span></span><br><span class="line">        <span class="comment">//保持组件单实例</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> bean.user01();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> bean.user01();</span><br><span class="line">        System.out.println(user == user1);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user01</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;user01&quot;</span>, User.class);</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用户的宠物：&quot;</span>+(user01.getPet() == tom));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最佳实战</p><ul><li>配置 类组件之间<strong>无依赖关系</strong>用Lite模式加速容器启动过程，减少判断</li><li>配置 类组件之间<strong>有依赖关系</strong>，方法会被调用得到之前单实例组件，用Full模式（默认）</li></ul><h1 id="底层注解-Import导入组件"><a href="#底层注解-Import导入组件" class="headerlink" title="底层注解-@Import导入组件"></a>底层注解-@Import导入组件</h1><blockquote><ul><li><p>@Bean、@Component、@Controller、@Service、@Repository，它们是Spring的基本标签，在Spring Boot中并未改变它们原来的功能。</p></li><li><p>@ComponentScan 在07、基础入门-SpringBoot-自动配置特性有用例。</p></li><li><p>@Import({User.class, DBHelper.class})给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1、返回我们IOC容器</span></span><br><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5、获取组件</span></span><br><span class="line">String[] beanNamesForType = run.getBeanNamesForType(User.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s : beanNamesForType) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">DBHelper</span> <span class="variable">bean1</span> <span class="operator">=</span> run.getBean(DBHelper.class);</span><br><span class="line">System.out.println(bean1);</span><br></pre></td></tr></table></figure><h1 id="底层注解-Conditional条件装配"><a href="#底层注解-Conditional条件装配" class="headerlink" title="底层注解-@Conditional条件装配"></a>底层注解-@Conditional条件装配</h1><p><strong>条件装配：满足Conditional指定的条件，则进行组件注入</strong></p><p><img src="https://img-blog.csdnimg.cn/20210205005453173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>用@ConditionalOnMissingBean举例说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;tom&quot;)</span><span class="comment">//没有tom名字的Bean时，MyConfig类的Bean才能生效。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom22&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">tomcatPet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">    String[] names = run.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">tom</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中Tom组件：&quot;</span>+tom);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">user01</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;user01&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中user01组件：&quot;</span>+user01);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">tom22</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;tom22&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中tom22组件：&quot;</span>+tom22);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="底层注解-ImportResource导入Spring配置文件"><a href="#底层注解-ImportResource导入Spring配置文件" class="headerlink" title="底层注解-@ImportResource导入Spring配置文件"></a>底层注解-@ImportResource导入Spring配置文件</h1><p>比如，公司使用bean.xml文件生成配置bean，然而你为了省事，想继续复用bean.xml，@ImportResource粉墨登场。</p><p>bean.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&quot;&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lun.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hehe&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lun.boot.bean.Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tomcat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">haha</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hehe</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;haha：&quot;</span>+haha);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">&quot;hehe：&quot;</span>+hehe);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="底层注解-ConfigurationProperties配置绑定"><a href="#底层注解-ConfigurationProperties配置绑定" class="headerlink" title="底层注解-@ConfigurationProperties配置绑定"></a>底层注解-@ConfigurationProperties配置绑定</h1><p>如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用</p><p>传统方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getProperties</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line">         <span class="type">Properties</span> <span class="variable">pps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">         pps.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;a.properties&quot;</span>));</span><br><span class="line">         <span class="type">Enumeration</span> <span class="variable">enum1</span> <span class="operator">=</span> pps.propertyNames();<span class="comment">//得到配置文件的名字</span></span><br><span class="line">         <span class="keyword">while</span>(enum1.hasMoreElements()) &#123;</span><br><span class="line">             <span class="type">String</span> <span class="variable">strKey</span> <span class="operator">=</span> (String) enum1.nextElement();</span><br><span class="line">             <span class="type">String</span> <span class="variable">strValue</span> <span class="operator">=</span> pps.getProperty(strKey);</span><br><span class="line">             System.out.println(strKey + <span class="string">&quot;=&quot;</span> + strValue);</span><br><span class="line">             <span class="comment">//封装到JavaBean。</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Spring Boot一种配置配置绑定：</p><p>@ConfigurationProperties + @Component</p><p>假设有配置文件application.properties</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mycar.brand=BYD</span></span><br><span class="line"><span class="string">mycar.price=100000</span></span><br></pre></td></tr></table></figure><p>只有在容器中的组件，才会拥有SpringBoot提供的强大功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Boot另一种配置配置绑定：(SpringBoot采用这种方式配置文件)</p><p>@EnableConfigurationProperties + @ConfigurationProperties</p><ol><li>开启Car配置绑定功能</li><li>把这个Car这个组件自动注册到容器中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="自动配置【源码分析】-自动包规则原理"><a href="#自动配置【源码分析】-自动包规则原理" class="headerlink" title="自动配置【源码分析】-自动包规则原理"></a>自动配置【源码分析】-自动包规则原理</h1><p>Spring Boot应用的启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析下<code>@SpringBootApplication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重点分析<code>@SpringBootConfiguration</code>，<code>@EnableAutoConfiguration</code>，<code>@ComponentScan</code>。</p><h2 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Configuration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>@Configuration</code>代表当前是一个配置类。</p><h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p>指定扫描哪些Spring注解。</p><p>@ComponentScan</p><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点分析<code>@AutoConfigurationPackage</code>，<code>@Import(AutoConfigurationImportSelector.class)</code>。</p><h2 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h2><p>标签名直译为：自动配置包，指定了默认的包规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span><span class="comment">//给容器中导入一个组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;</span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>利用Registrar给容器中导入一系列组件</li><li>将指定的一个包下的所有组件导入进MainApplication所在包下。</li></ol><h1 id="自动配置【源码分析】-初始加载自动配置类"><a href="#自动配置【源码分析】-初始加载自动配置类" class="headerlink" title="自动配置【源码分析】-初始加载自动配置类"></a>自动配置【源码分析】-初始加载自动配置类</h1><h2 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import(AutoConfigurationImportSelector.class)"></a>@Import(AutoConfigurationImportSelector.class)</h2><ul><li><p>利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件</p></li><li><p>调用List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类</p></li><li><p>利用工厂加载 Map&lt;String, List<String>&gt; loadSpringFactories(@Nullable ClassLoader classLoader);得到所有的组件</p></li><li><p>从META-INF/spring.factories位置来加载一个文件。</p><pre><code>                 默认扫描我们当前系统里面所有`META-INF/spring.factories`位置的文件                </code></pre></li></ul><p>​                    <code>spring-boot-autoconfigure-2.3.4.RELEASE.jar</code>包里面也有<code>META-INF/spring.factories</code></p><p><img src="https://img-blog.csdnimg.cn/20210205005536620.png#pic_center" alt="img"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件里面写死了spring-boot一启动就要给容器中加载的所有配置类</span></span><br><span class="line"><span class="comment"># spring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories</span></span><br><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>虽然我们127个场景的所有自动配置启动的时候默认全部加载，但是<code>xxxxAutoConfiguration</code>按照条件装配规则（<code>@Conditional</code>），最终会按需配置。</p><p>如<code>AopAutoConfiguration</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.aop&quot;,</span></span><br><span class="line"><span class="meta">    name = &quot;auto&quot;,</span></span><br><span class="line"><span class="meta">    havingValue = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">    matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AopAutoConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="自动配置【源码分析】-自动配置流程"><a href="#自动配置【源码分析】-自动配置流程" class="headerlink" title="自动配置【源码分析】-自动配置流程"></a>自动配置【源码分析】-自动配置流程</h1><p>以<code>DispatcherServletAutoConfiguration</code>的内部类<code>DispatcherServletConfiguration</code>为例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="comment">//容器中有这个类型组件</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class="comment">//容器中没有这个名字 multipartResolver 的组件</span></span><br><span class="line"><span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> &#123;</span><br><span class="line"><span class="comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class="line"><span class="comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class="line"><span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line"><span class="keyword">return</span> resolver;<span class="comment">//给容器中加入了文件上传解析器；</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SpringBoot默认会在底层配好所有的组件，但是<strong>如果用户自己配置了以用户的优先</strong>。</p><p>总结：</p><ul><li>SpringBoot先加载所有的自动配置类 xxxxxAutoConfiguration</li><li>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。（xxxxProperties里面读取，xxxProperties和配置文件进行了绑定）</li><li>生效的配置类就会给容器中装配很多组件</li><li>只要容器中有这些组件，相当于这些功能就有了</li><li>定制化配置</li></ul><p>​            用户直接自己@Bean替换底层的组件<br>​            用户去看这个组件是获取的配置文件什么值就去修改。<br><strong>xxxxxAutoConfiguration —&gt; 组件 —&gt; xxxxProperties里面拿值 —-&gt; application.properties</strong></p><h1 id="SpringBoot应用如何编写"><a href="#SpringBoot应用如何编写" class="headerlink" title="SpringBoot应用如何编写"></a>SpringBoot应用如何编写</h1><p>引入场景依赖</p><ul><li><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">官方文档</a></p></li><li><p>查看自动配置了哪些（选做）</p><ul><li>自己分析，引入场景对应的自动配置一般都生效了</li><li>配置文件中debug=true开启自动配置报告。<ul><li>Negative（不生效）</li><li>Positive（生效）</li></ul></li></ul></li></ul><p>是否需要修改</p><ul><li>参照文档修改配置项<ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties">官方文档</a></li><li>自己分析。xxxxProperties绑定了配置文件的哪些。</li></ul></li><li>自定义加入或者替换组件<ul><li>@Bean、@Component…</li></ul></li><li>自定义器 XXXXXCustomizer；</li></ul><h1 id="最佳实践-Lombok简化开发"><a href="#最佳实践-Lombok简化开发" class="headerlink" title="最佳实践-Lombok简化开发"></a>最佳实践-Lombok简化开发</h1><p>Lombok用标签方式代替构造器、getter/setter、toString()等鸡肋代码。</p><p>spring boot已经管理Lombok。引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>IDEA中File-&gt;Settings-&gt;Plugins，搜索安装Lombok插件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name,Integer age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化日志开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handle01</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求进来了....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot 2!&quot;</span>+<span class="string">&quot;你好：&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最佳实践-dev-tools"><a href="#最佳实践-dev-tools" class="headerlink" title="最佳实践-dev-tools"></a>最佳实践-dev-tools</h1><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.devtools">官方文档</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在IDEA中，项目或者页面修改以后：Ctrl+F9。</p><h1 id="配置文件-yaml的用法"><a href="#配置文件-yaml的用法" class="headerlink" title="配置文件-yaml的用法"></a>配置文件-yaml的用法</h1><p>同以前的properties用法</p><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：“Yet Another Markup Language”（仍是一种标记语言）。</p><p><strong>非常适合用来做以数据为中心的配置文件</strong>。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>key: value；kv之间有空格</li><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li><li>字符串无需加引号，如果要加，单引号’’、双引号””表示字符串内容会被 转义、不转义</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></figure><ul><li>对象：键值对的集合。map、hash、set、object</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#行内写法：  </span></span><br><span class="line"></span><br><span class="line"><span class="attr">k:</span> &#123;<span class="string">k1:v1</span>,<span class="string">k2:v2</span>,<span class="string">k3:v3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">k3:</span> <span class="string">v3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>数组：一组按次序排列的值。array、list、queue</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#行内写法：  </span></span><br><span class="line"></span><br><span class="line"><span class="attr">k:</span> [<span class="string">v1</span>,<span class="string">v2</span>,<span class="string">v3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure><h1 id="配置文件-自定义类绑定的配置提示"><a href="#配置文件-自定义类绑定的配置提示" class="headerlink" title="配置文件-自定义类绑定的配置提示"></a>配置文件-自定义类绑定的配置提示</h1><blockquote><p>You can easily generate your own configuration metadata file from items annotated with @ConfigurationProperties by using the spring-boot-configuration-processor jar. The jar includes a Java annotation processor which is invoked as your project is compiled.——link</p></blockquote><p>自定义的类和配置文件绑定一般没有提示。若要提示，添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 下面插件作用是工程打包时，不将spring-boot-configuration-processor打进包内，让其只在编码的时候有用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="web场景-web开发简介"><a href="#web场景-web开发简介" class="headerlink" title="web场景-web开发简介"></a>web场景-web开发简介</h1><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p><p>The auto-configuration adds the following features on top of Spring’s defaults:</p><p>Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.</p><p>​           内容协商视图解析器和BeanName视图解析器<br>Support for serving static resources, including support for WebJars (covered later in this document)).</p><p>​           静态资源（包括webjars）<br>Automatic registration of Converter, GenericConverter, and Formatter beans.</p><p>​            自动注册 Converter，GenericConverter，Formatter<br>Support for HttpMessageConverters (covered later in this document).</p><p>​            支持 HttpMessageConverters （后来我们配合内容协商理解原理）<br>Automatic registration of MessageCodesResolver (covered later in this document).</p><p>​            自动注册 MessageCodesResolver （国际化用）<br>Static index.html support.</p><p>​            静态index.html 页支持<br>Custom Favicon support (covered later in this document).</p><p>​            自定义 Favicon<br>Automatic use of a ConfigurableWebBindingInitializer bean (covered later in this document).</p><p>​            自动使用 ConfigurableWebBindingInitializer ，（DataBinder负责将请求数据绑定到JavaBean上）</p><blockquote><p>If you want to keep those Spring Boot MVC customizations and make more MVC customizations (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc.</p><p>不用@EnableWebMvc注解。使用 @Configuration + WebMvcConfigurer 自定义规则</p></blockquote><blockquote><p>If you want to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, and still keep the Spring Boot MVC customizations, you can declare a bean of type WebMvcRegistrations and use it to provide custom instances of those components.</p><p>声明 WebMvcRegistrations 改变默认底层组件</p></blockquote><blockquote><p>If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc, or alternatively add your own @Configuration-annotated DelegatingWebMvcConfiguration as described in the Javadoc of @EnableWebMvc.</p><p>使用 @EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC</p></blockquote><h1 id="web场景-静态资源规则与定制化"><a href="#web场景-静态资源规则与定制化" class="headerlink" title="web场景-静态资源规则与定制化"></a>web场景-静态资源规则与定制化</h1><h2 id="静态资源目录"><a href="#静态资源目录" class="headerlink" title="静态资源目录"></a>静态资源目录</h2><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p><p>访问 ： 当前项目根路径/ + 静态资源名</p><p>原理： 静态映射/**。</p><p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面。</p><p>也可以改变默认的静态资源路径，<code>/static</code>，<code>/public</code>,<code>/resources</code>, <code>/META-INF/resources</code>失效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure><h2 id="静态资源访问前缀"><a href="#静态资源访问前缀" class="headerlink" title="静态资源访问前缀"></a>静态资源访问前缀</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure><p>当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找</p><h2 id="webjar"><a href="#webjar" class="headerlink" title="webjar"></a>webjar</h2><p>可用jar方式添加css，js等资源文件，</p><p><a href="https://www.webjars.org/">https://www.webjars.org/</a></p><p>例如，添加jquery</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/<strong>jquery/3.5.1/jquery.js</strong></a> 后面地址要按照依赖里面的包路径</p><h1 id="web场景-welcome与favicon功能"><a href="#web场景-welcome与favicon功能" class="headerlink" title="web场景-welcome与favicon功能"></a>web场景-welcome与favicon功能</h1><p><a href="https://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-welcome-page">官方文档</a></p><h2 id="欢迎页支持"><a href="#欢迎页支持" class="headerlink" title="欢迎页支持"></a>欢迎页支持</h2><ul><li>静态资源路径下 index.html。<ul><li>可以配置静态资源路径</li><li>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致welcome page功能失效</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure><ul><li>controller能处理/index。</li></ul><h2 id="自定义Favicon"><a href="#自定义Favicon" class="headerlink" title="自定义Favicon"></a>自定义Favicon</h2><p>指网页标签上的小图标。</p><p>favicon.ico 放在静态资源目录下即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span></span><br></pre></td></tr></table></figure><h1 id="web场景-【源码分析】-静态资源原理"><a href="#web场景-【源码分析】-静态资源原理" class="headerlink" title="web场景-【源码分析】-静态资源原理"></a>web场景-【源码分析】-静态资源原理</h1><ul><li>SpringBoot启动默认加载 xxxAutoConfiguration 类（自动配置类）</li><li>SpringMVC功能的自动配置类<code>WebMvcAutoConfiguration</code>，生效</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>给容器中配置的内容：<ul><li>配置文件的相关属性的绑定：WebMvcProperties==<strong>spring.mvc</strong>、</li><li>ResourceProperties==<strong>spring.resources</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置类只有一个有参构造器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有参构造器所有参数的值都会从容器中确定,容器内部必须与参数类型的bea对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">WebMvcAutoConfigurationAdapter</span><span class="params">(WebProperties webProperties, WebMvcProperties mvcProperties,</span></span><br><span class="line"><span class="params">ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span><br><span class="line"><span class="params">ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span><br><span class="line"><span class="params">ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span><br><span class="line"><span class="params">ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.mvcProperties = mvcProperties;</span><br><span class="line"><span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line"><span class="built_in">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line"><span class="built_in">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line"><span class="built_in">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line"><span class="built_in">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line"><span class="built_in">this</span>.mvcProperties.checkConfiguration();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</li><li>WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</li><li>ListableBeanFactory beanFactory Spring的beanFactory</li><li>HttpMessageConverters 找到所有的HttpMessageConverters</li><li>ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。</li><li>DispatcherServletPath</li><li>ServletRegistrationBean 给应用注册Servlet、Filter…</li></ul><p><strong>资源处理的默认规则</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title class_">ResourceLoaderAware</span> &#123;</span><br><span class="line">        ...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.addResourceHandlers(registry);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">addResourceHandler(registry, <span class="built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">registration.addResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line"><span class="keyword">if</span> (servletContext != <span class="literal">null</span>) &#123;</span><br><span class="line">registration.addResourceLocations(<span class="keyword">new</span> <span class="title class_">ServletContextResource</span>(servletContext, SERVLET_LOCATION));</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上述代码，我们可以同过配置禁止所有静态资源规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="comment">#禁用所有静态资源规则</span></span><br></pre></td></tr></table></figure><p>静态资源规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span></span><br><span class="line"><span class="comment">     * /resources/, /static/, /public/].</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="请求处理-【源码分析】-Rest映射及源码解析"><a href="#请求处理-【源码分析】-Rest映射及源码解析" class="headerlink" title="请求处理-【源码分析】-Rest映射及源码解析"></a>请求处理-【源码分析】-Rest映射及源码解析</h1><h2 id="请求映射"><a href="#请求映射" class="headerlink" title="请求映射"></a>请求映射</h2><ul><li>@xxxMapping;<ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapping</li></ul></li></ul><p>Rest风格支持（使用<strong>HTTP</strong>请求方式动词来表示对资源的操作）</p><ul><li><p>以前：</p><ul><li>/getUser 获取用户</li><li>/deleteUser 删除用户</li><li>/editUser 修改用户</li><li>/saveUser保存用户</li></ul></li><li><ul><li>现在： /user<ul><li>GET-获取用户</li><li>DELETE-删除用户</li><li>PUT-修改用户</li><li>POST-保存用户</li></ul></li><li>核心Filter；HiddenHttpMethodFilter</li></ul></li><li><p><strong>用法</strong></p><ul><li>开启页面表单的Rest功能</li><li>页面 form的属性method=post，隐藏域 _method=put、delete等（如果直接get或post，无需隐藏域）</li><li>编写请求映射</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>   <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-GET提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-POST提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-DELETE 提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-PUT提交&quot;</span><span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;GET-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;POST-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">putUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;PUT-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;DELETE-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Rest原理（表单提交要使用REST的时候）</p><ul><li>表单提交会带上<code>\_method=PUT</code></li><li>请求过来被<code>HiddenHttpMethodFilter</code>拦截</li></ul><p>​        请求是否正常，并且是POST</p><ul><li><p>获取到<code>\_method</code>的值。</p></li><li><p>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></p></li><li><p><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></p></li><li><p><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用requesWrapper的。</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiddenHttpMethodFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; ALLOWED_METHODS =</span><br><span class="line">Collections.unmodifiableList(Arrays.asList(HttpMethod.PUT.name(),</span><br><span class="line">HttpMethod.DELETE.name(), HttpMethod.PATCH.name()));</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Default method parameter: &#123;<span class="doctag">@code</span> _method&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_METHOD_PARAM</span> <span class="operator">=</span> <span class="string">&quot;_method&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">methodParam</span> <span class="operator">=</span> DEFAULT_METHOD_PARAM;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set the parameter name to look for HTTP methods.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #DEFAULT_METHOD_PARAM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMethodParam</span><span class="params">(String methodParam)</span> &#123;</span><br><span class="line">Assert.hasText(methodParam, <span class="string">&quot;&#x27;methodParam&#x27; must not be empty&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.methodParam = methodParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">requestToUse</span> <span class="operator">=</span> request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">paramValue</span> <span class="operator">=</span> request.getParameter(<span class="built_in">this</span>.methodParam);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line"><span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class="line">requestToUse = <span class="keyword">new</span> <span class="title class_">HttpMethodRequestWrapper</span>(request, method);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filterChain.doFilter(requestToUse, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple &#123;<span class="doctag">@link</span> HttpServletRequest&#125; wrapper that returns the supplied method for</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> HttpServletRequest#getMethod()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HttpMethodRequestWrapper</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HttpMethodRequestWrapper</span><span class="params">(HttpServletRequest request, String method)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(request);</span><br><span class="line"><span class="built_in">this</span>.method = method;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMethod</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.method;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Rest使用客户端工具。<ul><li>如PostMan可直接发送put、delete等方式请求。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">SpringBoot</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Scapy</title>
    <link href="http://example.com/2022/11/16/scapy/"/>
    <id>http://example.com/2022/11/16/scapy/</id>
    <published>2022-11-16T08:00:00.000Z</published>
    <updated>2022-11-16T08:23:33.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载和安装Scapy"><a href="#下载和安装Scapy" class="headerlink" title="下载和安装Scapy"></a>下载和安装Scapy</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install scapy #Anconada下载</span><br><span class="line">pip install scapy #pip下载</span><br></pre></td></tr></table></figure><h1 id="开始使用Scapy"><a href="#开始使用Scapy" class="headerlink" title="开始使用Scapy"></a>开始使用Scapy</h1><p>在window是在打开cmd命令并且确保自己有管理员权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scapy</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221103082635.png?raw=true" alt="blog_images20221103082635.png"></p><p>scapy每一个协议都是一个类，所以当我们调用这些协议的时候我们必须对协议进行实例化才可以进行调用。</p><p>执行explore()命令查看scapy里面的类</p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images331017acd6aad38d4c713ec7a94001a.jpg?raw=true" alt="blog_images331017acd6aad38d4c713ec7a94001a.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>explore()</span><br><span class="line">Packets contained <span class="keyword">in</span> scapy.layers.inet:</span><br><span class="line">Class                     |Name</span><br><span class="line">--------------------------|-------------------------------------------</span><br><span class="line">ICMP                      |ICMP</span><br><span class="line">ICMPerror                 |ICMP <span class="keyword">in</span> ICMP</span><br><span class="line">IP                        |IP</span><br><span class="line">IPOption                  |IP Option</span><br><span class="line">IPOption_Address_Extension|IP Option Address Extension</span><br><span class="line">IPOption_EOL              |IP Option End of Options <span class="type">List</span></span><br><span class="line">IPOption_LSRR             |IP Option Loose Source <span class="keyword">and</span> Record Route</span><br><span class="line">IPOption_MTU_Probe        |IP Option MTU Probe</span><br><span class="line">IPOption_MTU_Reply        |IP Option MTU Reply</span><br><span class="line">IPOption_NOP              |IP Option No Operation</span><br><span class="line">IPOption_RR               |IP Option Record Route</span><br><span class="line">IPOption_Router_Alert     |IP Option Router Alert</span><br><span class="line">IPOption_SDBM             |IP Option Selective Directed Broadcast Mode</span><br><span class="line">IPOption_SSRR             |IP Option Strict Source <span class="keyword">and</span> Record Route</span><br><span class="line">IPOption_Security         |IP Option Security</span><br><span class="line">IPOption_Stream_Id        |IP Option Stream ID</span><br><span class="line">IPOption_Timestamp        |IP Option Timestamp</span><br><span class="line">IPOption_Traceroute       |IP Option Traceroute</span><br><span class="line">IPerror                   |IP <span class="keyword">in</span> ICMP</span><br><span class="line">TCP                       |TCP</span><br><span class="line">TCPerror                  |TCP <span class="keyword">in</span> ICMP</span><br><span class="line">UDP                       |UDP</span><br><span class="line">UDPerror                  |UDP <span class="keyword">in</span> ICMP</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>各个协议默认值</strong></p><p>数据链路层：</p><p>Ether()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dst        : DestMACField                        = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">src        : SourceMACField                      = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line"><span class="built_in">type</span>       : XShortEnumField                     = (<span class="string">&#x27;36864&#x27;</span>)</span><br></pre></td></tr></table></figure><p>网络层：</p><p>IP()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">version    : BitField  (<span class="number">4</span> bits)                  = (<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">ihl        : BitField  (<span class="number">4</span> bits)                  = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">tos        : XByteField                          = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">len</span>        : ShortField                          = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line"><span class="built_in">id</span>         : ShortField                          = (<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">flags      : FlagsField                          = (<span class="string">&#x27;&lt;Flag 0 ()&gt;&#x27;</span>)</span><br><span class="line">frag       : BitField  (<span class="number">13</span> bits)                 = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">ttl        : ByteField                           = (<span class="string">&#x27;64&#x27;</span>)</span><br><span class="line">proto      : ByteEnumField                       = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">chksum     : XShortField                         = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">src        : SourceIPField                       = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">dst        : DestIPField                         = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">options    : PacketListField                     = (<span class="string">&#x27;[]&#x27;</span>)</span><br></pre></td></tr></table></figure><p>ARP()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hwtype     : XShortField                         = (<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">ptype      : XShortEnumField                     = (<span class="string">&#x27;2048&#x27;</span>)</span><br><span class="line">hwlen      : FieldLenField                       = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">plen       : FieldLenField                       = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">op         : ShortEnumField                      = (<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">hwsrc      : MultipleTypeField (SourceMACField, StrFixedLenField) = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">psrc       : MultipleTypeField (SourceIPField, SourceIP6Field, StrFixedLenField) = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">hwdst      : MultipleTypeField (MACField, StrFixedLenField) = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">pdst       : MultipleTypeField (IPField, IP6Field, StrFixedLenField) = (<span class="string">&#x27;None&#x27;</span>)</span><br></pre></td></tr></table></figure><p>ICMP()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>       : ByteEnumField                       = (<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">code       : MultiEnumField (Depends on <span class="number">8</span>)       = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">chksum     : XShortField                         = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line"><span class="built_in">id</span>         : XShortField (Cond)                  = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">seq        : XShortField (Cond)                  = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">ts_ori     : ICMPTimeStampField (Cond)           = (<span class="string">&#x27;22263044&#x27;</span>)</span><br><span class="line">ts_rx      : ICMPTimeStampField (Cond)           = (<span class="string">&#x27;22263044&#x27;</span>)</span><br><span class="line">ts_tx      : ICMPTimeStampField (Cond)           = (<span class="string">&#x27;22263044&#x27;</span>)</span><br><span class="line">gw         : IPField (Cond)                      = (<span class="string">&quot;&#x27;0.0.0.0&#x27;&quot;</span>)</span><br><span class="line">ptr        : ByteField (Cond)                    = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">reserved   : ByteField (Cond)                    = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">length     : ByteField (Cond)                    = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">addr_mask  : IPField (Cond)                      = (<span class="string">&quot;&#x27;0.0.0.0&#x27;&quot;</span>)</span><br><span class="line">nexthopmtu : ShortField (Cond)                   = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">unused     : MultipleTypeField (ShortField, IntField, StrFixedLenField) = (<span class="string">&quot;b&#x27;&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure><p>传输层：</p><p>TCP()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sport      : ShortEnumField                      = (<span class="string">&#x27;20&#x27;</span>)</span><br><span class="line">dport      : ShortEnumField                      = (<span class="string">&#x27;80&#x27;</span>)</span><br><span class="line">seq        : IntField                            = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">ack        : IntField                            = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">dataofs    : BitField  (<span class="number">4</span> bits)                  = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">reserved   : BitField  (<span class="number">3</span> bits)                  = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">flags      : FlagsField                          = (<span class="string">&#x27;&lt;Flag 2 (S)&gt;&#x27;</span>)</span><br><span class="line">window     : ShortField                          = (<span class="string">&#x27;8192&#x27;</span>)</span><br><span class="line">chksum     : XShortField                         = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">urgptr     : ShortField                          = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">options    : TCPOptionsField                     = (<span class="string">&quot;b&#x27;&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure><p>UDP()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sport      : ShortEnumField                      = (<span class="string">&#x27;53&#x27;</span>)</span><br><span class="line">dport      : ShortEnumField                      = (<span class="string">&#x27;53&#x27;</span>)</span><br><span class="line"><span class="built_in">len</span>        : ShortField                          = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">chksum     : XShortField                         = (<span class="string">&#x27;None&#x27;</span>)</span><br></pre></td></tr></table></figure><p>应用层：</p><p>DHCP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">options    : DHCPOptionsField                    = (<span class="string">&quot;b&#x27;&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>scapy所有函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">IPID_count          : Identify IP <span class="built_in">id</span> values classes <span class="keyword">in</span> a <span class="built_in">list</span> of packets</span><br><span class="line">arpcachepoison      : Poison target<span class="string">&#x27;s cache with (your MAC,victim&#x27;</span>s IP) couple</span><br><span class="line">arping              : Send ARP who-has requests to determine which hosts are up</span><br><span class="line">arpleak             : Exploit ARP leak flaws, like NetBSD-SA2017-<span class="number">002.</span></span><br><span class="line">bind_layers         : Bind <span class="number">2</span> layers on some specific fields<span class="string">&#x27; values.</span></span><br><span class="line"><span class="string">bridge_and_sniff    : Forward traffic between interfaces if1 and if2, sniff and return</span></span><br><span class="line"><span class="string">chexdump            : Build a per byte hexadecimal representation</span></span><br><span class="line"><span class="string">computeNIGroupAddr  : Compute the NI group Address. Can take a FQDN as input parameter</span></span><br><span class="line"><span class="string">corrupt_bits        :</span></span><br><span class="line"><span class="string">corrupt_bytes       :</span></span><br><span class="line"><span class="string">defrag              : defrag(plist) -&gt; ([not fragmented], [defragmented],</span></span><br><span class="line"><span class="string">defragment          : defragment(plist) -&gt; plist defragmented as much as possible</span></span><br><span class="line"><span class="string">dhcp_request        : Send a DHCP discover request and return the answer</span></span><br><span class="line"><span class="string">dyndns_add          : Send a DNS add message to a nameserver for &quot;name&quot; to have a new &quot;rdata&quot;</span></span><br><span class="line"><span class="string">dyndns_del          : Send a DNS delete message to a nameserver for &quot;name&quot;</span></span><br><span class="line"><span class="string">etherleak           : Exploit Etherleak flaw</span></span><br><span class="line"><span class="string">explore             : Function used to discover the Scapy layers and protocols.</span></span><br><span class="line"><span class="string">fletcher16_checkbytes: Calculates the Fletcher-16 checkbytes returned as 2 byte binary-string.</span></span><br><span class="line"><span class="string">fletcher16_checksum : Calculates Fletcher-16 checksum of the given buffer.</span></span><br><span class="line"><span class="string">fragleak            : --</span></span><br><span class="line"><span class="string">fragleak2           : --</span></span><br><span class="line"><span class="string">fragment            : Fragment a big IP datagram</span></span><br><span class="line"><span class="string">fuzz                :</span></span><br><span class="line"><span class="string">getmacbyip          : Return MAC address corresponding to a given IP address</span></span><br><span class="line"><span class="string">getmacbyip6         : Returns the MAC address corresponding to an IPv6 address</span></span><br><span class="line"><span class="string">hexdiff             :</span></span><br><span class="line"><span class="string">hexdump             : Build a tcpdump like hexadecimal view</span></span><br><span class="line"><span class="string">hexedit             : Run hexedit on a list of packets, then return the edited packets.</span></span><br><span class="line"><span class="string">hexstr              : Build a fancy tcpdump like hex from bytes.</span></span><br><span class="line"><span class="string">import_hexcap       : Imports a tcpdump like hexadecimal view</span></span><br><span class="line"><span class="string">is_promisc          : Try to guess if target is in Promisc mode. The target is provided by its ip.</span></span><br><span class="line"><span class="string">linehexdump         : Build an equivalent view of hexdump() on a single line</span></span><br><span class="line"><span class="string">ls                  : List  available layers, or infos on a given layer class or name.</span></span><br><span class="line"><span class="string">neighsol            : Sends and receive an ICMPv6 Neighbor Solicitation message</span></span><br><span class="line"><span class="string">overlap_frag        : Build overlapping fragments to bypass NIPS</span></span><br><span class="line"><span class="string">promiscping         : Send ARP who-has requests to determine which hosts are in promiscuous mode</span></span><br><span class="line"><span class="string">rdpcap              : Read a pcap or pcapng file and return a packet list</span></span><br><span class="line"><span class="string">report_ports        : portscan a target and output a LaTeX table</span></span><br><span class="line"><span class="string">restart             : Restarts scapy</span></span><br><span class="line"><span class="string">rfc                 :</span></span><br><span class="line"><span class="string">send                :</span></span><br><span class="line"><span class="string">sendp               :</span></span><br><span class="line"><span class="string">sendpfast           : Send packets at layer 2 using tcpreplay for performance</span></span><br><span class="line"><span class="string">sniff               :</span></span><br><span class="line"><span class="string">split_layers        : Split 2 layers previously bound.</span></span><br><span class="line"><span class="string">sr                  :</span></span><br><span class="line"><span class="string">sr1                 :</span></span><br><span class="line"><span class="string">sr1flood            : Flood and receive packets at layer 3 and return only the first answer</span></span><br><span class="line"><span class="string">srbt                : send and receive using a bluetooth socket</span></span><br><span class="line"><span class="string">srbt1               : send and receive 1 packet using a bluetooth socket</span></span><br><span class="line"><span class="string">srflood             : Flood and receive packets at layer 3</span></span><br><span class="line"><span class="string">srloop              :</span></span><br><span class="line"><span class="string">srp                 :</span></span><br><span class="line"><span class="string">srp1                :</span></span><br><span class="line"><span class="string">srp1flood           : Flood and receive packets at layer 2 and return only the first answer</span></span><br><span class="line"><span class="string">srpflood            : Flood and receive packets at layer 2</span></span><br><span class="line"><span class="string">srploop             :</span></span><br><span class="line"><span class="string">tcpdump             : Run tcpdump or tshark on a list of packets.</span></span><br><span class="line"><span class="string">tdecode             :</span></span><br><span class="line"><span class="string">traceroute          : Instant TCP traceroute</span></span><br><span class="line"><span class="string">traceroute6         : Instant TCP traceroute using IPv6</span></span><br><span class="line"><span class="string">traceroute_map      : Util function to call traceroute on multiple targets, then</span></span><br><span class="line"><span class="string">tshark              : Sniff packets and print them calling pkt.summary().</span></span><br><span class="line"><span class="string">wireshark           :</span></span><br><span class="line"><span class="string">wrpcap              : Write a list of packets to a pcap file</span></span><br></pre></td></tr></table></figure><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>构建数据包并且使用它，scapy采用分层的方式去构造数据包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建数据链路层的包</span></span><br><span class="line">ether=Ether()</span><br><span class="line"><span class="comment">#构建ip()数据包</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ip=IP()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ip</span><br><span class="line">&lt;IP  |&gt;</span><br><span class="line"><span class="comment">#构建Ether/IP/TCP</span></span><br><span class="line">pkt =Ether()/IP()/TCP()</span><br><span class="line"><span class="comment">#构建HTTP的包</span></span><br><span class="line">pkt = IP()/TCP()/<span class="string">&quot;GET HTTP/1.0\r\n\r\n&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ip.show()</span><br><span class="line"><span class="comment">###[ IP ]### 以下是IP类属性的默认值</span></span><br><span class="line">  version   = <span class="number">4</span></span><br><span class="line">  ihl       = <span class="literal">None</span></span><br><span class="line">  tos       = <span class="number">0x0</span> <span class="comment">#8位服务类型TOS</span></span><br><span class="line">  <span class="built_in">len</span>       = <span class="literal">None</span> <span class="comment">#16位总长度（字节）</span></span><br><span class="line">  <span class="built_in">id</span>        = <span class="number">1</span></span><br><span class="line">  flags     = </span><br><span class="line">  frag      = <span class="number">0</span></span><br><span class="line">  ttl       = <span class="number">64</span>  <span class="comment">#ttl是转发路由的数量，每转发一次ttl减去1如果到0则会发送ICMP报告超时</span></span><br><span class="line">  proto     = ip  <span class="comment">#8位协议 (TCP, UDP 或其他)</span></span><br><span class="line">  chksum    = <span class="literal">None</span> <span class="comment">#16位IP首部校验和</span></span><br><span class="line">  src       = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  <span class="comment">#源地址  127.0.0.1为本机地址</span></span><br><span class="line">  dst       = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  <span class="comment">#目的地址</span></span><br><span class="line">  \options   \</span><br></pre></td></tr></table></figure><p>堆叠层</p><p>这个 <code>/</code> 运算符用作两层之间的合成运算符。这样做时，下层可以根据上层重载一个或多个默认字段。（您仍然可以提供所需的值）。字符串可以用作原始层。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ip/TCP()</span><br><span class="line">&lt;IP  frag=<span class="number">0</span> proto=tcp |&lt;TCP  |&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Ether()/IP()/TCP()</span><br><span class="line">&lt;Ether  <span class="built_in">type</span>=IPv4 |&lt;IP  frag=<span class="number">0</span> proto=tcp |&lt;TCP  |&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>IP()/TCP()/<span class="string">&quot;GET / HTTP/1.0\n\r\n&quot;</span></span><br><span class="line">&lt;IP  frag=<span class="number">0</span> proto=tcp |&lt;TCP  |&lt;Raw  load=<span class="string">&#x27;GET / HTTP/1.0\n\r\n&#x27;</span> |&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Ether()/IP()/IP()/UDP()</span><br><span class="line">&lt;Ether  <span class="built_in">type</span>=IPv4 |&lt;IP  frag=<span class="number">0</span> proto=<span class="number">4</span> |&lt;IP  frag=<span class="number">0</span> proto=udp |&lt;UDP  |&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>IP(proto=<span class="number">55</span>)/TCP()</span><br><span class="line">&lt;IP  frag=<span class="number">0</span> proto=<span class="number">55</span> |&lt;TCP  |&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="解析数据包"><a href="#解析数据包" class="headerlink" title="解析数据包"></a>解析数据包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>raw(IP()) <span class="comment">#字节方式显示数据包</span></span><br><span class="line"><span class="string">b&#x27;E\x00\x00\x14\x00\x01\x00\x00@\x00|\xe7\x7f\x00\x00\x01\x7f\x00\x00\x01&#x27;</span> <span class="comment">#八进制展示</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>IP(_) <span class="comment">#转换</span></span><br><span class="line">&lt;IP  version=<span class="number">4</span> ihl=<span class="number">5</span> tos=<span class="number">0x0</span> <span class="built_in">len</span>=<span class="number">20</span> <span class="built_in">id</span>=<span class="number">1</span> flags= frag=<span class="number">0</span> ttl=<span class="number">64</span> proto=ip chksum=<span class="number">0x7ce7</span> src=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> dst=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> |&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ip=Ether()/IP(dst=<span class="string">&quot;www.slashdot.org&quot;</span>)/TCP()/<span class="string">&quot;GET /index.html HTTP/1.0 \n\n&quot;</span> <span class="comment">#Ether是以太网协议</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hexdump(ip) <span class="comment">#字节转换成十六进制</span></span><br><span class="line"><span class="number">0000</span>  <span class="number">30</span> FC <span class="number">68</span> 4F 6A <span class="number">12</span> 9C 2D CD 01 <span class="number">88</span> 7E 08 <span class="number">00</span> <span class="number">45</span> <span class="number">00</span>  <span class="number">0.</span>hOj..-...~..E.</span><br><span class="line"><span class="number">00</span>10  <span class="number">00</span> <span class="number">43</span> <span class="number">00</span> 01 <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> 06 <span class="number">33</span> 3B C0 A8 01 <span class="number">69</span> <span class="number">68</span> <span class="number">12</span>  .C....@<span class="number">.3</span>;...ih.</span><br><span class="line">0020  1D <span class="number">56</span> <span class="number">00</span> <span class="number">14</span> <span class="number">00</span> <span class="number">50</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">50</span> 02  .V...P........P.</span><br><span class="line">0030  <span class="number">20</span> <span class="number">00</span> <span class="number">76</span> <span class="number">38</span> <span class="number">00</span> <span class="number">00</span> <span class="number">47</span> <span class="number">45</span> <span class="number">54</span> <span class="number">20</span> 2F <span class="number">69</span> 6E <span class="number">64</span> <span class="number">65</span> <span class="number">78</span>   .v8..GET /index</span><br><span class="line">0040  2E <span class="number">68</span> <span class="number">74</span> 6D 6C <span class="number">20</span> <span class="number">48</span> <span class="number">54</span> <span class="number">54</span> <span class="number">50</span> 2F <span class="number">31</span> 2E <span class="number">30</span> <span class="number">20</span> 0A  .html HTTP/<span class="number">1.0</span> .</span><br><span class="line">0050  0A                                               .</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=raw(ip) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">b&#x27;0\xfchOj\x12\x9c-\xcd\x01\x88~\x08\x00E\x00\x00C\x00\x01\x00\x00@\x063;\xc0\xa8\x01ih\x12\x1dV\x00\x14\x00P\x00\x00\x00\x00\x00\x00\x00\x00P\x02 \x00v8\x00\x00GET /index.html HTTP/1.0 \n\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=Ether(b) <span class="comment">#转换成Ether协议格式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;Ether  dst=<span class="number">30</span>:fc:<span class="number">68</span>:4f:6a:<span class="number">12</span> src=9c:2d:cd:01:<span class="number">88</span>:7e <span class="built_in">type</span>=IPv4 |&lt;IP  version=<span class="number">4</span> ihl=<span class="number">5</span> tos=<span class="number">0x0</span> <span class="built_in">len</span>=<span class="number">67</span> <span class="built_in">id</span>=<span class="number">1</span> flags= frag=<span class="number">0</span> ttl=<span class="number">64</span> proto=tcp chksum=<span class="number">0x333b</span> src</span><br><span class="line">=<span class="number">192.168</span><span class="number">.1</span><span class="number">.105</span> dst=<span class="number">104.18</span><span class="number">.29</span><span class="number">.86</span> |&lt;TCP  sport=ftp_data dport=http seq=<span class="number">0</span> ack=<span class="number">0</span> dataofs=<span class="number">5</span> reserved=<span class="number">0</span> flags=S window=<span class="number">8192</span> chksum=<span class="number">0x7638</span> urgptr=<span class="number">0</span> |&lt;Raw  load=<span class="string">&#x27;GET /index.html HTTP/1.0 \n\n&#x27;</span> |&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.hide_defaults()<span class="comment">#隐藏默认值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;Ether  dst=<span class="number">30</span>:fc:<span class="number">68</span>:4f:6a:<span class="number">12</span> src=9c:2d:cd:01:<span class="number">88</span>:7e <span class="built_in">type</span>=IPv4 |&lt;IP  ihl=<span class="number">5</span> <span class="built_in">len</span>=<span class="number">67</span> frag=<span class="number">0</span> proto=tcp chksum=<span class="number">0x333b</span> src=<span class="number">192.168</span><span class="number">.1</span><span class="number">.105</span> dst=<span class="number">104.18</span><span class="number">.29</span><span class="number">.86</span> |&lt;TCP</span><br><span class="line">  dataofs=<span class="number">5</span> chksum=<span class="number">0x7638</span> |&lt;Raw  load=<span class="string">&#x27;GET /index.html HTTP/1.0 \n\n&#x27;</span> |&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="读取PCAP文件"><a href="#读取PCAP文件" class="headerlink" title="读取PCAP文件"></a>读取PCAP文件</h2><p>您可以从 pcap 文件中读取数据包并将它们写入 pcap 文件。pcap文件是抓包获取到的文件可以通过scapy进行解析</p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221103104931.png?raw=true" alt="blog_images20221103104931.png"></p><p>wireshark对应的是 </p><ul><li>Frame：物理层</li><li>Ethernet：数据链路层</li><li>Internet：网络层Internet Control Message Protocol</li><li>Transmission:传输层</li><li>Hypertext Transfer Protocol ：应用层</li></ul><p>wireshark能获取HTTP，也能获取HTTPS，但是不能解密HTTPS，所以wireshark看不懂HTTPS中的内容，总结，如果是处理HTTP,HTTPS 还是用Fiddler, 其他协议比如TCP,UDP 就用wireshark.HTTPS可以利用scapy进行解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dpkt = sniff(iface = <span class="string">&quot;wlan&quot;</span>,count = <span class="number">10</span>)</span><br><span class="line">wrpcap(<span class="string">&quot;mypack.pcap&quot;</span>,dpkt) <span class="comment">#保存pcap文件 pcap文件可以用wireshark打开，wireshark抓取的包保存为.pcap文件也可以被scapy解析</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=rdpcap(<span class="string">&quot;mypack.pcap&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br></pre></td></tr></table></figure><h2 id="图像转存-PDF，PS"><a href="#图像转存-PDF，PS" class="headerlink" title="图像转存(PDF，PS)"></a>图像转存(PDF，PS)</h2><p>如果您安装了 PyX，您可以制作一个数据包或数据包列表的图形 PostScript/PDF 转储（请参见下面丑陋的 PNG 图像。PostScript/PDF 的质量要好得多……）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">423</span>].pdfdump(layer_shift=<span class="number">1</span>)</span><br><span class="line">a[<span class="number">423</span>].psdump(<span class="string">&quot;/tmp/isakmp_pkt.eps&quot;</span>,layer_shift=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://scapy.readthedocs.io/en/latest/_images/isakmp_dump.png" alt="_images/isakmp_dump.png"></p><table><thead><tr><th>命令</th><th>影响</th></tr></thead><tbody><tr><td>raw(pkt)</td><td>以字节的方式来显示数据包</td></tr><tr><td>hexdump(pkt)</td><td>把数据包（八进制）进行十六进制转储</td></tr><tr><td>ls(包)</td><td>有字段值的列表</td></tr><tr><td>pkt.summary()</td><td>以不超过一行的摘要来简单描述数据包</td></tr><tr><td>pkt.show()</td><td>多行数据展示数据包的信息</td></tr><tr><td>pkt.show2()</td><td>与 show 相同，但在组装的数据包上（例如，计算校验和）</td></tr><tr><td>pkt.sprintf()</td><td>用数据包的字段值填充格式字符串</td></tr><tr><td>pkt.decode_payload_as()</td><td>改变有效载荷的解码方式</td></tr><tr><td>pkt.psdump()</td><td>绘制带有解释性剖析的 PostScript 图表</td></tr><tr><td>pkt.pdfdump()</td><td>绘制带有解释性剖析的 PDF</td></tr><tr><td>pkt.command()</td><td>返回一个可以生成数据包的 Scapy 命令</td></tr></tbody></table><h2 id="生成数据包集"><a href="#生成数据包集" class="headerlink" title="生成数据包集"></a>生成数据包集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=IP(dst=<span class="string">&quot;www.slashdot.org/30&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&lt;IP  dst=Net(<span class="string">&quot;www.slashdot.org/30&quot;</span>) |&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[p <span class="keyword">for</span> p <span class="keyword">in</span> a] <span class="comment">#iPV4是32位地址,子网掩码是30位，主机号有两位，所以有四个数据包</span></span><br><span class="line">[&lt;IP  dst=<span class="number">104.18</span><span class="number">.28</span><span class="number">.84</span> |&gt;,</span><br><span class="line"> &lt;IP  dst=<span class="number">104.18</span><span class="number">.28</span><span class="number">.85</span> |&gt;,</span><br><span class="line"> &lt;IP  dst=<span class="number">104.18</span><span class="number">.28</span><span class="number">.86</span> |&gt;,</span><br><span class="line"> &lt;IP  dst=<span class="number">104.18</span><span class="number">.28</span><span class="number">.87</span> |&gt;]</span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=IP(ttl=[<span class="number">1</span>,<span class="number">2</span>,(<span class="number">5</span>,<span class="number">9</span>)])<span class="comment">#左闭右闭</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&lt;IP  ttl=[<span class="number">1</span>, <span class="number">2</span>, (<span class="number">5</span>, <span class="number">9</span>)] |&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[p <span class="keyword">for</span> p <span class="keyword">in</span> b]</span><br><span class="line">[&lt;IP  ttl=<span class="number">1</span> |&gt;,</span><br><span class="line"> &lt;IP  ttl=<span class="number">2</span> |&gt;,</span><br><span class="line"> &lt;IP  ttl=<span class="number">5</span> |&gt;,</span><br><span class="line"> &lt;IP  ttl=<span class="number">6</span> |&gt;,</span><br><span class="line"> &lt;IP  ttl=<span class="number">7</span> |&gt;,</span><br><span class="line"> &lt;IP  ttl=<span class="number">8</span> |&gt;,</span><br><span class="line"> &lt;IP  ttl=<span class="number">9</span> |&gt;]</span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=TCP(dport=[<span class="number">80</span>,<span class="number">443</span>]) <span class="comment">#http端口号是80 https的端口号是443</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;TCP  dport=[<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>] |&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[p <span class="keyword">for</span> p <span class="keyword">in</span> c]</span><br><span class="line">[&lt;TCP  dport=http |&gt;,</span><br><span class="line"> &lt;TCP  dport=https |&gt;]</span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[p <span class="keyword">for</span> p <span class="keyword">in</span> a/c]</span><br><span class="line">[&lt;IP  frag=<span class="number">0</span> proto=tcp dst=<span class="number">104.18</span><span class="number">.28</span><span class="number">.84</span> |&lt;TCP  dport=http |&gt;&gt;,</span><br><span class="line"> &lt;IP  frag=<span class="number">0</span> proto=tcp dst=<span class="number">104.18</span><span class="number">.28</span><span class="number">.84</span> |&lt;TCP  dport=https |&gt;&gt;,</span><br><span class="line"> &lt;IP  frag=<span class="number">0</span> proto=tcp dst=<span class="number">104.18</span><span class="number">.28</span><span class="number">.85</span> |&lt;TCP  dport=http |&gt;&gt;,</span><br><span class="line"> &lt;IP  frag=<span class="number">0</span> proto=tcp dst=<span class="number">104.18</span><span class="number">.28</span><span class="number">.85</span> |&lt;TCP  dport=https |&gt;&gt;,</span><br><span class="line"> &lt;IP  frag=<span class="number">0</span> proto=tcp dst=<span class="number">104.18</span><span class="number">.28</span><span class="number">.86</span> |&lt;TCP  dport=http |&gt;&gt;,</span><br><span class="line"> &lt;IP  frag=<span class="number">0</span> proto=tcp dst=<span class="number">104.18</span><span class="number">.28</span><span class="number">.86</span> |&lt;TCP  dport=https |&gt;&gt;,</span><br><span class="line"> &lt;IP  frag=<span class="number">0</span> proto=tcp dst=<span class="number">104.18</span><span class="number">.28</span><span class="number">.87</span> |&lt;TCP  dport=http |&gt;&gt;,</span><br><span class="line"> &lt;IP  frag=<span class="number">0</span> proto=tcp dst=<span class="number">104.18</span><span class="number">.28</span><span class="number">.87</span> |&lt;TCP  dport=https |&gt;&gt;]</span><br></pre></td></tr></table></figure><p>ip地址和http组合：ip地址有四个，http有两个，组合有八个</p><p>某些操作（例如从数据包构建字符串）无法对一组数据包起作用。在这些情况下，如果您忘记展开一组数据包，则只有您忘记生成的列表的第一个元素将用于组装数据包。另一方面，可以将数据包集合移动到PacketList对象中，该对象提供对数据包列表的一些操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p=PacketList([p <span class="keyword">for</span> p <span class="keyword">in</span> a/c])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br><span class="line">&lt;PacketList: TCP:<span class="number">8</span> UDP:<span class="number">0</span> ICMP:<span class="number">0</span> Other:<span class="number">0</span>&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>summary()</td><td>显示每个数据包的摘要列表</td></tr><tr><td>nsummary()</td><td>同上，包号</td></tr><tr><td>conversations()</td><td>显示对话图</td></tr><tr><td>show()</td><td>显示首选表示（通常是 nsummary()）</td></tr><tr><td>filter()</td><td>返回使用 lambda 函数过滤的数据包列表</td></tr><tr><td>hexdump()</td><td>返回所有数据包的十六进制转储</td></tr><tr><td>hexraw()</td><td>返回所有数据包的原始层的十六进制转储</td></tr><tr><td>padding()</td><td>返回带有填充的数据包的十六进制转储</td></tr><tr><td>nzpadding()</td><td>返回具有非零填充的数据包的十六进制转储</td></tr><tr><td>plot()</td><td>绘制应用于数据包列表的 lambda 函数</td></tr><tr><td>make_table()</td><td>根据 lambda 函数显示表格</td></tr></tbody></table><h2 id="发送数据包"><a href="#发送数据包" class="headerlink" title="发送数据包"></a>发送数据包</h2><p>现在我们知道如何操作数据包了。让我们看看如何发送它们。send() 函数将在第 3 层（网络层）发送数据包。也就是说，它将为您处理路由和第 2 层（数据链路层）。sendp() 函数将在第 2 层（数据链路层）工作。您可以选择正确的接口和正确的链路层协议。如果return_packets=True 作为参数传递，send() 和 sendp() 也将返回已发送的数据包列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">send(pkg, iface=<span class="string">&#x27;以太网 4&#x27;</span>, loop=<span class="number">1</span>, inter=<span class="number">1</span>, timeout=<span class="number">1</span>, verbose=<span class="literal">False</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">pkg：数据包</span></span><br><span class="line"><span class="string">iface：网口名称（区分大小写，中英文）</span></span><br><span class="line"><span class="string">loop：循环发送</span></span><br><span class="line"><span class="string">inter：每隔1秒发送</span></span><br><span class="line"><span class="string">timeout：超时1秒就丢弃</span></span><br><span class="line"><span class="string">verbose：False不显示详细信息</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>层级</th><th>描述</th></tr></thead><tbody><tr><td>sr</td><td>3</td><td>发送并接收所有包</td></tr><tr><td>sr1</td><td>3</td><td>发送，接收回复的包 （一个一个收）</td></tr><tr><td>srp</td><td>2</td><td>发送并接收所有包</td></tr><tr><td>srp1</td><td>2</td><td>发送，接收回复的包</td></tr><tr><td>send</td><td>3</td><td>只发送不接收</td></tr><tr><td>sendp</td><td>2</td><td>只发送不接收</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">send(IP(dst=<span class="string">&quot;1.2.3.4&quot;</span>)/ICMP())</span><br><span class="line">sendp(Ether()/IP(dst=<span class="string">&quot;1.2.3.4&quot;</span>,ttl=(<span class="number">1</span>,<span class="number">4</span>)), iface=<span class="string">&quot;eth1&quot;</span>)</span><br><span class="line">sendp(<span class="string">&quot;I&#x27;m travelling on Ethernet&quot;</span>, iface=<span class="string">&quot;eth1&quot;</span>, loop=<span class="number">1</span>, inter=<span class="number">0.2</span>)</span><br><span class="line">sendp(rdpcap(<span class="string">&quot;/tmp/pcapfile&quot;</span>)) <span class="comment"># tcpreplay</span></span><br><span class="line">send(IP(dst=<span class="string">&#x27;127.0.0.1&#x27;</span>), return_packets=<span class="literal">True</span>)</span><br><span class="line">pkt = IP(src=<span class="string">&#x27;10.0.1.123&#x27;</span>, dst=<span class="string">&#x27;11.0.1.111&#x27;</span>) / TCP(sport=<span class="number">12345</span>, dport=<span class="number">5555</span>) / data</span><br><span class="line">send(pkt)  </span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221116155049.png?raw=true" alt="blog_images20221116155049.png"></p><h2 id="模糊测试"><a href="#模糊测试" class="headerlink" title="模糊测试"></a>模糊测试</h2><p>函数 fuzz() 能够更改任何不由其值是随机且其类型适合于该字段的对象<strong>计算的默认值（如校验和）</strong>。这可以快速构建模糊模板并循环发送它们。在下面的例子中，IP层正常，UDP和NTP层被fuzz。UDP 校验和将正确，UDP 目标端口将被 NTP 重载为 123，并且 NTP 版本将被强制为 4。所有其他端口将被随机化。注意：如果你在 IP 层使用 fuzz()，src 和 dst 参数不会是随机的，所以为了做到这一点，请使用 RandIP()。：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">send(IP(dst=<span class="string">&quot;target&quot;</span>)/fuzz(UDP()/NTP(version=<span class="number">4</span>)),loop=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="注入字节"><a href="#注入字节" class="headerlink" title="注入字节"></a>注入字节</h2><p>在一个数据包中，每个字段都有一个特定的类型。例如，IP 数据包的长度字段<code>len</code>需要一个整数。如果您正在开发 PoC，有时您会想要注入一些不适合该类型的值。这可以使用<code>RawVal</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pkt = IP(<span class="built_in">len</span>=RawVal(<span class="string">b&quot;NotAnInteger&quot;</span>), src=<span class="string">&quot;127.0.0.1&quot;</span>)</span><br><span class="line"><span class="built_in">bytes</span>(pkt)</span><br><span class="line"><span class="string">b&#x27;H\x00NotAnInt\x0f\xb3er\x00\x01\x00\x00@\x00\x00\x00\x7f\x00\x00\x01\x7f\x00\x00\x01\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="接收数据包"><a href="#接收数据包" class="headerlink" title="接收数据包"></a>接收数据包</h2><p>抓包函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">sniff(count=<span class="number">0</span>,</span><br><span class="line">      store=<span class="number">1</span>,</span><br><span class="line">      offline=<span class="literal">None</span>,</span><br><span class="line">      prn=<span class="literal">None</span>,</span><br><span class="line">      <span class="built_in">filter</span>=<span class="literal">None</span>,</span><br><span class="line">      L2socket=<span class="literal">None</span>,</span><br><span class="line">      timeout=<span class="literal">None</span>,</span><br><span class="line">      opened_socket=<span class="literal">None</span>,</span><br><span class="line">      stop_filter=<span class="literal">None</span>,</span><br><span class="line">      iface=<span class="literal">None</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">count:指定最多嗅探多少个符合要求的报文，设置为0时则一直捕获</span></span><br><span class="line"><span class="string">store:指定保存抓取的数据包或者丢弃，1为保存，0为丢弃</span></span><br><span class="line"><span class="string">offline:从pcap文件中读取数据包，而不进行嗅探，默认为None</span></span><br><span class="line"><span class="string">prn:为每个数据包定义一个回调函数，回调函数会在捕获到符合 filter 的报文时被调用，通常使用 lambda 表达式来编写</span></span><br><span class="line"><span class="string">filter:用来筛选抓取的信息，其用法与常见抓包软件WireShark 等相同，遵循 BPF 语法</span></span><br><span class="line"><span class="string">L2socket:使用给定的L2socket</span></span><br><span class="line"><span class="string">timeout:在给定的事件后停止嗅探，默认为None</span></span><br><span class="line"><span class="string">opened_socket:对指定的对象使用.recv进行读取</span></span><br><span class="line"><span class="string">stop_filter:定义一个函数，决定在抓到指定的数据之后停止</span></span><br><span class="line"><span class="string">iface:指定抓包的网卡,不指定则代表所有网卡  eth0,eth1.....</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line">sniff(<span class="built_in">filter</span>=<span class="string">&quot;ip src 172.31.100.222 and tcp and tcp port 80&quot;</span>, prn=<span class="keyword">lambda</span> x:x.summary())</span><br><span class="line"></span><br><span class="line">pkt = sniff(<span class="built_in">filter</span>=<span class="string">&quot;host 192.168.2.46&quot;</span>)</span><br><span class="line"><span class="comment">#常见的filter实例</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">host 192.168.2.46【筛选源地址或目的地址为192.168.2.46的数据包】</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dst host 192.168.2.46【筛选目的地址为192.168.2.46的数据包】</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">src host 192.168.2.46【筛选源地址为192.168.2.46的数据包】</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ether host ff:ff:ff:ff:ff:ff【筛选以太网源地址或目的地址为192.168.2.46的数据包】</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ether dst ff:ff:ff:ff:ff:ff【筛选以太网目的地址为192.168.2.46的数据包】</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ether src ff:ff:ff:ff:ff:ff【筛选以太网源地址为192.168.2.46的数据包】</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dst port 8080【筛选目的地址为8080端口的数据包】</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">src port 8080【筛选源地址为8080端口的数据包】</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">port 8080【筛选源地址和目的地址为8080的数据包，所有port前面都可以加上TCP和UDP】</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>发送和接收数据包 (sr)</p><p>sr() 函数用于发送数据包和接收答案。该函数返回几个数据包和答案，以及未回答的数据包。函数 sr1() 是一种变体，它只返回一个响应发送的数据包（或数据包集）的数据包。数据包必须是第 3 层数据包（IP、ARP 等）。函数 srp() 对第 2 层数据包（以太网、802.3 等）执行相同的操作。如果没有响应，则在达到超时时将分配一个 None 值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = sr1(IP(dst=<span class="string">&quot;www.slashdot.org&quot;</span>)/ICMP()/<span class="string">&quot;XXXXXXXXXXX&quot;</span>) <span class="comment">#p为接收数据，一个一个接收</span></span><br><span class="line">p=sr(IP(dst=<span class="string">&quot;172.20.29.5/30&quot;</span>)/TCP(dport=[<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>]),inter=<span class="number">0.5</span>,retry=-<span class="number">2</span>,timeout=<span class="number">1</span>)<span class="comment">#全部接收</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Scapy</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>javaweb开发环境搭建(CentOS版本)</title>
    <link href="http://example.com/2022/11/15/javaweb%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(CentOS%E7%89%88%E6%9C%AC)/"/>
    <id>http://example.com/2022/11/15/javaweb%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(CentOS%E7%89%88%E6%9C%AC)/</id>
    <published>2022-11-15T10:00:00.000Z</published>
    <updated>2022-11-16T08:29:00.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javaweb开发环境搭建-CentOS版本"><a href="#javaweb开发环境搭建-CentOS版本" class="headerlink" title="javaweb开发环境搭建(CentOS版本)"></a>javaweb开发环境搭建(CentOS版本)</h1><h2 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h2><ol><li>执行以下命令，查看yum源中JDK版本。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list java*</span><br></pre></td></tr></table></figure><ol start="2"><li>执行以下命令，使用yum安装JDK1.8。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install java-1.8.0-openjdk*</span><br></pre></td></tr></table></figure><ol start="3"><li>执行以下命令，查看是否安装成功。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><ol><li>执行以下命令，下载并安装MySQL官方的Yum Repository。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">yum -y install * --nogpgcheck mysql-community-server</span><br></pre></td></tr></table></figure><p>2.执行以下命令，启动 MySQL 数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p>3.执行以下命令，查看MySQL初始密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>4.执行以下命令，输入上条命令中MySQL初始密码，登录数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>5.执行以下命令，修改MySQL默认密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy=0;  #修改密码安全策略为低（只校验密码长度，至少8位）。</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;12345678&#x27;;</span><br></pre></td></tr></table></figure><p>6.执行以下命令，授予root用户远程管理权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;12345678&#x27;;</span><br></pre></td></tr></table></figure><p>7.输入exit退出数据库。</p><h2 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h2><p>1.执行以下命令，下载Tomcat压缩包。如果该镜像失效，<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/">请查看tomcat最新版本</a>，并进行替换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://labfileapp.oss-cn-hangzhou.aliyuncs.com/apache-tomcat-8.5.72.tar.gz</span><br></pre></td></tr></table></figure><p>2.执行以下命令，解压刚刚下载Tomcat包。</p><p>3.执行以下命令，修改Tomcat名字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv apache-tomcat-8.5.72 /usr/local/Tomcat8.5</span><br></pre></td></tr></table></figure><p>4.执行以下命令，为Tomcat授权。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/local/Tomcat8.5/bin/*.sh</span><br></pre></td></tr></table></figure><p>5.执行以下命令，修改Tomcat默认端口号为80。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/Connector port=&quot;8080&quot;/Connector port=&quot;80&quot;/&#x27; /usr/local/Tomcat8.5/conf/server.xml</span><br></pre></td></tr></table></figure><p>6.启动Tomcat。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/Tomcat8.5/bin/./startup.sh</span><br></pre></td></tr></table></figure><h2 id="访问Tomcat"><a href="#访问Tomcat" class="headerlink" title="访问Tomcat"></a>访问Tomcat</h2><p>1.打开浏览器，在地址栏中输入ECS公网地址，例如：139.0.0.1</p><p>如果显示如下界面，则表示Tomcat安装配置成功。</p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221113202844.png?raw=true" alt="blog_images20221113202844.png"></p><p>2.至此，Java Web开发环境搭建完成。</p>]]></content>
    
    
    <summary type="html">搭建服务器环境</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>常见错误汇总</title>
    <link href="http://example.com/2022/11/14/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    <id>http://example.com/2022/11/14/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</id>
    <published>2022-11-14T10:00:00.000Z</published>
    <updated>2022-11-16T08:23:55.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="ssh登陆报错“WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED“问题原因及解决方法"><a href="#ssh登陆报错“WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED“问题原因及解决方法" class="headerlink" title="ssh登陆报错“WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED“问题原因及解决方法"></a>ssh登陆报错“WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED“问题原因及解决方法</h2><p>问题原因：</p><p>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!<br>翻译过来就是<br>警告：远程主机标识已更改！</p><p>此报错是由于远程的主机的公钥发生了变化导致的。<br>ssh服务是通过公钥和私钥来进行连接的，它会把每个曾经访问过计算机或服务器的公钥（public key），记录在~/.ssh/known_hosts 中，当下次访问曾经访问过的计算机或服务器时，ssh就会核对公钥，如果和上次记录的不同，OpenSSH会发出警告。</p><p>解决办法：</p><p>删除对应ip的在known_hosts相关信息vim /root/.ssh/known_hosts</p>]]></content>
    
    
    <summary type="html">错误汇总</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Pytorch</title>
    <link href="http://example.com/2022/11/10/Pytorch/"/>
    <id>http://example.com/2022/11/10/Pytorch/</id>
    <published>2022-11-10T06:00:00.000Z</published>
    <updated>2022-12-01T11:58:59.718Z</updated>
    
    <content type="html"><![CDATA[<p>pytorch官网：<a href="https://pytorch.org/">https://pytorch.org/</a></p><p><strong>两个常用命令：</strong></p><p>​                <strong>dir():查看包下面包含什么</strong></p><p>​                <strong>help()：查看函数的使用</strong></p><h1 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h1><p>最简单的方法就是安装依赖Python 3.x的<a href="https://conda.io/en/latest/miniconda.html">Miniconda</a>。 如果已安装conda，则可以跳过以下步骤。访问Miniconda网站，根据Python3.x版本确定适合你的系统的版本</p><p>在安装深度学习框架之前，请先检查你的计算机上是否有可用的GPU。 例如，你可以查看计算机是否装有NVIDIA GPU并已安装<a href="https://developer.nvidia.com/cuda-downloads">CUDA</a>。 如果你的机器没有任何GPU，没有必要担心，因为你的CPU在前几章完全够用。 但是，如果你想流畅地学习全部章节，请提早获取GPU并且安装深度学习框架的GPU版本。</p><p>你可以按如下方式安装PyTorch的CPU或GPU版本：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install torch==<span class="number">1</span>.<span class="number">11</span>.<span class="number">0</span></span><br><span class="line">pip install torchvision==<span class="number">0</span>.<span class="number">12</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><p>首先，我们导入<code>torch</code>。请注意，虽然它被称为PyTorch，但是代码中使用<code>torch</code>而不是<code>pytorch</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure><p>张量表示由一个数值组成的数组，这个数组可能有多个维度。 具有一个轴的张量对应数学上的<em>向量</em>（vector）； 具有两个轴的张量对应数学上的<em>矩阵</em>（matrix）； 具有两个轴以上的张量没有特殊的数学名称。类似于矩阵，只是换了一个名字。</p><h2 id="创建张量"><a href="#创建张量" class="headerlink" title="创建张量"></a>创建张量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用arange创建一个一维张量，左闭右开，0-11</span></span><br><span class="line">x = torch.arange(<span class="number">12</span>)</span><br><span class="line"><span class="comment">#创建零张量，形状为（2,3,4）</span></span><br><span class="line">torch.zeros((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment">#创建全为1的张量 形状为（2,3,4）</span></span><br><span class="line">torch.ones((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment">#创建服从高斯分布（正态分布）的张量，其中的每个元素都从均值为0、标准差为1</span></span><br><span class="line">torch.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">#通过python列表进行创建</span></span><br><span class="line">torch.tensor([[<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><p>查看张量的形状</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.shape</span><br></pre></td></tr></table></figure><p>如果只想知道张量中元素的总数，即形状的所有元素乘积，可以检查它的大小（size）。 因为这里在处理的是一个向量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.numel()</span><br></pre></td></tr></table></figure><h2 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h2><p>对于任意具有相同形状的张量， 常见的标准算术运算符（<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>和<code>**</code>）都可以被升级为按元素运算。 我们可以在同一形状的任意两个张量上调用按元素操作。在下面的例子中，我们使用逗号来表示一个具有5个元素的元组，其中每个元素都是按元素操作的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1.0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>])</span><br><span class="line">y = torch.tensor([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">x + y, x - y, x * y, x / y, x ** y  <span class="comment"># **运算符是求幂运算</span></span><br></pre></td></tr></table></figure><p>“按元素”方式可以应用更多的计算，包括像求幂这样的一元运算符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.exp(x)</span><br></pre></td></tr></table></figure><p>我们也可以把多个张量<em>连结</em>（concatenate）在一起， 把它们端对端地叠起来形成一个更大的张量。 我们只需要提供张量列表，并给出沿哪个轴连结。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">X = torch.arange(<span class="number">12</span>, dtype=torch.float32).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">Y = torch.tensor([[<span class="number">2.0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line">torch.cat((X, Y), dim=<span class="number">0</span>), torch.cat((X, Y), dim=<span class="number">1</span>)<span class="comment">#dim=时按行连接，等于1时按列连接</span></span><br><span class="line">(tensor([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">         [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">         [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">         [ <span class="number">2.</span>,  <span class="number">1.</span>,  <span class="number">4.</span>,  <span class="number">3.</span>],</span><br><span class="line">         [ <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>,  <span class="number">4.</span>],</span><br><span class="line">         [ <span class="number">4.</span>,  <span class="number">3.</span>,  <span class="number">2.</span>,  <span class="number">1.</span>]]),</span><br><span class="line"> tensor([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>,  <span class="number">2.</span>,  <span class="number">1.</span>,  <span class="number">4.</span>,  <span class="number">3.</span>],</span><br><span class="line">         [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>,  <span class="number">4.</span>],</span><br><span class="line">         [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>,  <span class="number">4.</span>,  <span class="number">3.</span>,  <span class="number">2.</span>,  <span class="number">1.</span>]]))</span><br></pre></td></tr></table></figure><p>有时，我们想通过<em>逻辑运算符</em>构建二元张量。 以<code>X == Y</code>为例： 对于每个位置，如果<code>X</code>和<code>Y</code>在该位置相等，则新张量中相应项的值为1。 这意味着逻辑语句<code>X == Y</code>在该位置处为真，否则该位置为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X == Y</span><br><span class="line">tensor([[<span class="literal">False</span>,  <span class="literal">True</span>, <span class="literal">False</span>,  <span class="literal">True</span>],</span><br><span class="line">        [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>],</span><br><span class="line">        [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>]])</span><br></pre></td></tr></table></figure><p>对张量中的所有元素进行求和，会产生一个单元素张量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><h2 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h2><p>在上面的部分中，我们看到了如何在相同形状的两个张量上执行按元素操作。 在某些情况下，即使形状不同，我们仍然可以通过调用 <em>广播机制</em>（broadcasting mechanism）来执行按元素操作。 这种机制的工作方式如下：首先，通过适当复制元素来扩展一个或两个数组， 以便在转换之后，两个张量具有相同的形状。 其次，对生成的数组执行按元素操作。</p><p>在大多数情况下，我们将沿着数组中长度为1的轴进行广播，如下例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">3</span>).reshape((<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">b = torch.arange(<span class="number">2</span>).reshape((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">a, b</span><br><span class="line">(tensor([[<span class="number">0</span>],</span><br><span class="line">         [<span class="number">1</span>],</span><br><span class="line">         [<span class="number">2</span>]]),</span><br><span class="line"> tensor([[<span class="number">0</span>, <span class="number">1</span>]]))</span><br></pre></td></tr></table></figure><p>由于<code>a</code>和<code>b</code>分别是3×1和1×2矩阵，如果让它们相加，它们的形状不匹配。 我们将两个矩阵<em>广播</em>为一个更大的3×2矩阵，如下所示：矩阵<code>a</code>将复制列， 矩阵<code>b</code>将复制行，然后再按元素相加。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a + b</span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure><h2 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h2><p>就像在任何其他Python数组中一样，张量中的元素可以通过索引访问。 与任何Python数组一样：第一个元素的索引是0，最后一个元素索引是-1； 可以指定范围以包含第一个元素和最后一个之前的元素。</p><p>如下所示，我们可以用<code>[-1]</code>选择最后一个元素，可以用<code>[1:3]</code>选择第二个和第三个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">X = torch.arange(<span class="number">12</span>, dtype=torch.float32).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">X[-<span class="number">1</span>], X[<span class="number">1</span>:<span class="number">3</span>]<span class="comment">#二维张量最后一个元素就是最后一行</span></span><br><span class="line">(tensor([ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>]),</span><br><span class="line"> tensor([[ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">         [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>]]))</span><br><span class="line"><span class="comment">#获取多行多列 左闭右开 取0-1行并修改值全为12</span></span><br><span class="line">X[<span class="number">0</span>:<span class="number">2</span>, :] = <span class="number">12</span></span><br><span class="line">X</span><br><span class="line">tensor([[<span class="number">12.</span>, <span class="number">12.</span>, <span class="number">12.</span>, <span class="number">12.</span>],</span><br><span class="line">        [<span class="number">12.</span>, <span class="number">12.</span>, <span class="number">12.</span>, <span class="number">12.</span>],</span><br><span class="line">        [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>]])</span><br></pre></td></tr></table></figure><p>除读取外，我们还可以通过指定索引来将元素写入矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X[<span class="number">1</span>, <span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">X</span><br></pre></td></tr></table></figure><h2 id="节省内存"><a href="#节省内存" class="headerlink" title="节省内存"></a>节省内存</h2><p>运行一些操作可能会导致为新结果分配内存。 例如，如果我们用<code>Y = X + Y</code>，我们将取消引用<code>Y</code>指向的张量，而是指向新分配的内存处的张量。</p><p>在下面的例子中，我们用Python的<code>id()</code>函数演示了这一点， 它给我们提供了内存中引用对象的确切地址。 运行<code>Y = Y + X</code>后，我们会发现<code>id(Y)</code>指向另一个位置。 这是因为Python首先计算<code>Y + X</code>，为结果分配新的内存，然后使<code>Y</code>指向内存中的这个新位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before = <span class="built_in">id</span>(Y)</span><br><span class="line">Y = Y + X</span><br><span class="line"><span class="built_in">id</span>(Y) == before</span><br><span class="line"></span><br><span class="line"><span class="literal">False</span><span class="comment">#结果</span></span><br></pre></td></tr></table></figure><p>这可能是不可取的，原因有两个：首先，我们不想总是不必要地分配内存。 在机器学习中，我们可能有数百兆的参数，并且在一秒内多次更新所有参数。 通常情况下，我们希望原地执行这些更新。 其次，如果我们不原地更新，其他引用仍然会指向旧的内存位置， 这样我们的某些代码可能会无意中引用旧的参数。幸运的是，执行原地操作非常简单。 我们可以使用切片表示法将操作的结果分配给先前分配的数组，例如<code>Y[:] = &lt;expression&gt;</code>。 为了说明这一点，我们首先创建一个新的矩阵<code>Z</code>，其形状与另一个<code>Y</code>相同， 使用<code>zeros_like</code>来分配一个全0的块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Z = torch.zeros_like(Y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;id(Z):&#x27;</span>, <span class="built_in">id</span>(Z))</span><br><span class="line">Z[:] = X + Y</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;id(Z):&#x27;</span>, <span class="built_in">id</span>(Z))</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="built_in">id</span>(Z): <span class="number">140316199714544</span></span><br><span class="line"><span class="built_in">id</span>(Z): <span class="number">140316199714544</span></span><br></pre></td></tr></table></figure><p>如果在后续计算中没有重复使用<code>X</code>， 我们也可以使用<code>X[:] = X + Y</code>或<code>X += Y</code>来减少操作的内存开销。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before = <span class="built_in">id</span>(X)</span><br><span class="line">X += Y</span><br><span class="line"><span class="built_in">id</span>(X) == before</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="转换为其他Python对象"><a href="#转换为其他Python对象" class="headerlink" title="转换为其他Python对象"></a>转换为其他Python对象</h2><p>将深度学习框架定义的张量转换为NumPy张量（<code>ndarray</code>）很容易，反之也同样容易。 torch张量和numpy数组将共享它们的底层内存，就地操作更改一个张量也会同时更改另一个张量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A = X.numpy()</span><br><span class="line">B = torch.tensor(A)</span><br><span class="line"><span class="built_in">type</span>(A), <span class="built_in">type</span>(B)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">(numpy.ndarray, torch.Tensor)</span><br></pre></td></tr></table></figure><p>要将大小为1的张量转换为Python标量，我们可以调用<code>item</code>函数或Python的内置函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = torch.tensor([<span class="number">3.5</span>])</span><br><span class="line">a, a.item(), <span class="built_in">float</span>(a), <span class="built_in">int</span>(a)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">(tensor([<span class="number">3.5000</span>]), <span class="number">3.5</span>, <span class="number">3.5</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h1><h2 id="标量"><a href="#标量" class="headerlink" title="标量"></a>标量</h2><p>如果你曾经在餐厅支付餐费，那么你已经知道一些基本的线性代数，比如在数字间相加或相乘。 例如，北京的温度为52∘F（除了摄氏度外，另一种温度计量单位）。 严格来说，我们称仅包含一个数值的叫<em>标量</em>（scalar）。 如果要将此华氏度值转换为更常用的摄氏度， 则可以计算表达式c=59(f−32)，并将f赋为52。 在此等式中，每一项（5、9和32）都是标量值。 符号c和f称为<em>变量</em>（variable），它们表示未知的标量值。</p><p>在本书中，我们采用了数学表示法，其中标量变量由普通小写字母表示（例如，x、y和z）。 我们用R表示所有（连续）<em>实数</em>标量的空间。 我们之后将严格定义<em>空间</em>（space）是什么， 但现在你只要记住表达式x∈R是表示x是一个实值标量的正式形式。 符号∈称为“属于”，它表示“是集合中的成员”。 我们可以用x,y∈{0,1}来表明x和y是值只能为0或1的数字。</p><p>标量由只有一个元素的张量表示。 在下面的代码中，我们实例化两个标量，并执行一些熟悉的算术运算，即加法、乘法、除法和指数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.tensor(<span class="number">3.0</span>)</span><br><span class="line">y = torch.tensor(<span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">x + y, x * y, x / y, x**y</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">(tensor(<span class="number">5.</span>), tensor(<span class="number">6.</span>), tensor(<span class="number">1.5000</span>), tensor(<span class="number">9.</span>))</span><br></pre></td></tr></table></figure><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>你可以将向量视为标量值组成的列表。 我们将这些标量值称为向量的<em>元素</em>（element）或<em>分量</em>（component）。 当向量表示数据集中的样本时，它们的值具有一定的现实意义。 例如，如果我们正在训练一个模型来预测贷款违约风险，我们可能会将每个申请人与一个向量相关联， 其分量与其收入、工作年限、过往违约次数和其他因素相对应。 如果我们正在研究医院患者可能面临的心脏病发作风险，我们可能会用一个向量来表示每个患者， 其分量为最近的生命体征、胆固醇水平、每天运动时间等。 在数学表示法中，我们通常将向量记为粗体、小写的符号 （例如，x、y和z)）。</p><p>我们通过一维张量处理向量。一般来说，张量可以具有任意长度，取决于机器的内存限制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = torch.arange(<span class="number">4</span>)</span><br><span class="line">x</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">tensor([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>我们可以使用下标来引用向量的任一元素。 例如，我们可以通过xi来引用第i个元素。 注意，元素xi是一个标量，所以我们在引用它时不会加粗。 大量文献认为列向量是向量的默认方向，在本书中也是如此。 在数学中，向量x可以写为：</p><p>向量x可以写为：</p><p>$$<br>x= \begin{matrix}<br>   x1 \<br>    x2 \<br>   … \<br>   xn<br>  \end{matrix} \tag{1}<br>$$<br>其中x1,…,xn是向量的元素。在代码中，我们通过张量的索引来访问任一元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">3</span>]</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">tensor(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="长度、维度和形状"><a href="#长度、维度和形状" class="headerlink" title="长度、维度和形状"></a>长度、维度和形状</h2><p>向量只是一个数字数组，就像每个数组都有一个长度一样，每个向量也是如此。 在数学表示法中，如果我们想说一个向量x由n个实值标量组成， 我们可以将其表示为x∈Rn。 向量的长度通常称为向量的<em>维度</em>（dimension）。</p><p>与普通的Python数组一样，我们可以通过调用Python的内置<code>len()</code>函数来访问张量的长度。</p><p><strong>维度：通常的理解是：“点是0维、直线是1维、平面是2维、体是3维</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">#一维</span></span><br><span class="line">torch.tensor([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]) <span class="comment">#二维</span></span><br><span class="line">torch.tensor([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]],[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]])<span class="comment">#三维</span></span><br></pre></td></tr></table></figure><p><strong>形状</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过x.shape可以查看张量的形状</span></span><br><span class="line">x.shape</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p><strong>长度</strong></p><blockquote><p>一个矩阵的长度主要看他最高维的长度</p></blockquote><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">#一维的最高维度是列</span></span><br><span class="line"><span class="comment">#len(x)结果为3</span></span><br><span class="line">x=torch.tensor([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]) <span class="comment">#二维的最高维度是行</span></span><br><span class="line"><span class="comment">#len(x)结果为2</span></span><br><span class="line">x=torch.tensor([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]],[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]])<span class="comment">#三维的最高维度是高</span></span><br><span class="line"><span class="comment">#len(x)结果为2</span></span><br></pre></td></tr></table></figure><p><strong>按特定列求和</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个三维张量,ones((高,行,列))</span></span><br><span class="line">x=torch.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="comment">#如果axis=0 则是对高求和，消去高的那一维度，得到的二维张量size是[3,4]</span></span><br><span class="line">x.<span class="built_in">sum</span>(axis=<span class="number">0</span>).shape</span><br><span class="line">torch.Size([<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">x.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#由于高为2，所以每一个值都是2</span></span><br><span class="line">tensor([[<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">        [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">        [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>]])</span><br><span class="line"><span class="comment">#同理如果axis=1,那么则是消去行的那一维度，得到的二维张量size是[2,4]</span></span><br><span class="line">x.<span class="built_in">sum</span>(axis=<span class="number">1</span>).shape</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line">x.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line">tensor([[<span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>]])</span><br><span class="line"><span class="comment">#如果不想消去特定的维度,把参数keepdims设置为True就可以了，消去的那一个维度变成了1，同时axis还可以传入列表，对多个维度进行求和</span></span><br><span class="line">x.<span class="built_in">sum</span>(axis=<span class="number">1</span>,keepdims=<span class="literal">True</span>).shape</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>])</span><br><span class="line">x.<span class="built_in">sum</span>(axis=[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">tensor([<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>])</span><br></pre></td></tr></table></figure><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>正如向量将标量从零阶推广到一阶，矩阵将向量从一阶推广到二阶。 矩阵，我们通常用粗体、大写字母来表示 （例如，X、Y和Z）， 在代码中表示为具有两个轴的张量。</p><p>在数学表示法中，我们使用A∈Rm×n 来表示矩阵A，其由m行和n列的实值标量组成。 我们可以将任意矩阵A∈Rm×n视为一个表格， 其中每个元素aij属于第i行第j列：</p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221130173553.png?raw=true" alt="blog_images20221130173553.png"></p><p>对于任意A∈Rm×n， A的形状是（m,n）或m×n。 当矩阵具有相同数量的行和列时，其形状将变为正方形； 因此，它被称为<em>方阵</em>（square matrix）。</p><p>当调用函数来实例化张量时， 我们可以通过指定两个分量m和n来创建一个形状为m×n的矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = torch.arange(<span class="number">20</span>).reshape(<span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line">A</span><br><span class="line">tensor([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]])</span><br></pre></td></tr></table></figure><p>我们可以通过行索引（i）和列索引（j）来访问矩阵中的标量元素aij， 例如[A]ij。 如果没有给出矩阵A的标量元素，如在那样， 我们可以简单地使用矩阵A的小写字母索引下标aij 来引用[A]ij。 为了表示起来简单，只有在必要时才会将逗号插入到单独的索引中， 例如a2,3j和[A]2i−1,3。</p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221130174651.png?raw=true" alt="blog_images20221130174651.png"></p><p>当我们交换矩阵的行和列时，结果称为矩阵的<em>转置</em>（transpose）。 我们用a⊤来表示矩阵的转置，如果B=A⊤， 则对于任意i和j，都有bij=aji。 因此，在 <a href="https://zh-v2.d2l.ai/chapter_preliminaries/linear-algebra.html#equation-eq-matrix-def">(2.3.2)</a>中的转置是一个形状为n×m的矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.T</span><br></pre></td></tr></table></figure><p>作为方阵的一种特殊类型，<em>对称矩阵</em>（symmetric matrix）A等于其转置：A=A⊤。 这里我们定义一个对称矩阵B：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">B = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line">B</span><br><span class="line">tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"><span class="comment">#现在我们将B与它的转置进行比较。</span></span><br><span class="line">B == B.T</span><br><span class="line">tensor([[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">        [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">        [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]])</span><br></pre></td></tr></table></figure><h2 id="张量"><a href="#张量" class="headerlink" title="张量"></a>张量</h2><p>就像向量是标量的推广，矩阵是向量的推广一样，我们可以构建具有更多轴的数据结构。 张量（本小节中的“张量”指代数对象）为我们提供了描述具有任意数量轴的n维数组的通用方法。 例如，向量是一阶张量，矩阵是二阶张量。 张量用特殊字体的大写字母表示（例如，X、Y和Z）， 它们的索引机制（例如xijk和[X]1,2i−1,3）与矩阵类似。</p><p>当我们开始处理图像时，张量将变得更加重要，图像以n维数组形式出现， 其中3个轴对应于高度、宽度，以及一个<em>通道</em>（channel）轴， 用于表示颜色通道（红色、绿色和蓝色）。 现在，我们先将高阶张量暂放一边，而是专注学习其基础知识。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">X = torch.arange(<span class="number">24</span>).reshape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">X</span><br><span class="line">tensor([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">         [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">         [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">         [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">         [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]]</span><br></pre></td></tr></table></figure><h2 id="张量算法的基本性质"><a href="#张量算法的基本性质" class="headerlink" title="张量算法的基本性质"></a>张量算法的基本性质</h2><p>标量、向量、矩阵和任意数量轴的张量（本小节中的“张量”指代数对象）有一些实用的属性。 例如，你可能已经从按元素操作的定义中注意到，任何按元素的一元运算都不会改变其操作数的形状。 同样，给定具有相同形状的任意两个张量，任何按元素二元运算的结果都将是相同形状的张量。 例如，将两个相同形状的矩阵相加，会在这两个矩阵上执行元素加法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A = torch.arange(<span class="number">20</span>, dtype=torch.float32).reshape(<span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line">B = A.clone()  <span class="comment"># 通过分配新内存，将A的一个副本分配给B</span></span><br><span class="line">A, A + B</span><br><span class="line">(tensor([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">         [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">         [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">         [<span class="number">12.</span>, <span class="number">13.</span>, <span class="number">14.</span>, <span class="number">15.</span>],</span><br><span class="line">         [<span class="number">16.</span>, <span class="number">17.</span>, <span class="number">18.</span>, <span class="number">19.</span>]]),</span><br><span class="line"> tensor([[ <span class="number">0.</span>,  <span class="number">2.</span>,  <span class="number">4.</span>,  <span class="number">6.</span>],</span><br><span class="line">         [ <span class="number">8.</span>, <span class="number">10.</span>, <span class="number">12.</span>, <span class="number">14.</span>],</span><br><span class="line">         [<span class="number">16.</span>, <span class="number">18.</span>, <span class="number">20.</span>, <span class="number">22.</span>],</span><br><span class="line">         [<span class="number">24.</span>, <span class="number">26.</span>, <span class="number">28.</span>, <span class="number">30.</span>],</span><br><span class="line">         [<span class="number">32.</span>, <span class="number">34.</span>, <span class="number">36.</span>, <span class="number">38.</span>]]))</span><br></pre></td></tr></table></figure><p>具体而言，两个矩阵的按元素乘法称为<em>Hadamard积</em>（Hadamard product）（数学符号⊙）。 对于矩阵B∈Rm×n， 其中第i行和第j列的元素是bij。 矩阵A和B的Hadamard积为：</p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221201194456.png?raw=true" alt="blog_images20221201194456.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A * B</span><br><span class="line">tensor([[  <span class="number">0.</span>,   <span class="number">1.</span>,   <span class="number">4.</span>,   <span class="number">9.</span>],</span><br><span class="line">        [ <span class="number">16.</span>,  <span class="number">25.</span>,  <span class="number">36.</span>,  <span class="number">49.</span>],</span><br><span class="line">        [ <span class="number">64.</span>,  <span class="number">81.</span>, <span class="number">100.</span>, <span class="number">121.</span>],</span><br><span class="line">        [<span class="number">144.</span>, <span class="number">169.</span>, <span class="number">196.</span>, <span class="number">225.</span>],</span><br><span class="line">        [<span class="number">256.</span>, <span class="number">289.</span>, <span class="number">324.</span>, <span class="number">361.</span>]])</span><br></pre></td></tr></table></figure><p>将张量乘以或加上一个标量不会改变张量的形状，其中张量的每个元素都将与标量相加或相乘。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line">X = torch.arange(<span class="number">24</span>).reshape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">a + X, (a * X).shape</span><br><span class="line">(tensor([[[ <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],</span><br><span class="line">          [ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">          [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>],</span><br><span class="line">          [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>],</span><br><span class="line">          [<span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>]]]),</span><br><span class="line"> torch.Size([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br></pre></td></tr></table></figure><h2 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h2><p>我们可以对任意张量进行的一个有用的操作是计算其元素的和。 在数学表示法中，我们使用∑符号表示求和。 为了表示长度为d的向量中元素的总和，可以记为∑i=1dxi。 在代码中，我们可以调用计算求和的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = torch.arange(<span class="number">4</span>, dtype=torch.float32)</span><br><span class="line">x, x.<span class="built_in">sum</span>()</span><br><span class="line">(tensor([<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>]), tensor(<span class="number">6.</span>))</span><br></pre></td></tr></table></figure><p>我们可以表示任意形状张量的元素和。 例如，矩阵A中元素的和可以记为∑i=1m∑j=1naij。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A.shape, A.<span class="built_in">sum</span>()</span><br><span class="line">(torch.Size([<span class="number">5</span>, <span class="number">4</span>]), tensor(<span class="number">190.</span>))</span><br></pre></td></tr></table></figure><p>默认情况下，调用求和函数会沿所有的轴降低张量的维度，使它变为一个标量。 我们还可以指定张量沿哪一个轴来通过求和降低维度。 以矩阵为例，为了通过求和所有行的元素来降维（轴0），我们可以在调用函数时指定<code>axis=0</code>。 由于输入矩阵沿0轴降维以生成输出向量，因此输入轴0的维数在输出形状中消失。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A_sum_axis0 = A.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br><span class="line">A_sum_axis0, A_sum_axis0.shape</span><br><span class="line">(tensor([<span class="number">40.</span>, <span class="number">45.</span>, <span class="number">50.</span>, <span class="number">55.</span>]), torch.Size([<span class="number">4</span>]))</span><br></pre></td></tr></table></figure><p>指定<code>axis=1</code>将通过汇总所有列的元素降维（轴1）。因此，输入轴1的维数在输出形状中消失。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A_sum_axis1 = A.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line">A_sum_axis1, A_sum_axis1.shape</span><br><span class="line">(tensor([ <span class="number">6.</span>, <span class="number">22.</span>, <span class="number">38.</span>, <span class="number">54.</span>, <span class="number">70.</span>]), torch.Size([<span class="number">5</span>]))</span><br></pre></td></tr></table></figure><p>沿着行和列对矩阵求和，等价于对矩阵的所有元素进行求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A.<span class="built_in">sum</span>(axis=[<span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># SameasA.sum()</span></span><br><span class="line">tensor(<span class="number">190.</span>)</span><br></pre></td></tr></table></figure><p>同样，计算平均值的函数也可以沿指定轴降低张量的维度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A.mean(axis=<span class="number">0</span>), A.<span class="built_in">sum</span>(axis=<span class="number">0</span>) / A.shape[<span class="number">0</span>]</span><br><span class="line">(tensor([ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>]), tensor([ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>]))</span><br></pre></td></tr></table></figure><h2 id="点积"><a href="#点积" class="headerlink" title="点积"></a>点积</h2><p>我们已经学习了按元素操作、求和及平均值。 另一个最基本的操作之一是点积。 给定两个向量x,y∈Rd， 它们的<em>点积</em>（dot product）x⊤y （或⟨x,y⟩） 是相同位置的按元素乘积的和：x⊤y=∑i=1dxiyi。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = torch.ones(<span class="number">4</span>, dtype = torch.float32)</span><br><span class="line">x, y, torch.dot(x, y)</span><br><span class="line">(tensor([<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>]), tensor([<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]), tensor(<span class="number">6.</span>))</span><br></pre></td></tr></table></figure><p>注意，我们可以通过执行按元素乘法，然后进行求和来表示两个向量的点积：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">torch.sum(x * y)</span><br><span class="line">tensor(6.)</span><br></pre></td></tr></table></figure><p>点积在很多场合都很有用。 例如，给定一组由向量x∈Rd表示的值， 和一组由w∈Rd表示的权重。 x中的值根据权重w的加权和， 可以表示为点积x⊤w。 当权重为非负数且和为1（即(∑i=1dwi=1)）时， 点积表示<em>加权平均</em>（weighted average）。 将两个向量规范化得到单位长度后，点积表示它们夹角的余弦。 我们将在本节的后面正式介绍<em>长度</em>（length）的概念。</p><h1 id="Pytorch读取数据"><a href="#Pytorch读取数据" class="headerlink" title="Pytorch读取数据"></a>Pytorch读取数据</h1><h2 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h2><p>提供一种方式去获取数据以及label</p><p>功能：</p><ul><li>如何获取每一个数据及其label</li><li>告诉我们总共有多少数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, label_dir</span>):</span><br><span class="line">        self.root_dir = root_dir  <span class="comment">#根路径</span></span><br><span class="line">        self.label_dir = label_dir <span class="comment">#图片路径</span></span><br><span class="line">        self.path = os.path.join(root_dir, label_dir)<span class="comment">#合成路径</span></span><br><span class="line">        self.img_path = os.listdir(self.path)<span class="comment">#获取图片名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        img_name = self.img_path[idx] <span class="comment">#根据索引获取列表里面图片名称</span></span><br><span class="line">        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)<span class="comment">#获取图片路径</span></span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_item_path)<span class="comment">#打开图片</span></span><br><span class="line">        label = self.label_dir<span class="comment">#设置标签</span></span><br><span class="line">        <span class="keyword">return</span> img, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root_dir = <span class="string">&quot;../Pytorch/hymenoptera_data/train&quot;</span></span><br><span class="line">    ants_label_dir = <span class="string">&quot;ants&quot;</span></span><br><span class="line">    bees_label_dir = <span class="string">&quot;bees&quot;</span></span><br><span class="line">    ants_data = MyData(root_dir, ants_label_dir)</span><br><span class="line">    bees_data = MyData(root_dir, bees_label_dir)</span><br><span class="line">    trans_data = ants_data + bees_data</span><br><span class="line">    img_list_path = os.listdir(os.path.join(root_dir, bees_label_dir))<span class="comment">#获取图片名称</span></span><br><span class="line">    ants_label = <span class="string">&quot;bees_label&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> img_list_path:</span><br><span class="line">        filename = i.split(<span class="string">&#x27;.jpg&#x27;</span>)[<span class="number">0</span>]<span class="comment">#把.jpg去掉</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(root_dir, ants_label, <span class="string">&quot;&#123;&#125;.txt&quot;</span>.<span class="built_in">format</span>(filename)), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">&quot;bees&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="DataLoader"><a href="#DataLoader" class="headerlink" title="DataLoader"></a>DataLoader</h2><p>为后面的网络提供不同的数据形式，组合数据集和采样器，并在给定数据集上提供可迭代对象。</p><p>:类:“~ torch.utils.data。DataLoader ‘支持地图风格和可迭代风格的数据集，具有单进程或多进程加载、自定义加载顺序和可选的自动批处理(排序)和内存固定</p><p>常用参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataset (Dataset):加载的数据集</span><br><span class="line">batch_size：每次加载多少数据</span><br><span class="line">shuffle：设置为True 以在每次读取的时候重新洗牌数据(默认值:&#x27; &#x27; False &#x27; &#x27;)。</span><br></pre></td></tr></table></figure><h1 id="TensorBoard使用"><a href="#TensorBoard使用" class="headerlink" title="TensorBoard使用"></a>TensorBoard使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img_path = <span class="string">&quot;../Pytorch/hymenoptera_data/train/ants/0013035.jpg&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">img_array = np.array(img)</span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"><span class="comment"># for i in range(100):</span></span><br><span class="line"><span class="comment">#     writer.add_scalar(&quot;y=x&quot;, i, i)</span></span><br><span class="line">writer.add_image(<span class="string">&quot;test&quot;</span>, img_array, <span class="number">2</span>, dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line">writer.close()</span><br><span class="line"><span class="comment"># tensorboard --logdir=logs 打开tensorboard terminal执行此命令</span></span><br></pre></td></tr></table></figure><p><strong>比较常用的TensorBoard</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">img_path = <span class="string">&quot;../Pytorch/hymenoptera_data/train/ants/0013035.jpg&quot;</span></span><br><span class="line">image = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line"><span class="comment"># ToTensor</span></span><br><span class="line">tensor = transforms.ToTensor()</span><br><span class="line">img_tensor = tensor(image)</span><br><span class="line">writer.add_image(<span class="string">&quot;ToTensor&quot;</span>, img_tensor)</span><br><span class="line"><span class="comment"># Normalize 规格化</span></span><br><span class="line">normalize = transforms.Normalize([<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>], [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">img_nor = normalize(img_tensor)</span><br><span class="line">writer.add_image(<span class="string">&quot;Normalize&quot;</span>, img_nor)</span><br><span class="line"><span class="comment"># Resize 改变大小</span></span><br><span class="line">trans_resize = transforms.Resize((<span class="number">512</span>, <span class="number">512</span>))</span><br><span class="line">img_resize = trans_resize(image)</span><br><span class="line">img_resize = tensor(img_resize)</span><br><span class="line">writer.add_image(<span class="string">&quot;Resize&quot;</span>, img_resize)</span><br><span class="line"><span class="comment"># Compose 用于组合各种转换器</span></span><br><span class="line">resize = transforms.Resize(<span class="number">512</span>)</span><br><span class="line">compose = transforms.Compose([resize, tensor])</span><br><span class="line">img_compose = compose(image)</span><br><span class="line">writer.add_image(<span class="string">&quot;Compose&quot;</span>, img_compose)</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Pytorch</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Python</title>
    <link href="http://example.com/2022/11/09/python/"/>
    <id>http://example.com/2022/11/09/python/</id>
    <published>2022-11-09T10:00:00.000Z</published>
    <updated>2022-11-22T08:52:58.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>标识符是编程时使用的名字，用于给变量、函数、语句块等命名，Python 中标识符由字母、数字、下划线组成，不能以数字开头，区分大小写。</p><p>以下划线开头的标识符有特殊含义，单下划线开头的标识符，如：<em>xxx ，表示不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 导入；双下划线开头的标识符，如：xx，表示私有成员；双下划线开头和结尾的标识符，如：xx，表示 Python 中内置标识，如：init</em>_() 表示类的构造函数。</p><h1 id="python关键字"><a href="#python关键字" class="headerlink" title="python关键字"></a>python关键字</h1><table><thead><tr><th>and</th><th>exec</th><th>not</th><th>assert</th><th>finally</th><th>or</th></tr></thead><tbody><tr><td><strong>break</strong></td><td><strong>for</strong></td><td><strong>pass</strong></td><td><strong>class</strong></td><td><strong>from</strong></td><td><strong>print</strong></td></tr><tr><td><strong>continue</strong></td><td><strong>global</strong></td><td><strong>raise</strong></td><td><strong>def</strong></td><td><strong>if</strong></td><td><strong>return</strong></td></tr><tr><td><strong>del</strong></td><td><strong>import</strong></td><td><strong>try</strong></td><td><strong>elif</strong></td><td><strong>in</strong></td><td><strong>while</strong></td></tr><tr><td><strong>else</strong></td><td><strong>is</strong></td><td><strong>with</strong></td><td><strong>except</strong></td><td><strong>lambda</strong></td><td><strong>yield</strong></td></tr></tbody></table><h1 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h1><p>Python2 中默认编码为 ASCII，假如内容为汉字，不指定编码便不能正确的输出及读取，比如我们想要指定编码为 UTF-8，Python 中通过在开头加入 # – coding: UTF-8 – 进行指定。</p><p>Python3 中默认编码为 UTF-8，因此在使用 Python3 时，我们通常不需指定编码。</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>Python 中单行注释使用 <code>#</code>，多行注释使用三个单引号（<code>&#39;&#39;&#39;</code>）或三个双引号（<code>&quot;&quot;&quot;</code>）</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li><strong>整数</strong>：可以为任意大小、包含负数</li><li><strong>浮点数</strong>：就是小数</li><li><strong>字符串</strong>：以单引号 <code>&#39;</code>、双引号<code>&quot;</code>、三引号 <code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code>括起来的文本</li><li><strong>布尔</strong>：只有 <code>True</code>、<code>False</code> 两种值</li><li><strong>空值</strong>：用 <code>None</code> 表示</li><li><strong>变量</strong>：是可变的</li><li><strong>常量</strong>：不可变</li></ul><h1 id="Python内置函数"><a href="#Python内置函数" class="headerlink" title="Python内置函数"></a>Python内置函数</h1><h2 id="abs-绝对值函数"><a href="#abs-绝对值函数" class="headerlink" title="abs()绝对值函数"></a>abs()绝对值函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">abs</span>(-<span class="number">10</span>)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="all"><a href="#all" class="headerlink" title="all()"></a>all()</h2><p>接收一个可迭代对象，如果对象里的所有元素的bool运算值都是True，那么返回True，否则False。如果all函数中的可迭代对象是空的，直接返回True。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([])</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="any"><a href="#any" class="headerlink" title="any()"></a>any()</h2><p>接收一个可迭代对象，如果迭代对象里有一个元素的bool运算值是True，那么返回True，否则False。与all()是一对兄弟。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="ascii"><a href="#ascii" class="headerlink" title="ascii()"></a>ascii()</h2><p>调用对象的<code>__repr__()</code>方法，获得该方法的返回值。<code>__repr__()</code>方法是由对象所属类型实现的方法。不可以简单地理解为print或echo。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s = “haha”</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ascii</span>(s)</span><br><span class="line"><span class="string">&quot;&#x27;haha&#x27;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ascii</span>(a)</span><br><span class="line"><span class="string">&#x27;[1, 2, 3]&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="bin-、oct-、hex"><a href="#bin-、oct-、hex" class="headerlink" title="bin()、oct()、hex()"></a>bin()、oct()、hex()</h2><p>三个函数是将十进制数分别转换为2/8/16进制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(i)</span><br><span class="line"><span class="string">&#x27;0b1010&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">oct</span>(i)</span><br><span class="line"><span class="string">&#x27;0o12&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(i)</span><br><span class="line"><span class="string">&#x27;0xa&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="bool"><a href="#bool" class="headerlink" title="bool()"></a>bool()</h2><p>测试一个对象或表达式的执行结果是True还是False。这个在布尔数据类型章节中已经很详细的介绍过了。Ps:实际上bool是一个类，不是函数，bool()的返回值是一个布尔类型的实例。builtins中的很多函数，其实都是类，比如bytes()，str()等等。只是因为称呼的习惯，我们叫它函数，严格意义上说，这是不对的，大家心里有数就可以，后面就不再重复说明。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="number">1</span>==<span class="number">2</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="built_in">abs</span>(-<span class="number">1</span>))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="literal">None</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="bytearray"><a href="#bytearray" class="headerlink" title="bytearray"></a>bytearray</h2><p>实例化一个bytearray类型的对象。参数可以是字符串、整数或者可迭代对象。bytearray是Python内置的一种可变的序列数据类型，具有大多数bytes类型同样的方法。</p><p>当参数是字符串的时候，需要指定编码类型。</p><p>当参数是整数时，会创建以该整数为长度，包含同样个数空的bytes对象的数组。</p><p>当参数是个可迭代的对象时，该对象必须是一个取值范围<code>0 &lt;= x &lt; 256</code>的整数序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">bytearray</span>(<span class="string">&quot;asdff&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">bytearray</span>(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="built_in">bytearray</span>(<span class="string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">bytearray</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line"><span class="built_in">bytearray</span>(<span class="string">b&#x27;\x01\x02\x03&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">bytearray</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">300</span>])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#12&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    d = <span class="built_in">bytearray</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">300</span>])</span><br><span class="line">ValueError: byte must be <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>)</span><br></pre></td></tr></table></figure><h2 id="bytes"><a href="#bytes" class="headerlink" title="bytes()"></a>bytes()</h2><p>将对象转换成字节类型。例如：<code>s = &#39;张三&#39;;m = bytes(s,encoding=&#39;utf-8&#39;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i=<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bytes</span>(i)</span><br><span class="line"><span class="string">b&#x27;\x00\x00&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;haha&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bytes</span>(s)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#24&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">bytes</span>(s)</span><br><span class="line">TypeError: string argument without an encoding</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bytes</span>(s, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="string">b&#x27;haha&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bytes</span>(s, encoding=<span class="string">&quot;GBK&quot;</span>)</span><br><span class="line"><span class="string">b&#x27;haha&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="str"><a href="#str" class="headerlink" title="str()"></a>str()</h2><p>将对象转换成字符串类型，同样也可以指定编码方式。例如：<code>str(bytes对象，encoding=&#39;utf-8&#39;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i =  <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(i)</span><br><span class="line"><span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">b&quot;haha&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(b)      <span class="comment"># 注意！</span></span><br><span class="line"><span class="string">&quot;b&#x27;haha&#x27;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(b,encoding=<span class="string">&quot;gb2312&quot;</span>)</span><br><span class="line"><span class="string">&#x27;haha&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,])</span><br><span class="line"><span class="string">&#x27;[1, 2, 3]&#x27;</span></span><br></pre></td></tr></table></figure><p>Bytes和string之间的互相转换，更多使用的是encode()和decode()方法。</p><h2 id="callable"><a href="#callable" class="headerlink" title="callable()"></a>callable()</h2><p>判断对象是否可以被调用。如果某个对象具有<code>__call__</code>方法，那它就能被调用。 例如，<code>def f1(): pass</code>,那么<code>callable(f1)</code>返回True。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(f1)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(a)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f_obj = Foo(<span class="string">&quot;jack&quot;</span>,<span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(f_obj)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(Foo)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="chr"><a href="#chr" class="headerlink" title="chr()"></a>chr()</h2><p>返回某个十进制数对应的ASCII字符，例如：<code>chr(99) = ‘c’</code>。它可以配合<code>random.randint(65，90)</code>随机方法，生成随机字符，用于生产随机验证码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    a = random.randint(<span class="number">65</span>,<span class="number">90</span>)</span><br><span class="line">    c = <span class="built_in">chr</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><h2 id="ord"><a href="#ord" class="headerlink" title="ord()"></a>ord()</h2><p>与chr()相反，返回某个ASCII字符对应的十进制数，例如，<code>ord(&#39;A&#39;) = 65</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="classmethod-、staticmethod-和property"><a href="#classmethod-、staticmethod-和property" class="headerlink" title="classmethod()、staticmethod()和property()"></a>classmethod()、staticmethod()和property()</h2><p>类机制中，用于生成类方法、静态方法和属性的函数。</p><h2 id="compile"><a href="#compile" class="headerlink" title="compile()"></a>compile()</h2><p>将字符串编译成Python能识别或执行的代码。 也可以将文件读成字符串再编译。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s  = <span class="string">&quot;print(&#x27;helloworld&#x27;)&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="built_in">compile</span>(s,<span class="string">&quot;&lt;string&gt;&quot;</span>,<span class="string">&quot;exec&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r</span><br><span class="line">&lt;code <span class="built_in">object</span> &lt;module&gt; at <span class="number">0x000001B23E6BE660</span>, file <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#14&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    r()</span><br><span class="line">TypeError: <span class="string">&#x27;code&#x27;</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">callable</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(r)</span><br><span class="line">helloworld</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(r)</span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure><h2 id="complex"><a href="#complex" class="headerlink" title="complex()"></a>complex()</h2><p>通过数字或字符串生成复数类型对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">complex</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="number">1</span>+<span class="number">2j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">complex</span>(<span class="string">&#x27;3+4j&#x27;</span>)</span><br><span class="line">(<span class="number">3</span>+<span class="number">4j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">complex</span>(<span class="string">&#x27;3 +4j&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#2&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">complex</span>(<span class="string">&#x27;3 +4j&#x27;</span>)</span><br><span class="line">ValueError: <span class="built_in">complex</span>() arg <span class="keyword">is</span> a malformed string</span><br></pre></td></tr></table></figure><p>使用字符串的时候，+号左右不能有空白。</p><h2 id="delattr-、setattr-、getattr-、hasattr"><a href="#delattr-、setattr-、getattr-、hasattr" class="headerlink" title="delattr()、setattr()、getattr()、hasattr()"></a>delattr()、setattr()、getattr()、hasattr()</h2><p>类机制中，分别用来删除、设置、获取和判断属性。后面会有详解。</p><h2 id="dir"><a href="#dir" class="headerlink" title="dir()"></a>dir()</h2><p>显示对象所有的属性和方法。最棒的辅助函数之一！</p><h2 id="int-、float-、list-、dict-、set-、tuple"><a href="#int-、float-、list-、dict-、set-、tuple" class="headerlink" title="int()、float()、list()、dict()、set()、tuple()"></a>int()、float()、list()、dict()、set()、tuple()</h2><p>与bool()、str()、bytes()一样，它们都是实例化对应数据类型的类。</p><h2 id="divmod"><a href="#divmod" class="headerlink" title="divmod()"></a>divmod()</h2><p>除法，同时返回商和余数的元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">divmod</span>(<span class="number">10</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">divmod</span>(<span class="number">11</span>,<span class="number">4</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h2><p>枚举函数，在迭代对象的时候，额外提供一个序列号的输出。注意：<code>enumerate(li,1)</code>中的1表示从1开始序号，默认从0开始。注意，第二个参数才是你想要的序号开始，不是第一个参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&quot;k1&quot;</span>:<span class="string">&quot;v1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;k2&quot;</span>:<span class="string">&quot;v2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;k3&quot;</span>:<span class="string">&quot;v3&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, key <span class="keyword">in</span> <span class="built_in">enumerate</span>(dic, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,<span class="string">&quot;\t&quot;</span>,key)</span><br></pre></td></tr></table></figure><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><p>将字符串直接解读并执行。例如：<code>s = &quot;6*8&quot;</code>，s是一个字符串，<code>d = eval(s)</code>， d的结果是48。</p><h2 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h2><p>执行字符串或compile方法编译过的字符串，没有返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&quot;print(&#x27;this is a test&#x27;)&quot;</span>)</span><br><span class="line">this <span class="keyword">is</span> a test</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;print(&#x27;this is a test&#x27;)&quot;</span>)</span><br><span class="line">this <span class="keyword">is</span> a test</span><br></pre></td></tr></table></figure><h2 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h2><p>执行format()，其实就是调用该对象所属类的<code>__format__</code>方法。类似print功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="string">&quot;324324&quot;</span>)</span><br><span class="line"><span class="string">&#x27;324324&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="string">&#x27;[1, 2, 3]&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="frozenset"><a href="#frozenset" class="headerlink" title="frozenset()"></a>frozenset()</h2><p>返回一个不能增加和修改的集合类型对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">frozenset</span>(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="built_in">frozenset</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="globals"><a href="#globals" class="headerlink" title="globals()"></a>globals()</h2><p>列出当前环境下所有的全局变量。注意要与global关键字区分！在本节的开始，我们就已经展示了它的用法。</p><h2 id="hash"><a href="#hash" class="headerlink" title="hash()"></a>hash()</h2><p>为不可变对象，例如字符串生成哈希值的函数！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="string">&quot;i am jack&quot;</span>)</span><br><span class="line"><span class="number">5602200374213231465</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="number">100000</span>)</span><br><span class="line"><span class="number">100000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#4&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">hash</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,])</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="number">2528502973977326415</span></span><br></pre></td></tr></table></figure><h2 id="help"><a href="#help" class="headerlink" title="help()"></a>help()</h2><p>返回对象的帮助文档。谁用谁知道！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(a)</span><br><span class="line">Help on <span class="built_in">list</span> <span class="built_in">object</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">list</span>(<span class="title class_ inherited__">object</span>)</span><br><span class="line"> |  <span class="built_in">list</span>() -&gt; new empty <span class="built_in">list</span></span><br><span class="line"> |  <span class="built_in">list</span>(iterable) -&gt; new <span class="built_in">list</span> initialized <span class="keyword">from</span> iterable<span class="string">&#x27;s items</span></span><br><span class="line"><span class="string"> ...</span></span><br></pre></td></tr></table></figure><h2 id="id"><a href="#id" class="headerlink" title="id()"></a>id()</h2><p>返回对象的内存地址,常用来查看变量引用的变化，对象是否相同等。常用功能之一！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(<span class="number">0</span>)</span><br><span class="line"><span class="number">1456845856</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="number">1456365792</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">37116704</span></span><br></pre></td></tr></table></figure><h2 id="input"><a href="#input" class="headerlink" title="input()"></a>input()</h2><p>接收用户输入，返回一个输入的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">input</span>(<span class="string">&quot;Please input a number:  &quot;</span>)</span><br><span class="line">Please <span class="built_in">input</span> a number:  <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;100&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h2><p>判断一个对象是否是某个类的实例。比type()方法适用面更广。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="string">&quot;haha&quot;</span>, <span class="built_in">str</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="number">1</span>, <span class="built_in">str</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="issubclass"><a href="#issubclass" class="headerlink" title="issubclass()"></a>issubclass()</h2><p>issubclass(a，b),判断a是否是b的子类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Goo</span>(<span class="title class_ inherited__">Foo</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">issubclass</span>(Goo, Foo)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="iter"><a href="#iter" class="headerlink" title="iter()"></a>iter()</h2><p>制造一个迭代器，使其具备next()能力。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lis = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(lis)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#8&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">next</span>(lis)</span><br><span class="line">TypeError: <span class="string">&#x27;list&#x27;</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> an iterator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="built_in">iter</span>(lis)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i</span><br><span class="line">&lt;list_iterator <span class="built_in">object</span> at <span class="number">0x0000000002B4A128</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(i)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h2><p>返回对象的长度。不能再常用的函数之一了。</p><h2 id="locals"><a href="#locals" class="headerlink" title="locals()"></a>locals()</h2><p>返回当前可用的局部变量。</p><h2 id="max-min"><a href="#max-min" class="headerlink" title="max()/min():"></a>max()/min():</h2><p>返回给定集合里的最大或者最小的元素。可以指定排序的方法！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst=[<span class="string">&#x27;abcdhush8&#x27;</span>,<span class="string">&#x27;abc9iujtwertwert&#x27;</span>,<span class="string">&#x27;abcdjlas&#x27;</span>,<span class="string">&#x27;abcdj897h&#x27;</span>]</span><br><span class="line">a = <span class="built_in">min</span>(lst,key=<span class="built_in">len</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h2 id="memoryview-obj"><a href="#memoryview-obj" class="headerlink" title="memoryview(obj)"></a>memoryview(obj)</h2><p>返回obj的内存视图对象。obj只能是bytes或bytesarray类型。memoryview对象的使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v = <span class="built_in">memoryview</span>(<span class="string">b&#x27;abcefg&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v[<span class="number">1</span>]</span><br><span class="line"><span class="number">98</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v[-<span class="number">1</span>]</span><br><span class="line"><span class="number">103</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">&lt;memory at <span class="number">0x7f3ddc9f4350</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bytes</span>(v[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line"><span class="string">b&#x27;bce&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h2><p>通过调用迭代器的<code>__next__()</code>方法，获取下一个元素。</p><h2 id="object"><a href="#object" class="headerlink" title="object()"></a>object()</h2><p>该方法不接收任何参数，返回一个没有任何功能的对象。object是Python所有类的基类。</p><h2 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h2><p>打开文件的方法。在Python2里，还有一个file()方法，Python3中被废弃了。后面章节会详细介绍open()的用法。</p><h2 id="pow"><a href="#pow" class="headerlink" title="pow()"></a>pow()</h2><p>幂函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">pow</span>(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h2><p>这个还用介绍吗？</p><h2 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h2><p>没错，这是Python内置的函数，前面已经介绍了。</p><h2 id="repr"><a href="#repr" class="headerlink" title="repr()"></a>repr()</h2><p>调用对象所属类的<code>__repr__</code>方法，与print功能类似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;hashdfh&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">repr</span>(s)</span><br><span class="line"><span class="string">&quot;&#x27;hashdfh&#x27;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="reversed"><a href="#reversed" class="headerlink" title="reversed()"></a>reversed()</h2><p>反转，逆序对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">reversed</span>            <span class="comment"># reversed本身是个类</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;reversed&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">reversed</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])   <span class="comment"># 获得一个列表反转器</span></span><br><span class="line">&lt;list_reverseiterator <span class="built_in">object</span> at <span class="number">0x0000022E322B5128</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">reversed</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&lt;list_reverseiterator <span class="built_in">object</span> at <span class="number">0x0000022E32359668</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a)         <span class="comment"># 使用list方法将它转换为一个列表</span></span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="round"><a href="#round" class="headerlink" title="round()"></a>round()</h2><p>四舍五入．</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">round</span>(<span class="number">1.5</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">round</span>(<span class="number">1.4</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><p>返回一个切片类型的对象。slice是一个类，一种Python的数据类型。Python将对列表等序列数据类型的切片功能单独拿出来设计了一个slice类，可在某些场合下使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">slice</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="built_in">slice</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(s)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;slice&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lis = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lis</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lis[s]          <span class="comment"># 注意用法</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h2 id="sum"><a href="#sum" class="headerlink" title="sum()"></a>sum()</h2><p>求和．</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)          <span class="comment"># 需要传入一个可迭代的对象</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#15&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">TypeError: <span class="built_in">sum</span> expected at most <span class="number">2</span> arguments, got <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])            <span class="comment"># 传入一个列表</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="number">2</span>:<span class="number">2</span>&#125;)          <span class="comment"># 突发奇想，作死传入一个字典</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h2><p>调用父类。面向对象中类的机制相关。后面介绍。</p><h2 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h2><p>显示对象所属的数据类型。常用方法！前面已经展示过。</p><h2 id="vars"><a href="#vars" class="headerlink" title="vars()"></a>vars()</h2><p>与dir()方法类似，不过dir()方法返回的是key，vars()方法返回key的同时还把value一起打印了。</p><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>映射函数。使用指定的函数，处理可迭代对象，并将结果保存在一个map对象中，本质上和大数据的mapreduce中的map差不多。</p><p>使用格式：<code>obj = map(func, iterable)</code>,func是某个函数名，iterable是一个可迭代对象。</p><p>细心的同学可能发现了，我除了组合一些成对的或者同类系列的内置函数。还有map()函数，连同后面的filter()、zip()、sorted()和<code>__import__()</code>函数都没有介绍。因为这几个内置函数功能非常强大，使用场景非常多，Python非常贴心地帮我们实现并内置了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">data = <span class="built_in">map</span>(<span class="keyword">lambda</span> x :x*<span class="number">100</span>,li)  <span class="comment"># 这里直接使用了一个匿名函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))       <span class="comment"># 返回值是一个map对象，它是个迭代器。</span></span><br><span class="line">data = <span class="built_in">list</span>(data)       <span class="comment"># 可以用list方法将map对象中的元素全部生成出来，保存到一个列表里。</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">------------------------------------------------------</span><br><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;map&#x27;</span>&gt;</span><br><span class="line">[<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>过滤器，用法和map类似。在函数中设定过滤的条件，逐一循环对象中的元素，将返回值为True时的元素留下（注意，不是留下返回值！），形成一个filter类型的迭代器。</p><h1 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h1><p>阅读: 27233   <a href="https://www.liujiangblog.com/course/python/40#comments">评论</a>：10</p><hr><p>你会不会有些好奇Python为什么可以直接使用一些内建函数，而不用显式的导入它们？比如 str()、int()、dir()、id()、type()，max()，min()，len()等，许多许多非常好用，快捷方便的函数。</p><p>因为这些函数都是一个叫做<code>builtins</code>模块中定义的函数，而<code>builtins</code>模块默认在Python环境启动的时候就自动导入，所以你可以直接使用这些函数。</p><p>我们可以在IDLE里查证一番：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; globals()</span><br><span class="line">&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; dir(__builtins__)</span><br><span class="line">[&#x27;ArithmeticError&#x27;, &#x27;AssertionError&#x27;, &#x27;AttributeError&#x27;, &#x27;BaseException&#x27;, &#x27;BlockingIOError&#x27;, &#x27;BrokenPipeError&#x27;, &#x27;BufferError&#x27;, &#x27;BytesWarning&#x27;, &#x27;ChildProcessError&#x27;, &#x27;ConnectionAbortedError&#x27;, &#x27;ConnectionError&#x27;, &#x27;ConnectionRefusedError&#x27;, &#x27;ConnectionResetError&#x27;, &#x27;DeprecationWarning&#x27;, &#x27;EOFError&#x27;, &#x27;Ellipsis&#x27;, &#x27;EnvironmentError&#x27;, &#x27;Exception&#x27;, &#x27;False&#x27;, &#x27;FileExistsError&#x27;, &#x27;FileNotFoundError&#x27;, &#x27;FloatingPointError&#x27;, &#x27;FutureWarning&#x27;, &#x27;GeneratorExit&#x27;, &#x27;IOError&#x27;, &#x27;ImportError&#x27;, &#x27;ImportWarning&#x27;, &#x27;IndentationError&#x27;, &#x27;IndexError&#x27;, &#x27;InterruptedError&#x27;, &#x27;IsADirectoryError&#x27;, &#x27;KeyError&#x27;, &#x27;KeyboardInterrupt&#x27;, &#x27;LookupError&#x27;, &#x27;MemoryError&#x27;, &#x27;ModuleNotFoundError&#x27;, &#x27;NameError&#x27;, &#x27;None&#x27;, &#x27;NotADirectoryError&#x27;, &#x27;NotImplemented&#x27;, &#x27;NotImplementedError&#x27;, &#x27;OSError&#x27;, &#x27;OverflowError&#x27;, &#x27;PendingDeprecationWarning&#x27;, &#x27;PermissionError&#x27;, &#x27;ProcessLookupError&#x27;, &#x27;RecursionError&#x27;, &#x27;ReferenceError&#x27;, &#x27;ResourceWarning&#x27;, &#x27;RuntimeError&#x27;, &#x27;RuntimeWarning&#x27;, &#x27;StopAsyncIteration&#x27;, &#x27;StopIteration&#x27;, &#x27;SyntaxError&#x27;, &#x27;SyntaxWarning&#x27;, &#x27;SystemError&#x27;, &#x27;SystemExit&#x27;, &#x27;TabError&#x27;, &#x27;TimeoutError&#x27;, &#x27;True&#x27;, &#x27;TypeError&#x27;, &#x27;UnboundLocalError&#x27;, &#x27;UnicodeDecodeError&#x27;, &#x27;UnicodeEncodeError&#x27;, &#x27;UnicodeError&#x27;, &#x27;UnicodeTranslateError&#x27;, &#x27;UnicodeWarning&#x27;, &#x27;UserWarning&#x27;, &#x27;ValueError&#x27;, &#x27;Warning&#x27;, &#x27;WindowsError&#x27;, &#x27;ZeroDivisionError&#x27;, &#x27;_&#x27;, &#x27;__build_class__&#x27;, &#x27;__debug__&#x27;, &#x27;__doc__&#x27;, &#x27;__import__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;abs&#x27;, &#x27;all&#x27;, &#x27;any&#x27;, &#x27;ascii&#x27;, &#x27;bin&#x27;, &#x27;bool&#x27;, &#x27;bytearray&#x27;, &#x27;bytes&#x27;, &#x27;callable&#x27;, &#x27;chr&#x27;, &#x27;classmethod&#x27;, &#x27;compile&#x27;, &#x27;complex&#x27;, &#x27;copyright&#x27;, &#x27;credits&#x27;, &#x27;delattr&#x27;, &#x27;dict&#x27;, &#x27;dir&#x27;, &#x27;divmod&#x27;, &#x27;enumerate&#x27;, &#x27;eval&#x27;, &#x27;exec&#x27;, &#x27;exit&#x27;, &#x27;filter&#x27;, &#x27;float&#x27;, &#x27;format&#x27;, &#x27;frozenset&#x27;, &#x27;getattr&#x27;, &#x27;globals&#x27;, &#x27;hasattr&#x27;, &#x27;hash&#x27;, &#x27;help&#x27;, &#x27;hex&#x27;, &#x27;id&#x27;, &#x27;input&#x27;, &#x27;int&#x27;, &#x27;isinstance&#x27;, &#x27;issubclass&#x27;, &#x27;iter&#x27;, &#x27;len&#x27;, &#x27;license&#x27;, &#x27;list&#x27;, &#x27;locals&#x27;, &#x27;map&#x27;, &#x27;max&#x27;, &#x27;memoryview&#x27;, &#x27;min&#x27;, &#x27;next&#x27;, &#x27;object&#x27;, &#x27;oct&#x27;, &#x27;open&#x27;, &#x27;ord&#x27;, &#x27;pow&#x27;, &#x27;print&#x27;, &#x27;property&#x27;, &#x27;quit&#x27;, &#x27;range&#x27;, &#x27;repr&#x27;, &#x27;reversed&#x27;, &#x27;round&#x27;, &#x27;set&#x27;, &#x27;setattr&#x27;, &#x27;slice&#x27;, &#x27;sorted&#x27;, &#x27;staticmethod&#x27;, &#x27;str&#x27;, &#x27;sum&#x27;, &#x27;super&#x27;, &#x27;tuple&#x27;, &#x27;type&#x27;, &#x27;vars&#x27;, &#x27;zip&#x27;]</span><br></pre></td></tr></table></figure><p>globals()函数可以查看当前状态下，全局变量有哪些，其中最后一个<code>&#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;</code>就是我们说的builtins模块。再使用dir()函数查看它的成员属性，巴拉巴拉一大堆。</p><p>builtins模块里有接近80个内置函数，60多个内置异常，还有几个内置常数，特殊名称以及模块相关的属性。</p><p>Python通过这个近80个内置函数，为我们提供了丰富、强大、高效、快速的解决方案，大多数时候，我们根本不需要导入第三方库，甚至标准库都不需要。不需要自己造轮子，简简单单地使用Python的内置函数就好了！</p><table><thead><tr><th>内置函数</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>abs()</td><td>dict()</td><td>help()</td><td>min()</td><td>setattr()</td></tr><tr><td>all()</td><td>dir()</td><td>hex()</td><td>next()</td><td>slice()</td></tr><tr><td>any()</td><td>divmod()</td><td>id()</td><td>object()</td><td>sorted()</td></tr><tr><td>ascii()</td><td>enumerate()</td><td>input()</td><td>oct()</td><td>staticmethod()</td></tr><tr><td>bin()</td><td>eval()</td><td>int()</td><td>open()</td><td>str()</td></tr><tr><td>bool()</td><td>exec()</td><td>isinstance()</td><td>ord()</td><td>sum()</td></tr><tr><td>bytearray()</td><td>filter()</td><td>issubclass()</td><td>pow()</td><td>super()</td></tr><tr><td>bytes()</td><td>float()</td><td>iter()</td><td>print()</td><td>tuple()</td></tr><tr><td>callable()</td><td>format()</td><td>len()</td><td>property()</td><td>type()</td></tr><tr><td>chr()</td><td>frozenset()</td><td>list()</td><td>range()</td><td>vars()</td></tr><tr><td>classmethod()</td><td>getattr()</td><td>locals()</td><td>repr()</td><td>zip()</td></tr><tr><td>compile()</td><td>globals()</td><td>map()</td><td>reversed()</td><td><code>__import__()</code></td></tr><tr><td>complex()</td><td>hasattr()</td><td>max()</td><td>round()</td><td></td></tr><tr><td>delattr()</td><td>hash()</td><td>memoryview()</td><td>set()</td><td></td></tr></tbody></table><p>由于Python内置函数的强大、丰富、方便，在此特地用单独的章节进行介绍。因为内容编排的原因，小80个条目中有一部分在前面已经介绍过，有一部分留待后面介绍。</p><h3 id="abs-："><a href="#abs-：" class="headerlink" title="abs()："></a>abs()：</h3><p>绝对值函数。如abs（-1）= 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; abs(-10)</span><br><span class="line">10</span><br><span class="line">&gt;&gt;&gt; f = abs</span><br><span class="line">&gt;&gt;&gt; f(-1)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; abs=id</span><br><span class="line">&gt;&gt;&gt; abs(1)</span><br><span class="line">1869788224</span><br></pre></td></tr></table></figure><p>以abs()函数为例，展示两个特性。一是，内置函数是可以被赋值给其他变量的，同样也可以将其他对象赋值给内置函数，这时就完全变了。所以，内置函数不是Python关键字，要注意对它们的保护，不要使用和内置函数重名的变量名，这会让代码混乱，容易发生难以排查的错误。</p><h3 id="all-1"><a href="#all-1" class="headerlink" title="all()"></a>all()</h3><p>接收一个可迭代对象，如果对象里的所有元素的bool运算值都是True，那么返回True，否则False。不要小瞧了这个函数，用好了，有化腐朽为神奇的特效。</p><p>另外，官方文档说明：如果all函数中的可迭代对象是空的，直接返回True。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; all([1,1,1])</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; all([1,1,0])</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; all([])</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="any-1"><a href="#any-1" class="headerlink" title="any()"></a>any()</h3><p>接收一个可迭代对象，如果迭代对象里有一个元素的bool运算值是True，那么返回True，否则False。与all()是一对兄弟。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; any([0,0,1])</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; any([0,0,0])</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h3 id="ascii-1"><a href="#ascii-1" class="headerlink" title="ascii()"></a>ascii()</h3><p>调用对象的<code>__repr__()</code>方法，获得该方法的返回值。<code>__repr__()</code>方法是由对象所属类型实现的方法。不可以简单地理解为print或echo。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s = “haha”</span><br><span class="line">&gt;&gt;&gt; ascii(s)</span><br><span class="line">&quot;&#x27;haha&#x27;&quot;</span><br><span class="line">&gt;&gt;&gt; a = [1,2,3]</span><br><span class="line">&gt;&gt;&gt; ascii(a)</span><br><span class="line">&#x27;[1, 2, 3]&#x27;</span><br></pre></td></tr></table></figure><h3 id="bin-、oct-、hex-1"><a href="#bin-、oct-、hex-1" class="headerlink" title="bin()、oct()、hex()"></a>bin()、oct()、hex()</h3><p>三个函数是将十进制数分别转换为2/8/16进制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; i = 10</span><br><span class="line">&gt;&gt;&gt; bin(i)</span><br><span class="line">&#x27;0b1010&#x27;</span><br><span class="line">&gt;&gt;&gt; oct(i)</span><br><span class="line">&#x27;0o12&#x27;</span><br><span class="line">&gt;&gt;&gt; hex(i)</span><br><span class="line">&#x27;0xa&#x27;</span><br></pre></td></tr></table></figure><h3 id="bool-1"><a href="#bool-1" class="headerlink" title="bool()"></a>bool()</h3><p>测试一个对象或表达式的执行结果是True还是False。这个在布尔数据类型章节中已经很详细的介绍过了。Ps:实际上bool是一个类，不是函数，bool()的返回值是一个布尔类型的实例。builtins中的很多函数，其实都是类，比如bytes()，str()等等。只是因为称呼的习惯，我们叫它函数，严格意义上说，这是不对的，大家心里有数就可以，后面就不再重复说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(1==2)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(abs(-1))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(None)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h3 id="bytearray-1"><a href="#bytearray-1" class="headerlink" title="bytearray"></a>bytearray</h3><p>实例化一个bytearray类型的对象。参数可以是字符串、整数或者可迭代对象。bytearray是Python内置的一种可变的序列数据类型，具有大多数bytes类型同样的方法。</p><p>当参数是字符串的时候，需要指定编码类型。</p><p>当参数是整数时，会创建以该整数为长度，包含同样个数空的bytes对象的数组。</p><p>当参数是个可迭代的对象时，该对象必须是一个取值范围<code>0 &lt;= x &lt; 256</code>的整数序列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = bytearray(&quot;asdff&quot;,encoding=&#x27;utf-8&#x27;)</span><br><span class="line">&gt;&gt;&gt; b = bytearray(10)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">bytearray(b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;)</span><br><span class="line">&gt;&gt;&gt; d = bytearray([1,2,3])</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">bytearray(b&#x27;\x01\x02\x03&#x27;)</span><br><span class="line">&gt;&gt;&gt; d = bytearray([1,2,300])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#12&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    d = bytearray([1,2,300])</span><br><span class="line">ValueError: byte must be in range(0, 256)</span><br></pre></td></tr></table></figure><h3 id="bytes-1"><a href="#bytes-1" class="headerlink" title="bytes()"></a>bytes()</h3><p>将对象转换成字节类型。例如：<code>s = &#39;张三&#39;;m = bytes(s,encoding=&#39;utf-8&#39;)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; i=2</span><br><span class="line">&gt;&gt;&gt; bytes(i)</span><br><span class="line">b&#x27;\x00\x00&#x27;</span><br><span class="line">&gt;&gt;&gt; s = &#x27;haha&#x27;</span><br><span class="line">&gt;&gt;&gt; bytes(s)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#24&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    bytes(s)</span><br><span class="line">TypeError: string argument without an encoding</span><br><span class="line">&gt;&gt;&gt; bytes(s, encoding=&quot;utf-8&quot;)</span><br><span class="line">b&#x27;haha&#x27;</span><br><span class="line">&gt;&gt;&gt; bytes(s, encoding=&quot;GBK&quot;)</span><br><span class="line">b&#x27;haha&#x27;</span><br></pre></td></tr></table></figure><h3 id="str-1"><a href="#str-1" class="headerlink" title="str()"></a>str()</h3><p>将对象转换成字符串类型，同样也可以指定编码方式。例如：<code>str(bytes对象，encoding=&#39;utf-8&#39;)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; i =  2</span><br><span class="line">&gt;&gt;&gt; str(i)</span><br><span class="line">&#x27;2&#x27;</span><br><span class="line">&gt;&gt;&gt; b = b&quot;haha&quot;</span><br><span class="line">&gt;&gt;&gt; str(b)      # 注意！</span><br><span class="line">&quot;b&#x27;haha&#x27;&quot;</span><br><span class="line">&gt;&gt;&gt; str(b,encoding=&quot;gb2312&quot;)</span><br><span class="line">&#x27;haha&#x27;</span><br><span class="line">&gt;&gt;&gt; str([1,2,3,])</span><br><span class="line">&#x27;[1, 2, 3]&#x27;</span><br></pre></td></tr></table></figure><p>Bytes和string之间的互相转换，更多使用的是encode()和decode()方法。</p><h3 id="callable-1"><a href="#callable-1" class="headerlink" title="callable()"></a>callable()</h3><p>判断对象是否可以被调用。如果某个对象具有<code>__call__</code>方法，那它就能被调用。 例如，<code>def f1(): pass</code>,那么<code>callable(f1)</code>返回True。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def f1():</span><br><span class="line">    pass</span><br><span class="line">&gt;&gt;&gt; callable(f1)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a = &quot;123&quot;</span><br><span class="line">&gt;&gt;&gt; callable(a)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; class Foo:</span><br><span class="line">    def __init__(self,name,age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age        </span><br><span class="line">&gt;&gt;&gt; f_obj = Foo(&quot;jack&quot;,20)</span><br><span class="line">&gt;&gt;&gt; callable(f_obj)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; callable(Foo)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="chr-1"><a href="#chr-1" class="headerlink" title="chr()"></a>chr()</h3><p>返回某个十进制数对应的ASCII字符，例如：<code>chr(99) = ‘c’</code>。它可以配合<code>random.randint(65，90)</code>随机方法，生成随机字符，用于生产随机验证码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">for i in range(10):</span><br><span class="line">    a = random.randint(65,90)</span><br><span class="line">    c = chr(a)</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure><h3 id="ord-1"><a href="#ord-1" class="headerlink" title="ord()"></a>ord()</h3><p>与chr()相反，返回某个ASCII字符对应的十进制数，例如，<code>ord(&#39;A&#39;) = 65</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ord(&quot;A&quot;)</span><br><span class="line">65</span><br><span class="line">&gt;&gt;&gt; ord(&quot;\n&quot;)</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="classmethod-、staticmethod-和property-1"><a href="#classmethod-、staticmethod-和property-1" class="headerlink" title="classmethod()、staticmethod()和property()"></a>classmethod()、staticmethod()和property()</h3><p>类机制中，用于生成类方法、静态方法和属性的函数。在面向对象章节会有详细介绍。</p><h3 id="compile-1"><a href="#compile-1" class="headerlink" title="compile()"></a>compile()</h3><p>将字符串编译成Python能识别或执行的代码。 也可以将文件读成字符串再编译。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s  = &quot;print(&#x27;helloworld&#x27;)&quot;</span><br><span class="line">&gt;&gt;&gt; r = compile(s,&quot;&lt;string&gt;&quot;,&quot;exec&quot;)</span><br><span class="line">&gt;&gt;&gt; r</span><br><span class="line">&lt;code object &lt;module&gt; at 0x000001B23E6BE660, file &quot;&lt;string&gt;&quot;, line 1&gt;</span><br><span class="line">&gt;&gt;&gt; r()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#14&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    r()</span><br><span class="line">TypeError: &#x27;code&#x27; object is not callable</span><br><span class="line">&gt;&gt;&gt; exec(r)</span><br><span class="line">helloworld</span><br><span class="line">&gt;&gt;&gt; eval(r)</span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure><h3 id="complex-1"><a href="#complex-1" class="headerlink" title="complex()"></a>complex()</h3><p>通过数字或字符串生成复数类型对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; complex(1,2)</span><br><span class="line">(1+2j)</span><br><span class="line">&gt;&gt;&gt; complex(&#x27;3+4j&#x27;)</span><br><span class="line">(3+4j)</span><br><span class="line">&gt;&gt;&gt; complex(&#x27;3 +4j&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#2&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    complex(&#x27;3 +4j&#x27;)</span><br><span class="line">ValueError: complex() arg is a malformed string</span><br></pre></td></tr></table></figure><p>使用字符串的时候，+号左右不能有空白。</p><h3 id="delattr-、setattr-、getattr-、hasattr-1"><a href="#delattr-、setattr-、getattr-、hasattr-1" class="headerlink" title="delattr()、setattr()、getattr()、hasattr()"></a>delattr()、setattr()、getattr()、hasattr()</h3><p>类机制中，分别用来删除、设置、获取和判断属性。后面会有详解。</p><h3 id="dir-1"><a href="#dir-1" class="headerlink" title="dir()"></a>dir()</h3><p>显示对象所有的属性和方法。最棒的辅助函数之一！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; dir()</span><br><span class="line">[&#x27;__annotations__&#x27;, &#x27;__builtins__&#x27;, &#x27;__doc__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;builtins&#x27;, &#x27;r&#x27;, &#x27;s&#x27;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; dir([1,2,])</span><br><span class="line">[&#x27;__add__&#x27;, &#x27;__class__&#x27;, &#x27;__contains__&#x27;, &#x27;__delattr__&#x27;, &#x27;__delitem__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__getitem__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__iadd__&#x27;, &#x27;__imul__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__iter__&#x27;, &#x27;__le__&#x27;, &#x27;__len__&#x27;, &#x27;__lt__&#x27;, &#x27;__mul__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__reversed__&#x27;, &#x27;__rmul__&#x27;, &#x27;__setattr__&#x27;, &#x27;__setitem__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;append&#x27;, &#x27;clear&#x27;, &#x27;copy&#x27;, &#x27;count&#x27;, &#x27;extend&#x27;, &#x27;index&#x27;, &#x27;insert&#x27;, &#x27;pop&#x27;, &#x27;remove&#x27;, &#x27;reverse&#x27;, &#x27;sort&#x27;]</span><br></pre></td></tr></table></figure><h3 id="int-、float-、list-、dict-、set-、tuple-1"><a href="#int-、float-、list-、dict-、set-、tuple-1" class="headerlink" title="int()、float()、list()、dict()、set()、tuple()"></a>int()、float()、list()、dict()、set()、tuple()</h3><p>与bool()、str()、bytes()一样，它们都是实例化对应数据类型的类。</p><h3 id="divmod-1"><a href="#divmod-1" class="headerlink" title="divmod()"></a>divmod()</h3><p>除法，同时返回商和余数的元组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; divmod(10,3)</span><br><span class="line">(3, 1)</span><br><span class="line">&gt;&gt;&gt; divmod(11,4)</span><br><span class="line">(2, 3)</span><br></pre></td></tr></table></figure><h3 id="enumerate-1"><a href="#enumerate-1" class="headerlink" title="enumerate()"></a>enumerate()</h3><p>枚举函数，在迭代对象的时候，额外提供一个序列号的输出。注意：<code>enumerate(li,1)</code>中的1表示从1开始序号，默认从0开始。注意，第二个参数才是你想要的序号开始，不是第一个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    &quot;k1&quot;:&quot;v1&quot;,</span><br><span class="line">    &quot;k2&quot;:&quot;v2&quot;,</span><br><span class="line">    &quot;k3&quot;:&quot;v3&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for i, key in enumerate(dic, 1):</span><br><span class="line">    print(i,&quot;\t&quot;,key)</span><br></pre></td></tr></table></figure><h3 id="eval-1"><a href="#eval-1" class="headerlink" title="eval()"></a>eval()</h3><p>将字符串直接解读并执行。例如：<code>s = &quot;6*8&quot;</code>，s是一个字符串，<code>d = eval(s)</code>， d的结果是48。</p><h3 id="exec-1"><a href="#exec-1" class="headerlink" title="exec()"></a>exec()</h3><p>执行字符串或compile方法编译过的字符串，没有返回值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; exec(&quot;print(&#x27;this is a test&#x27;)&quot;)</span><br><span class="line">this is a test</span><br><span class="line">&gt;&gt;&gt; eval(&quot;print(&#x27;this is a test&#x27;)&quot;)</span><br><span class="line">this is a test</span><br></pre></td></tr></table></figure><h3 id="format-1"><a href="#format-1" class="headerlink" title="format()"></a>format()</h3><p>执行format()，其实就是调用该对象所属类的<code>__format__</code>方法。类似print功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; format(&quot;324324&quot;)</span><br><span class="line">&#x27;324324&#x27;</span><br><span class="line">&gt;&gt;&gt; format([1,2,3])</span><br><span class="line">&#x27;[1, 2, 3]&#x27;</span><br></pre></td></tr></table></figure><h3 id="frozenset-1"><a href="#frozenset-1" class="headerlink" title="frozenset()"></a>frozenset()</h3><p>返回一个不能增加和修改的集合类型对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; b = frozenset(a)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">frozenset(&#123;1, 2, 3&#125;)</span><br><span class="line">&gt;&gt;&gt; dir(b)</span><br><span class="line">[&#x27;__and__&#x27;, &#x27;__class__&#x27;, &#x27;__contains__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__iter__&#x27;, &#x27;__le__&#x27;, &#x27;__len__&#x27;, &#x27;__lt__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__or__&#x27;, &#x27;__rand__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__ror__&#x27;, &#x27;__rsub__&#x27;, &#x27;__rxor__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__sub__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__xor__&#x27;, &#x27;copy&#x27;, &#x27;difference&#x27;, &#x27;intersection&#x27;, &#x27;isdisjoint&#x27;, &#x27;issubset&#x27;, &#x27;issuperset&#x27;, &#x27;symmetric_difference&#x27;, &#x27;union&#x27;]</span><br></pre></td></tr></table></figure><h3 id="globals-1"><a href="#globals-1" class="headerlink" title="globals()"></a>globals()</h3><p>列出当前环境下所有的全局变量。注意要与global关键字区分！在本节的开始，我们就已经展示了它的用法。</p><h3 id="hash-1"><a href="#hash-1" class="headerlink" title="hash()"></a>hash()</h3><p>为不可变对象，例如字符串生成哈希值的函数！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hash(&quot;i am jack&quot;)</span><br><span class="line">5602200374213231465</span><br><span class="line">&gt;&gt;&gt; hash(1)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; hash(100000)</span><br><span class="line">100000</span><br><span class="line">&gt;&gt;&gt; hash([1,2,3,])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#4&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    hash([1,2,3,])</span><br><span class="line">TypeError: unhashable type: &#x27;list&#x27;</span><br><span class="line">&gt;&gt;&gt; hash((1,2,3))</span><br><span class="line">2528502973977326415</span><br></pre></td></tr></table></figure><h3 id="help-1"><a href="#help-1" class="headerlink" title="help()"></a>help()</h3><p>返回对象的帮助文档。谁用谁知道！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [1,2,3]</span><br><span class="line">&gt;&gt;&gt; help(a)</span><br><span class="line">Help on list object:</span><br><span class="line"></span><br><span class="line">class list(object)</span><br><span class="line"> |  list() -&gt; new empty list</span><br><span class="line"> |  list(iterable) -&gt; new list initialized from iterable&#x27;s items</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><h3 id="id-1"><a href="#id-1" class="headerlink" title="id()"></a>id()</h3><p>返回对象的内存地址,常用来查看变量引用的变化，对象是否相同等。常用功能之一！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; id(0)</span><br><span class="line">1456845856</span><br><span class="line">&gt;&gt;&gt; id(True)</span><br><span class="line">1456365792</span><br><span class="line">&gt;&gt;&gt; a = &quot;Python&quot;</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">37116704</span><br></pre></td></tr></table></figure><h3 id="input-1"><a href="#input-1" class="headerlink" title="input()"></a>input()</h3><p>接收用户输入，返回一个输入的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = input(&quot;Please input a number:  &quot;)</span><br><span class="line">Please input a number:  100</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#x27;100&#x27;</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure><h3 id="isinstance-1"><a href="#isinstance-1" class="headerlink" title="isinstance()"></a>isinstance()</h3><p>判断一个对象是否是某个类的实例。比type()方法适用面更广。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(&quot;haha&quot;, str)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(1, str)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h3 id="issubclass-1"><a href="#issubclass-1" class="headerlink" title="issubclass()"></a>issubclass()</h3><p>issubclass(a，b),判断a是否是b的子类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Foo:</span><br><span class="line">    pass</span><br><span class="line">&gt;&gt;&gt; class Goo(Foo):</span><br><span class="line">    pass</span><br><span class="line">&gt;&gt;&gt; issubclass(Goo, Foo)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="iter-1"><a href="#iter-1" class="headerlink" title="iter()"></a>iter()</h3><p>制造一个迭代器，使其具备next()能力。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; lis = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; next(lis)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#8&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    next(lis)</span><br><span class="line">TypeError: &#x27;list&#x27; object is not an iterator</span><br><span class="line">&gt;&gt;&gt; i = iter(lis)</span><br><span class="line">&gt;&gt;&gt; i</span><br><span class="line">&lt;list_iterator object at 0x0000000002B4A128&gt;</span><br><span class="line">&gt;&gt;&gt; next(i)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="len-1"><a href="#len-1" class="headerlink" title="len()"></a>len()</h3><p>返回对象的长度。不能再常用的函数之一了。</p><h3 id="locals-1"><a href="#locals-1" class="headerlink" title="locals()"></a>locals()</h3><p>返回当前可用的局部变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; locals()</span><br><span class="line">&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;a&#x27;: &#x27;100&#x27;, &#x27;lis&#x27;: [1, 2, 3], &#x27;i&#x27;: &lt;list_iterator object at 0x0000000002B4A128&gt;, &#x27;dic&#x27;: &#123;&#x27;k1&#x27;: &#x27;v1&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="max-min-1"><a href="#max-min-1" class="headerlink" title="max()/min():"></a>max()/min():</h3><p>返回给定集合里的最大或者最小的元素。可以指定排序的方法！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst=[&#x27;abcdhush8&#x27;,&#x27;abc9iujtwertwert&#x27;,&#x27;abcdjlas&#x27;,&#x27;abcdj897h&#x27;]</span><br><span class="line">a = min(lst,key=len)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h3 id="memoryview-obj-1"><a href="#memoryview-obj-1" class="headerlink" title="memoryview(obj)"></a>memoryview(obj)</h3><p>返回obj的内存视图对象。obj只能是bytes或bytesarray类型。memoryview对象的使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; v = memoryview(b&#x27;abcefg&#x27;)</span><br><span class="line">&gt;&gt;&gt; v[1]</span><br><span class="line">98</span><br><span class="line">&gt;&gt;&gt; v[-1]</span><br><span class="line">103</span><br><span class="line">&gt;&gt;&gt; v[1:4]</span><br><span class="line">&lt;memory at 0x7f3ddc9f4350&gt;</span><br><span class="line">&gt;&gt;&gt; bytes(v[1:4])</span><br><span class="line">b&#x27;bce&#x27;</span><br></pre></td></tr></table></figure><h3 id="next-1"><a href="#next-1" class="headerlink" title="next()"></a>next()</h3><p>通过调用迭代器的<code>__next__()</code>方法，获取下一个元素。</p><h3 id="object-1"><a href="#object-1" class="headerlink" title="object()"></a>object()</h3><p>该方法不接收任何参数，返回一个没有任何功能的对象。object是Python所有类的基类。</p><h3 id="open-1"><a href="#open-1" class="headerlink" title="open()"></a>open()</h3><p>打开文件的方法。在Python2里，还有一个file()方法，Python3中被废弃了。后面章节会详细介绍open()的用法。</p><h3 id="pow-1"><a href="#pow-1" class="headerlink" title="pow()"></a>pow()</h3><p>幂函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pow(3, 2)</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h3 id="print-1"><a href="#print-1" class="headerlink" title="print()"></a>print()</h3><p>这个还用介绍吗？</p><h3 id="range-1"><a href="#range-1" class="headerlink" title="range()"></a>range()</h3><p>没错，这是Python内置的函数，前面已经介绍了。</p><h3 id="repr-1"><a href="#repr-1" class="headerlink" title="repr()"></a>repr()</h3><p>调用对象所属类的<code>__repr__</code>方法，与print功能类似。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = &quot;hashdfh&quot;</span><br><span class="line">&gt;&gt;&gt; repr(s)</span><br><span class="line">&quot;&#x27;hashdfh&#x27;&quot;</span><br></pre></td></tr></table></figure><h3 id="reversed-1"><a href="#reversed-1" class="headerlink" title="reversed()"></a>reversed()</h3><p>反转，逆序对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; reversed            # reversed本身是个类</span><br><span class="line">&lt;class &#x27;reversed&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; reversed([1,2,3,4,5])   # 获得一个列表反转器</span><br><span class="line">&lt;list_reverseiterator object at 0x0000022E322B5128&gt;</span><br><span class="line">&gt;&gt;&gt; a = reversed([1,2,3,4,5])</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&lt;list_reverseiterator object at 0x0000022E32359668&gt;</span><br><span class="line">&gt;&gt;&gt; list(a)         # 使用list方法将它转换为一个列表</span><br><span class="line">[5, 4, 3, 2, 1]</span><br></pre></td></tr></table></figure><h3 id="round-1"><a href="#round-1" class="headerlink" title="round()"></a>round()</h3><p>四舍五入．</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; round(1.5)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; round(1.4)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="slice-1"><a href="#slice-1" class="headerlink" title="slice()"></a>slice()</h3><p>返回一个切片类型的对象。slice是一个类，一种Python的数据类型。Python将对列表等序列数据类型的切片功能单独拿出来设计了一个slice类，可在某些场合下使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = slice(1, 10, 2)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">slice(1, 10, 2)</span><br><span class="line">&gt;&gt;&gt; type(s)</span><br><span class="line">&lt;class &#x27;slice&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; lis = [i for i in range(10)]</span><br><span class="line">&gt;&gt;&gt; lis</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">&gt;&gt;&gt; lis[s]          # 注意用法</span><br><span class="line">[1, 3, 5, 7, 9]</span><br></pre></td></tr></table></figure><h3 id="sum-1"><a href="#sum-1" class="headerlink" title="sum()"></a>sum()</h3><p>求和．</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sum(1,2,3)          # 需要传入一个可迭代的对象</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#15&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    sum(1,2,3)</span><br><span class="line">TypeError: sum expected at most 2 arguments, got 3</span><br><span class="line">&gt;&gt;&gt; sum([1,2,3])            # 传入一个列表</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; sum(&#123;1:1,2:2&#125;)          # 突发奇想，作死传入一个字典</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="super-1"><a href="#super-1" class="headerlink" title="super()"></a>super()</h3><p>调用父类。面向对象中类的机制相关。后面介绍。</p><h3 id="type-1"><a href="#type-1" class="headerlink" title="type()"></a>type()</h3><p>显示对象所属的数据类型。常用方法！前面已经展示过。</p><h3 id="vars-1"><a href="#vars-1" class="headerlink" title="vars()"></a>vars()</h3><p>与dir()方法类似，不过dir()方法返回的是key，vars()方法返回key的同时还把value一起打印了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; vars()</span><br><span class="line">&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;a&#x27;: &lt;list_reverseiterator object at 0x0000022E32359668&gt;, &#x27;s&#x27;: &#x27;ha&#x27;&#125;</span><br></pre></td></tr></table></figure><h2 id="map-1"><a href="#map-1" class="headerlink" title="map()"></a>map()</h2><p>映射函数。使用指定的函数，处理可迭代对象，并将结果保存在一个map对象中，本质上和大数据的mapreduce中的map差不多。</p><p>使用格式：<code>obj = map(func, iterable)</code>,func是某个函数名，iterable是一个可迭代对象。</p><p>细心的同学可能发现了，我除了组合一些成对的或者同类系列的内置函数。还有map()函数，连同后面的filter()、zip()、sorted()和<code>__import__()</code>函数都没有介绍。因为这几个内置函数功能非常强大，使用场景非常多，Python非常贴心地帮我们实现并内置了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">li = [1,2,3]</span><br><span class="line">data = map(lambda x :x*100,li)  # 这里直接使用了一个匿名函数</span><br><span class="line"></span><br><span class="line">print(type(data))       # 返回值是一个map对象，它是个迭代器。</span><br><span class="line">data = list(data)       # 可以用list方法将map对象中的元素全部生成出来，保存到一个列表里。</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line">------------------------------------------------------</span><br><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line">&lt;class &#x27;map&#x27;&gt;</span><br><span class="line">[100, 200, 300]</span><br></pre></td></tr></table></figure><h2 id="filter-1"><a href="#filter-1" class="headerlink" title="filter()"></a>filter()</h2><p>过滤器，用法和map类似。在函数中设定过滤的条件，逐一循环对象中的元素，将返回值为True时的元素留下（注意，不是留下返回值！），形成一个filter类型的迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">data = <span class="built_in">filter</span>(f1,li)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(data))</span><br><span class="line"></span><br><span class="line">----------------------------</span><br><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;filter&#x27;</span>&gt;</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line">result = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x&gt;<span class="number">33</span>,li)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line">----------------------------------------------</span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">[<span class="number">44</span>, <span class="number">55</span>]</span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">li = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line">y = [a <span class="keyword">for</span> a <span class="keyword">in</span> li <span class="keyword">if</span> a &gt; <span class="number">33</span>]</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><h2 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h2><p>组合对象。将对象逐一配对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list_2 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">s = <span class="built_in">zip</span>(list_1,list_2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(s))</span><br><span class="line">--------------------------------</span><br><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line">[(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>)]</span><br></pre></td></tr></table></figure><h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h2><p>排序方法。有key和reverse两个重要参数。</p><p>基础用法: 直接对序列进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="number">36</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">9</span>, -<span class="number">21</span>])</span><br><span class="line">[-<span class="number">21</span>, -<span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure><p><strong>指定排序的关键字</strong>。关键字必须是一个可调用的对象。例如下面的例子，规则是谁的绝对值大，谁就排在后面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="number">36</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">9</span>, -<span class="number">21</span>], key=<span class="built_in">abs</span>)</span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, -<span class="number">12</span>, -<span class="number">21</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;Python&#x27;</span> <span class="comment">#python字符串可以用下标和切片去访问</span></span><br></pre></td></tr></table></figure><p>Python 使用了 <code>ord()</code> 函数返回单个字符的编码，<code>chr()</code> 函数把编码转成相应字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(s))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">65</span>))</span><br></pre></td></tr></table></figure><p>之前我们说过可以通过反斜杠 <code>\</code> 将一行语句分多行显示，其实就是 <code>\</code> 来转义字符，一些常见的转义字符如下表所示</p><table><thead><tr><th align="left">转义字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>\</code></td><td align="left">在行尾使用时，用作续行符</td></tr><tr><td align="left">\b</td><td align="left">退格（Backspace）</td></tr><tr><td align="left">\000</td><td align="left">空</td></tr><tr><td align="left">\n</td><td align="left">换行</td></tr><tr><td align="left">\v</td><td align="left">纵向制表符</td></tr><tr><td align="left">\t</td><td align="left">横向制表符</td></tr><tr><td align="left">\r</td><td align="left">回车</td></tr></tbody></table><p>字符串运算符</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">连接符</td></tr><tr><td align="left">*</td><td align="left">重复输出</td></tr><tr><td align="left">[]</td><td align="left">通过索引获取字符串中字符</td></tr><tr><td align="left">[ : ]</td><td align="left">获取字符串中的一部分</td></tr><tr><td align="left">in</td><td align="left">字符串中是否包含指定字符</td></tr><tr><td align="left">not in</td><td align="left">字符串中是否不包含指定字符</td></tr><tr><td align="left">r/R</td><td align="left">字符串原样输出</td></tr></tbody></table><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><p>当我们需要输出的内容中含有变量时，比如：<code>Hello xxx</code>，<code>xxx</code> 为变量，此时便需要一种格式化字符串的方式，Python 使用 <code>%</code> 格式化字符串，常用占位符如下表所示：</p><table><thead><tr><th align="left">占位符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%s</td><td align="left">格式化字符串</td></tr><tr><td align="left">%d</td><td align="left">格式化整数</td></tr><tr><td align="left">%f</td><td align="left">格式化浮点数</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello %s&#x27;</span> % <span class="string">&#x27;Python&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们也可以使用字符串的 <code>format()</code> 方法进行格式化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>))</span><br></pre></td></tr></table></figure><p><strong>格式化字符串面值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;小明&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我叫<span class="subst">&#123;name&#125;</span>, 今年<span class="subst">&#123;age&#125;</span>岁。&quot;</span>)</span><br><span class="line"><span class="comment"># 我叫小明, 今年18岁。</span></span><br></pre></td></tr></table></figure><p><strong>模板字符串</strong></p><p>Python提供的<code>Template类</code>也可以用来格式化字符串，它位于<strong>string</strong>包。使用Template类时，实现实例化一个Template对象。然后调用<code>substitute</code>或<code>safe_substitute</code>用传入的参数替换模板字符串中的变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t = Template(<span class="string">&quot;我叫$name, 今年$age岁。&quot;</span>)</span><br><span class="line">s = t.substitute(name=<span class="string">&quot;小明&quot;</span>, age=<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">s = t.substitute(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串常用函数"><a href="#字符串常用函数" class="headerlink" title="字符串常用函数"></a>字符串常用函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.capitalize() 格式化字符串的方法即将字符串的首字母转换为大写</span></span><br><span class="line">s=<span class="string">&#x27;development&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.capitalize())</span><br><span class="line"><span class="comment">#2.center(width,fillchar=&#x27; &#x27;) 字符串长度居中</span></span><br><span class="line">In [<span class="number">1</span>]: s=<span class="string">&#x27;air&#x27;</span></span><br><span class="line">In [<span class="number">2</span>]: s.center(<span class="number">11</span>,<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">&#x27;****air****&#x27;</span></span><br><span class="line"><span class="comment"># 3.count() 统计字符或字符串出现的次数</span></span><br><span class="line">In [<span class="number">3</span>]: s=<span class="string">&#x27;hahahahahahahaha&#x27;</span></span><br><span class="line">In [<span class="number">4</span>]: s.count(<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">8</span></span><br><span class="line"><span class="comment">#4.endswith() 判断字符串是不是以XXX结尾</span></span><br><span class="line"><span class="comment">#5.startswith() 判断字符串是不是以XXX开头</span></span><br><span class="line"><span class="comment">#6.index() 查询字符或字符串在字符串中第一次出现的位置，如果没有则抛出异常</span></span><br><span class="line"><span class="comment">#7.rindex() 从右往左查询字符或字符串在字符串中第一次出现的位置，如果没有则抛出异常</span></span><br><span class="line"><span class="comment">#8.find() 查询字符或字符串在字符串中第一次出现的位置，如果没有则会返回-1</span></span><br><span class="line"><span class="comment">#9.rfind() 从右往左查询字符或字符串在字符串中第一次出现的位置，如果没有则会返回-1</span></span><br><span class="line"><span class="comment">#10.encode() 将字符串转换为字节数据的方法</span></span><br><span class="line"><span class="comment">#11.decode() 将字节数据转换为字符数据的方法</span></span><br><span class="line"><span class="comment">#12.format() 格式化字符串</span></span><br><span class="line"><span class="comment">#13.islower() 判断字母是否全为小写</span></span><br><span class="line"><span class="comment">#14.isupper() 判断字母是否全为大写</span></span><br><span class="line"><span class="comment">#15.istitle() 判断是否为标题</span></span><br><span class="line"><span class="comment">#16.isspace() 判断是否为空格</span></span><br><span class="line"><span class="comment">#17.isdigit() 判断是否为数字</span></span><br><span class="line"><span class="comment">#18.isalnum() 判断是否为有效字符（数字、字母、下划线）</span></span><br><span class="line"><span class="comment">#19.isalpha() 判断是否全为字母</span></span><br><span class="line"><span class="comment">#20.title() 将字符串转换为标题</span></span><br><span class="line"><span class="comment">#21.lower() 将字符全部转换为小写</span></span><br><span class="line"><span class="comment">#22.upper() 将字符全部转换为大写</span></span><br><span class="line"><span class="comment">#23.split() 将字符串按照特定的格式进行分割，返回值是一个列表</span></span><br><span class="line"><span class="comment">#24.join() 按照特定的符号将一个可迭代对象拼接成字符串</span></span><br><span class="line">In [<span class="number">5</span>]: s=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">In [<span class="number">6</span>]: <span class="string">&#x27;&#x27;</span>.join(s)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">#25.strip() 清除字符串两侧空格   strip(&#x27;\n&#x27;) 清除字符串两侧换行</span></span><br><span class="line"><span class="comment">#26.lstrip() 清除字符串左边空格</span></span><br><span class="line"><span class="comment">#27.rstrip() 清除字符串右边空格</span></span><br><span class="line"><span class="comment">#28.replace(old,new) 用新的字符代替旧的字符</span></span><br><span class="line"><span class="comment">#29.ljust() 左对齐</span></span><br><span class="line"><span class="comment">#30.rjust() 右对齐</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><p>Python 中的序列是一块可存放多个值的连续内存空间，所有值按一定顺序排列，每个值所在位置都有一个编号，称其为索引，我们可以通过索引访问其对应值。</p><p>序列索引支持非负数和负数，索引为非负数，从 <code>0</code> 开始</p><blockquote><p>元素1  元素2  元素3  元素4 ………………….元素n<br> 0             1        2         3      ………………….   n-1</p></blockquote><p>索引为负数由右向左计数，从 <code>-1</code> 开始</p><blockquote><p>元素1  元素2  元素3  元素4 ………………….元素n<br>  -n      -(n-1)   -(n-2)  -(n-3)  …………………    -1</p></blockquote><p>切片</p><p>切片操作可以访问一定范围内的元素，语法如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sname[start : end : step]</span><br></pre></td></tr></table></figure><ul><li><p>sname：表示序列的名称；</p></li><li><p>start：开始索引位置（包括该位置），默认为 0；</p></li><li><p>end：表示切片的结束索引位置（不包括该位置），默认为序列的长度；</p></li><li><p>step：步长。</p></li><li><p>```python<br>str = ‘Python’<br>print(str[:3])<br>print(str[3:])<br>print(str[:])<br>#结果如下<br>Pyt<br>hon<br>Python</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">相加</span><br><span class="line"></span><br><span class="line">Python 支持类型相同的序列使用 `+` 作相加操作，该操作不会去除重复的元素。以字符串为例，如下所示：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">str1 = &#x27;Python&#x27;</span><br><span class="line">str2 = &#x27;Python&#x27;</span><br><span class="line">print(&#x27;str1 + str2 --&gt; &#x27;,str1 + str2)</span><br><span class="line">#结果</span><br><span class="line">str1 + str2 --&gt;  PythonPython</span><br></pre></td></tr></table></figure></li></ul><p>Python 使用 <code>in</code> 关键字检查某元素是否为序列的成员，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val <span class="keyword">in</span> seq <span class="comment">#返回布尔类型</span></span><br></pre></td></tr></table></figure><ul><li>val：要检查的元素；</li><li>seq：指定的序列。</li></ul><p>内置函数</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len()</td><td align="left">计算序列的长度</td></tr><tr><td align="left">max()</td><td align="left">找出序列中的最大元素</td></tr><tr><td align="left">min()</td><td align="left">找出序列中的最小元素</td></tr><tr><td align="left">list()</td><td align="left">将序列转换为列表</td></tr><tr><td align="left">str()</td><td align="left">将序列转换为字符串</td></tr><tr><td align="left">sum()</td><td align="left">计算元素的和</td></tr><tr><td align="left">sorted()</td><td align="left">对元素进行排序</td></tr><tr><td align="left">enumerate()</td><td align="left">将序列组合为一个索引序列，多用在 for 循环中</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">list</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;index= %d&quot;</span> % index + <span class="string">&quot;value=%d&quot;</span> % value) <span class="comment">#可以访问下标和元素</span></span><br></pre></td></tr></table></figure><h1 id="列表与元组"><a href="#列表与元组" class="headerlink" title="列表与元组"></a>列表与元组</h1><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Python 中没有数组，而是加入了功能更强大的列表（list），列表可以存储任何类型的数据，同一个列表中的数据类型还可以不同；列表是序列结构，可以进行序列结构的基本操作：索引、切片、加、乘、检查成员。</p><p><strong>创建</strong></p><p>列表中所有元素都放在一个中括号 <code>[]</code> 中，相邻元素之间用逗号 <code>,</code> 分隔，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>= [<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>访问</strong></p><p>通过索引访问列表中的值，还可以使用切片来访问</p><p><strong>更新</strong></p><p>除了对列表中现有元素进行修改外，还可以使用 <code>append()</code> 向列表中添加新元素</p><p>可以根据索引或者切片去修改原有的值，append是往列表后面再添加一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>]</span><br><span class="line"><span class="comment"># 修改列表中第二个元素</span></span><br><span class="line"><span class="built_in">list</span>[<span class="number">1</span>] = <span class="number">5</span></span><br><span class="line"><span class="comment"># 向列表中添加新元素</span></span><br><span class="line">l.append(<span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><p>使用 <code>del</code> 删除列表中元素</p><p>del根据下标或者切片去删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>]</span><br><span class="line"><span class="comment"># 删除列表中第二个元素</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span>[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span><span class="comment">#删除全部元素</span></span><br><span class="line"><span class="built_in">list</span>.clear()<span class="comment">#清空集合</span></span><br></pre></td></tr></table></figure><p>常用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#count()统计列表中某个元素出现的次数</span></span><br><span class="line">l = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;l.count(&#x27;d&#x27;) --&gt;&quot;</span>, l.count(<span class="string">&#x27;d&#x27;</span>))</span><br><span class="line"><span class="comment"># index()查找某个元素在列表中首次出现的位置（即索引）</span></span><br><span class="line">l = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;l.index(&#x27;d&#x27;) --&gt;&quot;</span>, l.index(<span class="string">&#x27;d&#x27;</span>))</span><br><span class="line"><span class="comment">#remove()移除列表中某个值的首次匹配项</span></span><br><span class="line">l = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">l.remove(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;l --&gt;&quot;</span>, l)</span><br><span class="line"><span class="comment"># sort()对列表中元素进行排序</span></span><br><span class="line">l = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">l.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;l --&gt;&#x27;</span>, l)</span><br><span class="line"><span class="comment">#copy()复制列表</span></span><br><span class="line">l = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">lc = l.copy()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;lc --&gt;&#x27;</span>, lc)</span><br><span class="line"><span class="comment">#max() min()返回列表最大最小值</span></span><br><span class="line"><span class="built_in">max</span>=<span class="built_in">max</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组（tuple）与列表类似，但元组是不可变的，可简单将其看作是不可变的列表，元组常用于保存不可修改的内容。</p><p><strong>创建</strong></p><p>元组中所有元素都放在一个小括号 <code>()</code> 中，相邻元素之间用逗号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>访问</strong></p><p>与列表一样</p><p><strong>修改</strong></p><p>元组中元素不能被修改，我们要用重新赋值的方式操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line">t = (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;t --&gt;&#x27;</span>, t)</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><p>元组中的元素不能被删除，我们只能删除整个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"><span class="keyword">del</span> t</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;t --&gt;&#x27;</span>, t)</span><br></pre></td></tr></table></figure><p><strong>常用方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#len()计算元组中元素个数</span></span><br><span class="line">t = (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;len(t) --&gt;&#x27;</span>, <span class="built_in">len</span>(t))</span><br><span class="line"><span class="comment">#max() 和 min()返回元组中元素最大、最小值</span></span><br><span class="line">t = (<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;max(t) --&gt;&#x27;</span>, <span class="built_in">max</span>(t))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;min(t) --&gt;&#x27;</span>, <span class="built_in">min</span>(t))</span><br><span class="line"><span class="comment"># tuple()将列表转换为元组</span></span><br><span class="line">l = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">t = <span class="built_in">tuple</span>(l)</span><br></pre></td></tr></table></figure><h1 id="字典与集合"><a href="#字典与集合" class="headerlink" title="字典与集合"></a>字典与集合</h1><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典（dict）是 Python 的数据结构，因为都叫字典，我们不用想也知道它们是十分相似的，它们的内容都是以键-值（key-value）的方式存在的。dict 拥有良好的查询速度，dict 中的值可以是任意 Python 对象，多次对一个 key 赋 value，后面的 value 会把前面的 value 覆盖。</p><p><strong>创建字典</strong></p><p>字典的内容在花括号 <code>&#123;&#125;</code> 内，键-值（key-value）之间用冒号 <code>:</code> 分隔，键值对之间用逗号 <code>,</code> 分隔，比如创建字典 d，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;18&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 dict 函数</span></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">l = [(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)]</span><br><span class="line">d = <span class="built_in">dict</span>(l)</span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">d = <span class="built_in">dict</span>(name=<span class="string">&#x27;小明&#x27;</span>, age=<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空字典</span></span><br><span class="line">d = <span class="built_in">dict</span>()</span><br><span class="line">d = &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>添加</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&quot;owner&quot;</span>] = <span class="string">&quot;tyson&quot;</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="built_in">dict</span>.update(&#123;<span class="string">&quot;country&quot;</span>: <span class="string">&quot;china&quot;</span>&#125;)</span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="built_in">dict</span>.update(temp = <span class="string">&quot;无语中&quot;</span>, <span class="built_in">help</span> = <span class="string">&quot;帮助&quot;</span>)</span><br><span class="line"><span class="comment">#4</span></span><br><span class="line">my_temp_dict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;王员外&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line">book_dict.update(**my_temp_dict)</span><br></pre></td></tr></table></figure><p><strong>访问</strong></p><p>字典中的值通过 key 进行访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>(name=<span class="string">&#x27;小明&#x27;</span>, age=<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;小明&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 get 方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;小明&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>修改</strong></p><p>修改操作，通过key进行查询然后赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>(name=<span class="string">&#x27;小明&#x27;</span>, age=<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;age&#x27;</span>] = <span class="string">&#x27;20&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;20&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>清空集合</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>(name=<span class="string">&#x27;小明&#x27;</span>, age=<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="keyword">del</span> d[键值] <span class="comment">#根据键值去删除元素</span></span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合（set）与字典相同均存储 key，但也只存储 key，因 key 不可重复，所以 set 的中的值不可重复，也是无序的。</p><p><strong>创建</strong></p><p>集合使用花括号 <code>&#123;&#125;</code> 或者 <code>set()</code> 函数创建，如果创建空集合只能使用 <code>set()</code> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 set 函数</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空集合</span></span><br><span class="line">s = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><p>集合中重复的元素会被自动过滤掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>添加元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">set</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a.update(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a.add(<span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#结果 注意update和add区别</span></span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ABC&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>删除元素</strong></p><p>删除元素使用 remove 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><p>清空集合使用 <code>clear</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.clear()</span><br></pre></td></tr></table></figure><p>获取集合的长度，同样使用 <code>len</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(s)</span><br></pre></td></tr></table></figure><h1 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h1><p>time 模块提供了很多与时间相关的类和函数，下面我们介绍一些常用的。</p><h2 id="struct-time-类"><a href="#struct-time-类" class="headerlink" title="struct_time 类"></a>struct_time 类</h2><p>time 模块的 struct_time 类代表一个时间对象，可以通过索引和属性名访问值。对应关系如下所示：</p><table><thead><tr><th align="left">索引</th><th align="left">属性</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">tm_year（年）</td><td align="left">如：1945</td></tr><tr><td align="left">1</td><td align="left">tm_mon（月）</td><td align="left">1 ~ 12</td></tr><tr><td align="left">2</td><td align="left">tm_mday（日）</td><td align="left">1 ~ 31</td></tr><tr><td align="left">3</td><td align="left">tm_hour（时）</td><td align="left">0 ~ 23</td></tr><tr><td align="left">4</td><td align="left">tm_min（分）</td><td align="left">0 ~ 59</td></tr><tr><td align="left">5</td><td align="left">tm_sec（秒）</td><td align="left">0 ~ 61</td></tr><tr><td align="left">6</td><td align="left">tm_wday（周）</td><td align="left">0 ~ 6</td></tr><tr><td align="left">7</td><td align="left">tm_yday（一年内第几天）</td><td align="left">1 ~ 366</td></tr><tr><td align="left">8</td><td align="left">tm_isdst（夏时令）</td><td align="left">-1、0、1</td></tr></tbody></table><p>tm_sec 范围为 0 ~ 61，值 60 表示在闰秒的时间戳中有效，并且由于历史原因支持值 61。</p><p>localtime() 表示当前时间，返回类型为 struct_time 对象，示例如下所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time = time.localtime()</span><br><span class="line"><span class="built_in">print</span>(time.tm_year) <span class="comment">#结果：2022</span></span><br></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><table><thead><tr><th align="left">函数（常量）</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">time()</td><td align="left">返回当前时间的时间戳</td></tr><tr><td align="left">gmtime([secs])</td><td align="left">将时间戳转换为格林威治天文时间下的 struct_time，可选参数 secs 表示从 epoch 到现在的秒数，默认为当前时间</td></tr><tr><td align="left">localtime([secs])</td><td align="left">与 gmtime() 相似，返回当地时间下的 struct_time</td></tr><tr><td align="left">mktime(t)</td><td align="left">localtime() 的反函数</td></tr><tr><td align="left">asctime([t])</td><td align="left">接收一个 struct_time 表示的时间，返回形式为：Mon Dec  2 08:53:47 2019 的字符串</td></tr><tr><td align="left">ctime([secs])</td><td align="left">ctime(secs) 相当于 asctime(localtime(secs))</td></tr><tr><td align="left">strftime(format[, t])</td><td align="left">格式化日期，接收一个 struct_time 表示的时间，并返回以可读字符串表示的当地时间</td></tr><tr><td align="left">sleep(secs)</td><td align="left">暂停执行调用线程指定的秒数</td></tr><tr><td align="left">altzone</td><td align="left">本地 DST 时区的偏移量，以 UTC 为单位的秒数</td></tr><tr><td align="left">timezone</td><td align="left">本地（非 DST）时区的偏移量，UTC 以西的秒数（西欧大部分地区为负，美国为正，英国为零）</td></tr><tr><td align="left">tzname</td><td align="left">两个字符串的元组：第一个是本地非 DST 时区的名称，第二个是本地 DST 时区的名称</td></tr></tbody></table><h2 id="格式化日期函数strftime"><a href="#格式化日期函数strftime" class="headerlink" title="格式化日期函数strftime"></a>格式化日期函数strftime</h2><p>strftime 函数日期格式化符号说明如下所示：</p><table><thead><tr><th align="left">符号</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">%a</td><td align="left">本地化的缩写星期中每日的名称</td></tr><tr><td align="left">%A</td><td align="left">本地化的星期中每日的完整名称</td></tr><tr><td align="left">%b</td><td align="left">本地化的月缩写名称</td></tr><tr><td align="left">%B</td><td align="left">本地化的月完整名称</td></tr><tr><td align="left">%c</td><td align="left">本地化的适当日期和时间表示</td></tr><tr><td align="left">%d</td><td align="left">十进制数 [01,31] 表示的月中日</td></tr><tr><td align="left">%H</td><td align="left">十进制数 [00,23] 表示的小时（24小时制）</td></tr><tr><td align="left">%I</td><td align="left">十进制数 [01,12] 表示的小时（12小时制）</td></tr><tr><td align="left">%j</td><td align="left">十进制数 [001,366] 表示的年中日</td></tr><tr><td align="left">%m</td><td align="left">十进制数 [01,12] 表示的月</td></tr><tr><td align="left">%M</td><td align="left">十进制数 [00,59] 表示的分钟</td></tr><tr><td align="left">%p</td><td align="left">本地化的 AM 或 PM</td></tr><tr><td align="left">%S</td><td align="left">十进制数 [00,61] 表示的秒</td></tr><tr><td align="left">%U</td><td align="left">十进制数 [00,53] 表示的一年中的周数（星期日作为一周的第一天）</td></tr><tr><td align="left">%w</td><td align="left">十进制数 [0(星期日),6] 表示的周中日</td></tr><tr><td align="left">%W</td><td align="left">十进制数 [00,53] 表示的一年中的周数（星期一作为一周的第一天）</td></tr><tr><td align="left">%x</td><td align="left">本地化的适当日期表示</td></tr><tr><td align="left">%X</td><td align="left">本地化的适当时间表示</td></tr><tr><td align="left">%y</td><td align="left">十进制数 [00,99] 表示的没有世纪的年份</td></tr><tr><td align="left">%Y</td><td align="left">十进制数表示的带世纪的年份</td></tr><tr><td align="left">%z</td><td align="left">时区偏移以格式 +HHMM 或 -HHMM 形式的 UTC/GMT 的正或负时差指示，其中 H 表示十进制小时数字，M 表示小数分钟数字 [-23:59, +23:59]</td></tr><tr><td align="left">%Z</td><td align="left">时区名称</td></tr><tr><td align="left">%%</td><td align="left">字面的 ‘%’ 字符</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">t = time.localtime()</span><br><span class="line">strftime = time.strftime(<span class="string">&quot;%Y年%m月%d日 %H:%M:%S&quot;</span>, t)</span><br><span class="line"><span class="built_in">print</span>(strftime)</span><br></pre></td></tr></table></figure><h2 id="datetime-模块"><a href="#datetime-模块" class="headerlink" title="datetime 模块"></a>datetime 模块</h2><p>datatime 模块重新封装了 time 模块，提供了更多接口，变得更加直观和易于调用。</p><h3 id="date-类"><a href="#date-类" class="headerlink" title="date 类"></a>date 类</h3><p>date 类表示一个由年、月、日组成的日期，格式为：datetime.date(year, month, day)。</p><ul><li>year 范围为：[1, 9999]</li><li>month 范围为：[1, 12]</li><li>day 范围为 [1, 给定年月对应的天数]。</li></ul><p>类方法和属性如下所示：</p><table><thead><tr><th align="left">方法（属性）</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">today()</td><td align="left">返回当地的当前日期</td></tr><tr><td align="left">fromtimestamp(timestamp)</td><td align="left">根据给定的时间戮，返回本地日期</td></tr><tr><td align="left">min</td><td align="left">date 所能表示的最小日期</td></tr><tr><td align="left">max</td><td align="left">date 所能表示的最大日期</td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(datetime.date.today())</span><br><span class="line"><span class="built_in">print</span>(datetime.date.fromtimestamp(time.time()))</span><br><span class="line"><span class="built_in">print</span>(datetime.date.<span class="built_in">min</span>)</span><br><span class="line"><span class="built_in">print</span>(datetime.date.<span class="built_in">max</span>)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">24</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">24</span></span><br><span class="line">0001-01-01</span><br><span class="line"><span class="number">9999</span>-<span class="number">12</span>-<span class="number">31</span></span><br></pre></td></tr></table></figure><p>实例方法和属性如下所示：</p><table><thead><tr><th align="left">方法（属性）</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">replace(year, month, day)</td><td align="left">生成一个新的日期对象，用参数指定的年，月，日代替原有对象中的属性</td></tr><tr><td align="left">timetuple()</td><td align="left">返回日期对应的 struct_time 对象</td></tr><tr><td align="left">weekday()</td><td align="left">返回一个整数代表星期几，星期一为 0，星期天为 6</td></tr><tr><td align="left">isoweekday()</td><td align="left">返回一个整数代表星期几，星期一为 1，星期天为 7</td></tr><tr><td align="left">isocalendar()</td><td align="left">返回格式为 (year，month，day) 的元组</td></tr><tr><td align="left">isoformat()</td><td align="left">返回格式如 YYYY-MM-DD 的字符串</td></tr><tr><td align="left">strftime(format)</td><td align="left">返回自定义格式的字符串</td></tr><tr><td align="left">year</td><td align="left">年</td></tr><tr><td align="left">month</td><td align="left">月</td></tr><tr><td align="left">day</td><td align="left">日</td></tr></tbody></table><p>使用示例如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">td = datetime.date.today()</span><br><span class="line"><span class="built_in">print</span>(td.replace(year=<span class="number">1945</span>, month=<span class="number">8</span>, day=<span class="number">15</span>))</span><br><span class="line"><span class="built_in">print</span>(td.timetuple())</span><br><span class="line"><span class="built_in">print</span>(td.weekday())</span><br><span class="line"><span class="built_in">print</span>(td.isoweekday())</span><br><span class="line"><span class="built_in">print</span>(td.isocalendar())</span><br><span class="line"><span class="built_in">print</span>(td.isoformat())</span><br><span class="line"><span class="built_in">print</span>(td.strftime(<span class="string">&#x27;%Y %m %d %H:%M:%S %f&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(td.year)</span><br><span class="line"><span class="built_in">print</span>(td.month)</span><br><span class="line"><span class="built_in">print</span>(td.day)</span><br></pre></td></tr></table></figure><h3 id="time-类"><a href="#time-类" class="headerlink" title="time 类"></a>time 类</h3><p>time 类表示由时、分、秒、微秒组成的时间，格式为：time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)。</p><ul><li>hour 范围为：[0, 24)</li><li>minute 范围为：[0, 60)</li><li>second 范围为：[0, 60)</li><li>microsecond 范围为：[0, 1000000)</li><li>fold 范围为：[0, 1]</li></ul><p>实例方法和属性如下所示：</p><table><thead><tr><th align="left">方法（属性）</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">isoformat()</td><td align="left">返回 HH:MM:SS 格式的字符串</td></tr><tr><td align="left">replace(hour, minute, second, microsecond, tzinfo, * fold=0)</td><td align="left">创建一个新的时间对象，用参数指定的时、分、秒、微秒代替原有对象中的属性</td></tr><tr><td align="left">strftime(format)</td><td align="left">返回自定义格式的字符串</td></tr><tr><td align="left">hour</td><td align="left">时</td></tr><tr><td align="left">minute</td><td align="left">分</td></tr><tr><td align="left">second</td><td align="left">秒</td></tr><tr><td align="left">microsecond</td><td align="left">微秒</td></tr><tr><td align="left">tzinfo</td><td align="left">时区</td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">t = datetime.time(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(t.isoformat())</span><br><span class="line"><span class="built_in">print</span>(t.replace(hour=<span class="number">9</span>, minute=<span class="number">9</span>))</span><br><span class="line"><span class="built_in">print</span>(t.strftime(<span class="string">&#x27;%I:%M:%S %p&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(t.hour)</span><br><span class="line"><span class="built_in">print</span>(t.minute)</span><br><span class="line"><span class="built_in">print</span>(t.second)</span><br><span class="line"><span class="built_in">print</span>(t.microsecond)</span><br><span class="line"><span class="built_in">print</span>(t.tzinfo)</span><br></pre></td></tr></table></figure><h3 id="datetime-类"><a href="#datetime-类" class="headerlink" title="datetime 类"></a>datetime 类</h3><p>datetime 包括了 date 与 time 的所有信息，格式为：datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)，参数范围值参考 date 类与 time 类。</p><p>类方法和属性如下所示：</p><table><thead><tr><th align="left">方法（属性）</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">today()</td><td align="left">返回当地的当前时间</td></tr><tr><td align="left">now(tz=None)</td><td align="left">类似于 today()，可选参数 tz 可指定时区</td></tr><tr><td align="left">utcnow()</td><td align="left">返回当前 UTC 时间</td></tr><tr><td align="left">fromtimestamp(timestamp, tz=None)</td><td align="left">根据时间戳返回对应时间</td></tr><tr><td align="left">utcfromtimestamp(timestamp)</td><td align="left">根据时间戳返回对应 UTC 时间</td></tr><tr><td align="left">combine(date, time)</td><td align="left">根据 date 和 time 返回对应时间</td></tr><tr><td align="left">min</td><td align="left">datetime 所能表示的最小日期</td></tr><tr><td align="left">max</td><td align="left">datetime 所能表示的最大日期</td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.today())</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now())</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.utcnow())</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.fromtimestamp(time.time()))</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.utcfromtimestamp(time.time()))</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.combine(datetime.date(<span class="number">2019</span>, <span class="number">12</span>, <span class="number">1</span>), datetime.time(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)))</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.<span class="built_in">min</span>)</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.<span class="built_in">max</span>)</span><br></pre></td></tr></table></figure><p>实例方法和属性如下所示：</p><table><thead><tr><th align="left">方法（属性）</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">date()</td><td align="left">返回具有同样 year,month,day 值的 date 对象</td></tr><tr><td align="left">time()</td><td align="left">返回具有同样 hour, minute, second, microsecond 和 fold 值的 time 对象</td></tr><tr><td align="left">replace(year, month, day=self.day, hour, minute, second, microsecond, tzinfo, * fold=0)</td><td align="left">生成一个新的日期对象，用参数指定的年，月，日，时，分，秒…代替原有对象中的属性</td></tr><tr><td align="left">weekday()</td><td align="left">返回一个整数代表星期几，星期一为 0，星期天为 6</td></tr><tr><td align="left">isoweekday()</td><td align="left">返回一个整数代表星期几，星期一为 1，星期天为 7</td></tr><tr><td align="left">isocalendar()</td><td align="left">返回格式为 (year，month，day) 的元组</td></tr><tr><td align="left">isoformat()</td><td align="left">返回一个以 ISO 8601 格式表示日期和时间的字符串 YYYY-MM-DDTHH:MM:SS.ffffff</td></tr><tr><td align="left">strftime(format)</td><td align="left">返回自定义格式的字符串</td></tr><tr><td align="left">year</td><td align="left">年</td></tr><tr><td align="left">month</td><td align="left">月</td></tr><tr><td align="left">day</td><td align="left">日</td></tr><tr><td align="left">hour</td><td align="left">时</td></tr><tr><td align="left">minute</td><td align="left">分</td></tr><tr><td align="left">second</td><td align="left">秒</td></tr><tr><td align="left">microsecond</td><td align="left">微秒</td></tr><tr><td align="left">tzinfo</td><td align="left">时区</td></tr></tbody></table><p>使用示例如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">td = datetime.datetime.today()</span><br><span class="line"><span class="built_in">print</span>(td.date())</span><br><span class="line"><span class="built_in">print</span>(td.time())</span><br><span class="line"><span class="built_in">print</span>(td.replace(day=<span class="number">11</span>, second=<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(td.weekday())</span><br><span class="line"><span class="built_in">print</span>(td.isoweekday())</span><br><span class="line"><span class="built_in">print</span>(td.isocalendar())</span><br><span class="line"><span class="built_in">print</span>(td.isoformat())</span><br><span class="line"><span class="built_in">print</span>(td.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S .%f&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(td.year)</span><br><span class="line"><span class="built_in">print</span>(td.month)</span><br><span class="line"><span class="built_in">print</span>(td.month)</span><br><span class="line"><span class="built_in">print</span>(td.hour)</span><br><span class="line"><span class="built_in">print</span>(td.minute)</span><br><span class="line"><span class="built_in">print</span>(td.second)</span><br><span class="line"><span class="built_in">print</span>(td.microsecond)</span><br><span class="line"><span class="built_in">print</span>(td.tzinfo)</span><br></pre></td></tr></table></figure><h2 id="calendar-模块"><a href="#calendar-模块" class="headerlink" title="calendar 模块"></a>calendar 模块</h2><p>calendar 模块提供了很多可以处理日历的函数。</p><h3 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h3><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">setfirstweekday(weekday)</td><td align="left">设置每一周的开始(0 表示星期一，6 表示星期天)</td></tr><tr><td align="left">firstweekday()</td><td align="left">返回当前设置的每星期的第一天的数值</td></tr><tr><td align="left">isleap(year)</td><td align="left">如果 year 是闰年则返回 True ,否则返回 False</td></tr><tr><td align="left">leapdays(y1, y2)</td><td align="left">返回 y1 至 y2 （包含 y1 和 y2 ）之间的闰年的数量</td></tr><tr><td align="left">weekday(year, month, day)</td><td align="left">返回指定日期的星期值</td></tr><tr><td align="left">monthrange(year, month)</td><td align="left">返回指定年份的指定月份第一天是星期几和这个月的天数</td></tr><tr><td align="left">month(theyear, themonth, w=0, l=0)</td><td align="left">返回月份日历</td></tr><tr><td align="left">prcal(year, w=0, l=0, c=6, m=3)</td><td align="left">返回年份日历</td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line">calendar.setfirstweekday(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(calendar.firstweekday())</span><br><span class="line"><span class="built_in">print</span>(calendar.isleap(<span class="number">2019</span>))</span><br><span class="line"><span class="built_in">print</span>(calendar.leapdays(<span class="number">1945</span>, <span class="number">2019</span>))</span><br><span class="line"><span class="built_in">print</span>(calendar.weekday(<span class="number">2019</span>, <span class="number">12</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(calendar.monthrange(<span class="number">2019</span>, <span class="number">12</span>))</span><br><span class="line"><span class="built_in">print</span>(calendar.month(<span class="number">2019</span>, <span class="number">12</span>))</span><br><span class="line"><span class="built_in">print</span>(calendar.prcal(<span class="number">2019</span>))</span><br></pre></td></tr></table></figure><h3 id="Calendar-类"><a href="#Calendar-类" class="headerlink" title="Calendar 类"></a>Calendar 类</h3><p>Calendar 对象提供了一些日历数据格式化的方法，实例方法如下所示：</p><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">iterweekdays()</td><td align="left">返回一个迭代器，迭代器的内容为一星期的数字</td></tr><tr><td align="left">itermonthdates(year, month)</td><td align="left">返回一个迭代器，迭代器的内容为年 、月的日期</td></tr></tbody></table><p>使用示例如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> calendar <span class="keyword">import</span> Calendar</span><br><span class="line"></span><br><span class="line">c = Calendar()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(c.iterweekdays()))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c.itermonthdates(<span class="number">2019</span>, <span class="number">12</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="TextCalendar-类"><a href="#TextCalendar-类" class="headerlink" title="TextCalendar 类"></a>TextCalendar 类</h3><p>TextCalendar 为 Calendar子类，用来生成纯文本日历。实例方法如下所示：</p><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">formatmonth(theyear, themonth, w=0, l=0)</td><td align="left">返回一个多行字符串来表示指定年、月的日历</td></tr><tr><td align="left">formatyear(theyear, w=2, l=1, c=6, m=3)</td><td align="left">返回一个 m 列日历，可选参数 w, l, 和 c 分别表示日期列数， 周的行数， 和月之间的间隔</td></tr></tbody></table><p>使用示例如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> calendar <span class="keyword">import</span> TextCalendar</span><br><span class="line"></span><br><span class="line">tc = TextCalendar()</span><br><span class="line"><span class="built_in">print</span>(tc.formatmonth(<span class="number">2019</span>, <span class="number">12</span>))</span><br><span class="line"><span class="built_in">print</span>(tc.formatyear(<span class="number">2019</span>))</span><br></pre></td></tr></table></figure><h3 id="HTMLCalendar类"><a href="#HTMLCalendar类" class="headerlink" title="HTMLCalendar类"></a>HTMLCalendar类</h3><p>HTMLCalendar 类可以生成 HTML 日历。实例方法如下所示：</p><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">formatmonth(theyear, themonth, withyear=True)</td><td align="left">返回一个 HTML 表格作为指定年、月的日历</td></tr><tr><td align="left">formatyear(theyear, width=3)</td><td align="left">返回一个 HTML 表格作为指定年份的日历</td></tr><tr><td align="left">formatyearpage(theyear, width=3, css=’calendar.css’, encoding=None)</td><td align="left">返回一个完整的 HTML 页面作为指定年份的日历</td></tr></tbody></table><p>使用示例如下所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> calendar <span class="keyword">import</span> HTMLCalendar</span><br><span class="line">hc = HTMLCalendar()<span class="built_in">print</span>(hc.formatmonth(<span class="number">2019</span>, <span class="number">12</span>))<span class="built_in">print</span>(hc.formatyear(<span class="number">2019</span>))<span class="built_in">print</span>(hc.formatyearpage(<span class="number">2019</span>))</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>简单来说函数就是一段实现特定功能的代码，使用函数可以提高代码的重复利用率。Python 中有很多内置函数，比如之前常用的 print 函数，当内置函数不足以满足我们的需求时，我们还可以自定义函数。</p><p>自定义函数</p><p>Python 使用 def 关键字来声明函数，格式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数</span>):</span><br><span class="line">函数体</span><br><span class="line"><span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>如果要定义一个无任何功能的空函数，函数体只写 <code>pass</code> 即可。格式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>当我们不确定参数的个数时，可以使用不定长参数，在参数名前加 <code>*</code> 进行声明，格式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">*参数名</span>):</span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure><p>我们还可以使用 <code>lambda</code> 定义匿名函数，格式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数 : 表达式</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_empty</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_print</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_sum</span>(<span class="params">x, y</span>):</span><br><span class="line">    s = x + y</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;s--&gt;&#x27;</span>, s)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 不定长参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_variable</span>(<span class="params">*params</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> params:</span><br><span class="line">        <span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名函数</span></span><br><span class="line">my_sub = <span class="keyword">lambda</span> x, y: x - y</span><br></pre></td></tr></table></figure><h1 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h1><p><strong>模块</strong></p><p>Python 中一个以 <code>.py</code> 结尾的文件就是一个模块，模块中定义了变量、函数等来实现一些类似的功能。Python 有很多自带的模块（标准库）和第三方模块，一个模块可以被其他模块引用，实现了代码的复用性。</p><p><strong>包</strong></p><p>包是存放模块的文件夹，包中包含 <code>__init__.py</code> 和其他模块，<code>__init__.py</code> 可为空也可定义属性和方法，在 Python3.3 之前的版本，一个文件夹中只有包含 <code>__init__.py</code>，其他程序才能从该文件夹引入相应的模块、函数等，之后的版本没有 <code>__init__.py</code> 也能正常导入，简单来说就是 Python3.3 之前的版本，<code>__init__.py</code> 是包的标识，是必须要有的，之后的版本可以没有。</p><p><strong>创建包</strong></p><p>使用 PyCharm 创建包，步骤为：①打开 PyCharm 选中项目 ②右击鼠标选中 <code>New</code> 选项，然后再选中 <code>Python Package</code> 后单击鼠标，此时弹出创建窗口，如下所示：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIq3U5HM6kmaOenNbcA3lILbKynyT83lXA8owxzEM27wDSoqErGicglWpYNiaiaQvOqF3vlb0GTMZP0qA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>们填好名字后点击 <code>OK</code> 按钮即可。创建好后我们会发现 PyCharm 已经自动帮我们创建了空文件 <code>__init__.py</code>。</p><p><strong>创建模块</strong></p><p>使用 PyCharm 创建模块，步骤为：①选中刚刚创建的包  ②右击鼠标选中 <code>New</code> 选项，然后再选中 <code>Python File</code> 后单击鼠标，此时弹出创建窗口，如下所示：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIq3U5HM6kmaOenNbcA3lILbBibfI2ZXppOicEA2qhC8zq3eQtgaDTaT6MaM79aicZe8wpKNYDKW4AKNQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>我们填好名字后点击 <code>OK</code> 按钮即可。</p><p>我们创建包和模块的最终目录结构为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package</span><br><span class="line">|- pg1</span><br><span class="line">|- - __init__.py</span><br><span class="line">|- - a.py</span><br><span class="line">|- - b.py</span><br><span class="line">|- pg2</span><br><span class="line">|- - __init__.py</span><br><span class="line">|- - c.py</span><br><span class="line">|- - d.py</span><br></pre></td></tr></table></figure><p>a.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>b.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><p>c.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">c</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><p>d.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">d</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;d&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>引用</strong></p><p>从包中引入模块有如下两种方式：</p><p>import …</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import 包名1.包名2...模块名</span><br></pre></td></tr></table></figure><p>from … import …</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from 包名1.包名2... import 模块名</span><br><span class="line">from 包名1.包名2...模块名 import 变量名/函数名</span><br></pre></td></tr></table></figure><p>下面我们使用创建好的包和模块演示一下，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># a 模块中引入 b 模块</span></span><br><span class="line"><span class="keyword">import</span> pg1.b</span><br><span class="line"><span class="keyword">from</span> pg1 <span class="keyword">import</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 模块中引入 c 模块</span></span><br><span class="line"><span class="keyword">import</span> pg2.c</span><br><span class="line"><span class="keyword">from</span> pg2 <span class="keyword">import</span> c</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 模块中引入 c 模块和 d 模块</span></span><br><span class="line"><span class="keyword">import</span> pg2.c,pg2.d</span><br><span class="line"><span class="keyword">from</span> pg2 <span class="keyword">import</span> c,d</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 模块中引入包 pg2 下的所有模块</span></span><br><span class="line"><span class="keyword">from</span> pg2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 模块中引入 d 模块中函数 d()</span></span><br><span class="line"><span class="keyword">from</span> pg2.d <span class="keyword">import</span> d</span><br><span class="line"><span class="comment"># 调用函数 d()</span></span><br><span class="line">d()</span><br></pre></td></tr></table></figure><h1 id="python类和对象"><a href="#python类和对象" class="headerlink" title="python类和对象"></a>python类和对象</h1><p>python对象中的类成员</p><ul><li>字段</li><li>方法</li><li>属性</li></ul><p>字段</p><p>字段包括：普通字段和静态字段，使用和定义都是不一样，其最本质的区别就是内存中保存的位置不同。</p><blockquote><p>普通字段属于对象<br>静态字段属于类</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&#x27;ren&#x27;</span> <span class="comment">#静态字段</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#普通字段</span></span><br><span class="line">        self.name = <span class="string">&#x27;mingzi&#x27;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">p = Person()</span><br><span class="line">p.<span class="built_in">type</span> = <span class="string">&#x27;woman&#x27;</span></span><br><span class="line">p.name = <span class="string">&#x27;man&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(Person.<span class="built_in">type</span>)</span><br><span class="line"><span class="built_in">print</span>(p.name)</span><br></pre></td></tr></table></figure><p>方法</p><p>方法包括：普通方法、静态方法和类方法。</p><ul><li>普通方法：由对象调用；包含一个self参数；执行普通方法时，自动将调用该方法的对象赋值给self；</li><li>类方法：由类调用； 包含一个cls参数；执行类方法时，自动将调用该方法的类复制给cls；使用@classmethod装饰器</li><li>静态方法：由类调用；没有默认参数；使用@staticmethod装饰器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#普通方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setName</span>(<span class="params">name</span>):</span><br><span class="line">       self.name=name</span><br><span class="line">       </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_count</span>(<span class="params">cls</span>):</span><br><span class="line">        cls.count += <span class="number">1</span>       <span class="comment"># 可以通过类名修改类属性</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> cls.count</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">static_func</span>():      <span class="comment"># 静态方法 可以通过类名直接调用该方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;普通函数&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>属性</p><p>python中的属性就是普通方法的变种，就是将一个方法伪装成一个属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;is A func&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_AAA</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get的时候运行我啊&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_AAA</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set的时候运行我啊&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_AAA</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete的时候运行我啊&#x27;</span>)</span><br></pre></td></tr></table></figure><p>继承</p><p>Python 支持类的继承，而且支持多继承，语法格式为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">子类</span>(父类<span class="number">1</span>，父类<span class="number">2.</span>....):</span><br><span class="line">    </span><br><span class="line"> <span class="comment">#例如</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 波斯猫类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersianCat</span>(<span class="title class_ inherited__">Cat</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name, <span class="string">&#x27;正在吃&#x27;</span>+food)</span><br><span class="line"><span class="comment">#加菲猫类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GarfieldCat</span>(<span class="title class_ inherited__">Cat</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, speed</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name, <span class="string">&#x27;正在以&#x27;</span>+speed+<span class="string">&#x27;的速度奔跑&#x27;</span>)</span><br><span class="line"><span class="comment"># 单继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleCat</span>(<span class="title class_ inherited__">PersianCat</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 多继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultiCat</span>(PersianCat, GarfieldCat):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line">sc = SingleCat(<span class="string">&#x27;波斯猫1号&#x27;</span>)</span><br><span class="line">sc.eat(<span class="string">&#x27;鱼&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mc = MultiCat(<span class="string">&#x27;波斯加菲猫1号&#x27;</span>)</span><br><span class="line">mc.eat(<span class="string">&#x27;鱼&#x27;</span>)</span><br><span class="line">mc.run(<span class="string">&#x27;50迈&#x27;</span>)</span><br><span class="line"><span class="comment">#如果继承的父类方法不能满足我们的需求，这时子类可以重写父类方法，如下所示：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleCat</span>(<span class="title class_ inherited__">PersianCat</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food </span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name, <span class="string">&#x27;正在吃&#x27;</span>+food, <span class="string">&#x27;十分钟后&#x27;</span>, self.name+<span class="string">&#x27;吃饱了&#x27;</span>)</span><br><span class="line">sc = SingleCat(<span class="string">&#x27;波斯猫1号&#x27;</span>)</span><br><span class="line">sc.eat(<span class="string">&#x27;鱼&#x27;</span>)</span><br></pre></td></tr></table></figure><p>抽象类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc <span class="comment">#利用abc模块实现抽象类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">shuiguo</span>(metaclass=abc.ABCMeta):</span><br><span class="line">    </span><br><span class="line">    all_type=<span class="string">&#x27;sg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod </span><span class="comment">#定义抽象方法，无需实现功能</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod </span><span class="comment">#定义抽象方法，无需实现功能</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span>(<span class="title class_ inherited__">shuiguo</span>): <span class="comment">#子类继承抽象类，可是必须定义read和write方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是苹果&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;好吃&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pear</span>(<span class="title class_ inherited__">shuiguo</span>): <span class="comment">#子类继承抽象类，可是必须定义read和write方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是梨子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;yunfeizhike&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apple =Apple()</span><br><span class="line"></span><br><span class="line">pear=Pear()</span><br><span class="line"></span><br><span class="line">apple.func()</span><br><span class="line">pear.name()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pear.all_type)</span><br><span class="line"><span class="built_in">print</span>(apple.all_type)</span><br></pre></td></tr></table></figure><h1 id="文件基本操作"><a href="#文件基本操作" class="headerlink" title="文件基本操作"></a>文件基本操作</h1><p>在编程工作中文件操作还是比较常见的，基本文件操作包括：创建、读、写、关闭等，Python 中内置了一些文件操作函数，我们使用 Python 操作文件还是很方便的。</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a><strong>创建</strong></h2><p>Python 使用 <code>open()</code> 函数创建或打开文件，语法格式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(file, mode=<span class="string">&#x27;r&#x27;</span>, buffering=-<span class="number">1</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span>, opener=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#当有with关键字的时候我们通常写</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>() <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment">#执行文件操作且不需要执行close函数去关闭流，with会自动帮我们做好</span></span><br></pre></td></tr></table></figure><p>参数说明如下所示：</p><ul><li><strong>file</strong>：表示将要打开的文件的路径，也可以是要被封装的整数类型文件描述符。</li><li><strong>mode</strong>：是一个可选字符串，用于指定打开文件的模式，默认值是 <code>&#39;r&#39;</code>（以文本模式打开并读取）。可选模式如下：</li></ul><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">读取（默认）</td></tr><tr><td align="left">w</td><td align="left">写入，并先截断文件</td></tr><tr><td align="left">x</td><td align="left">排它性创建，如果文件已存在则失败</td></tr><tr><td align="left">a</td><td align="left">写入，如果文件存在则在末尾追加</td></tr><tr><td align="left">b</td><td align="left">二进制模式</td></tr><tr><td align="left">t</td><td align="left">文本模式（默认）</td></tr><tr><td align="left">+</td><td align="left">更新磁盘文件（读取并写入）</td></tr></tbody></table><ul><li><strong>buffering</strong>：是一个可选的整数，用于设置缓冲策略。</li><li><strong>encoding</strong>：用于解码或编码文件的编码的名称。</li><li><strong>errors</strong>：是一个可选的字符串，用于指定如何处理编码和解码错误（不能在二进制模式下使用）。</li><li><strong>newline</strong>：区分换行符。</li><li><strong>closefd</strong>：如果 closefd 为 False 并且给出了文件描述符而不是文件名，那么当文件关闭时，底层文件描述符将保持打开状态；如果给出文件名，closefd 为 True （默认值），否则将引发错误。</li><li><strong>opener</strong>：可以通过传递可调用的 opener 来使用自定义开启器。</li></ul><p>以 txt 格式文件为例，我们不手动创建文件，通过代码方式来创建，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, mode=<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行完上述代码，就为我们创建好了 test.txt 文件。</p><h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a><strong>写入</strong></h2><p>上面我们创建的文件 test.txt 没有任何内容，我们向这个文件中写入一些信息，对于写操作，Python 文件对象提供了两个函数，如下所示：</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">write(str)</td><td align="left">将字符串写入文件，返回写入字符长度</td></tr><tr><td align="left">writelines(s)</td><td align="left">向文件写入一个字符串列表</td></tr></tbody></table><p>我们使用这两个函数向文件中写入一些信息，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wf = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">wf.write(<span class="string">&#x27;Tom\n&#x27;</span>)</span><br><span class="line">wf.writelines([<span class="string">&#x27;Hello\n&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>])</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">wf.close</span><br></pre></td></tr></table></figure><p>上面我们使用了 close() 函数进行关闭操作，如果打开的文件忘记了关闭，可能会对程序造成一些隐患，为了避免这个问题的出现，可以使用 <code>with as</code> 语句，通过这种方式，程序执行完成后会自动关闭已经打开的文件。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> wf:</span><br><span class="line">    wf.write(<span class="string">&#x27;Tom\n&#x27;</span>)</span><br><span class="line">    wf.writelines([<span class="string">&#x27;Hello\n&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a><strong>读取</strong></h2><p>之前我们已经向文件中写入了一些内容，现在我们读取一下，对于文件的读操作，Python 文件对象提供了三个函数，如下所示：</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">read(size)</td><td align="left">读取指定的字节数，参数可选，无参或参数为负时读取所有</td></tr><tr><td align="left">readline()</td><td align="left">读取一行</td></tr><tr><td align="left">readlines()</td><td align="left">读取所有行并返回列表</td></tr></tbody></table><p>我们使用上面三个函数读取一下之前写入的内容，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> rf:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;readline--&gt;&#x27;</span>, rf.readline())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;read--&gt;&#x27;</span>, rf.read(<span class="number">6</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;readlines--&gt;&#x27;</span>, rf.readlines())</span><br></pre></td></tr></table></figure><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>Python 提供了两个与文件对象位置相关的函数，如下所示：</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">tell()</td><td align="left">返回文件对象在文件中的当前位置</td></tr><tr><td align="left">file.seek(offset[, whence])</td><td align="left">将文件对象移动到指定的位置；offset 表示移动的偏移量；whence 为可选参数，值为 0 表示从文件开头起算（默认值）、值为 1 表示使用当前文件位置、值为 2 表示使用文件末尾作为参考点</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;rb+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">b&#x27;123456789&#x27;</span>)</span><br><span class="line">    <span class="comment"># 文件对象位置</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell())</span><br><span class="line">    <span class="comment"># 移动到文件的第四个字节</span></span><br><span class="line">    f.seek(<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 读取一个字节，文件对象向后移动一位</span></span><br><span class="line">    <span class="built_in">print</span>(f.read(<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(f.tell())</span><br><span class="line">    <span class="comment"># 移动到倒数第二个字节</span></span><br><span class="line">    f.seek(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.tell())</span><br><span class="line">    <span class="built_in">print</span>(f.read(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h1 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h1><p>我们都知道 os 中文就是操作系统的意思，顾名思义，Python 的 os 模块提供了各种操作系统的接口，这些接口主要是用来操作文件和目录。</p><p>Python 中所有依赖于操作系统的内置模块统一设计方式为：对于不同操作系统可用的相同功能使用相同的接口，这样大大增加了代码的可移植性；当然，通过 os 模块操作某一系统的扩展功能也是可以的，但这样做会损害代码的可移植性。</p><p><strong>常用函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入os</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#os.getcwd()查看当前路径。</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br><span class="line"><span class="comment">#os.listdir(path)返回指定目录下包含的文件和目录名列表。</span></span><br><span class="line"><span class="built_in">print</span>(os.listdir(<span class="string">&#x27;E:/&#x27;</span>))</span><br><span class="line"><span class="comment">#os.path.abspath(path)返回路径 path 的绝对路径。</span></span><br><span class="line"><span class="comment"># 当前路径（相对路径方式）</span></span><br><span class="line"><span class="built_in">print</span>(os.path.abspath(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line"><span class="comment">#os.path.split(path)将路径 path 拆分为目录和文件两部分，返回结果为元组类型。</span></span><br><span class="line"><span class="built_in">print</span>(os.path.split(<span class="string">&#x27;E:/tmp.txt&#x27;</span>))</span><br><span class="line"><span class="comment">#os.path.join(path, *paths)将一个或多个 path（文件或目录） 进行拼接。</span></span><br><span class="line"><span class="built_in">print</span>(os.path.join(<span class="string">&#x27;E:/&#x27;</span>, <span class="string">&#x27;tmp.txt&#x27;</span>))</span><br><span class="line"><span class="comment">#os.path.getmtime(path)返回 path（文件或目录）的最后修改时间。</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.utcfromtimestamp(os.path.getmtime(<span class="string">&#x27;E:/tmp.txt&#x27;</span>)))</span><br><span class="line"><span class="comment">#os.path.exists(path)判断 path（文件或目录）是否存在，存在返回 True，否则返回 False。</span></span><br><span class="line"><span class="built_in">print</span>(os.path.exists(<span class="string">&#x27;E:/tmp.txt&#x27;</span>))</span><br><span class="line"><span class="comment">#os.path.isdir(path)判断 path 是否为目录。</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isdir(<span class="string">&#x27;E:/&#x27;</span>))</span><br><span class="line"><span class="comment">#os.path.isfile(path)判断 path 是否为文件。</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isfile(<span class="string">&#x27;E:/tmp.txt&#x27;</span>))</span><br><span class="line"><span class="comment">#os.path.getsize(path)返回 path 的大小，以字节为单位，若 path 是目录则返回 0。</span></span><br><span class="line"><span class="built_in">print</span>(os.path.getsize(<span class="string">&#x27;E:/tmp.txt&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.path.getsize(<span class="string">&#x27;E:/work&#x27;</span>))</span><br><span class="line"><span class="comment">#os.mkdir()创建一个目录。</span></span><br><span class="line">os.mkdir(<span class="string">&#x27;E:/test&#x27;</span>)</span><br><span class="line"><span class="comment">#os.makedirs()创建多级目录。目录 test1、test2 均不存在，此时使用 os.mkdir() 创建会报错，也就是说 os.mkdir() 创建目录时要保证末级目录之前的目录是存在的。</span></span><br><span class="line">os.makedirs(<span class="string">&#x27;E:/test1/test2&#x27;</span>)</span><br><span class="line"><span class="comment">#os.chdir(path)将当前工作目录更改为 path。</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br><span class="line">os.chdir(<span class="string">&#x27;/test&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br><span class="line"><span class="comment">#os.system(command)调用 shell 脚本。</span></span><br><span class="line"><span class="built_in">print</span>(os.system(<span class="string">&#x27;ping www.baidu.com&#x27;</span>))</span><br><span class="line"><span class="comment">#如果出现乱码，可以通过修改编码解决，比如：我在 Windows 下 PyCharm 中出现乱码问题，可以将 PyCharm 中编码修改为 GBK 解决。</span></span><br></pre></td></tr></table></figure><h1 id="python异常和错误"><a href="#python异常和错误" class="headerlink" title="python异常和错误"></a>python异常和错误</h1><p>程序中的错误我们通常称为 bug ，工作中我们不仅需要改自己程序中的 bug ，还需要改别人程序中的 bug ，新项目有 bug 要改，老项目也有 bug 要改，可以说 bug 几乎贯穿一个程序员的职业生涯… 我们通常将 bug 分为 Error（错误） 和 Exception（异常），我们下面来具体学习下 Python 中的 错误 和 异常。</p><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>错误 通常是指程序中的 语法错误 或 逻辑错误，来通过两个 Python 例子看一下：</p><p><strong>语法错误示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#print前面少了 : </span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello python&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们编写程序通常使用开发工具编写，比如：我使用 Pycharm 工具编写 Python 程序，像这种语法错误，在编写程序时，编译器就会检测出来并提示我们，因此，我们编写好的程序几乎不会出现这种问题。</p><p><strong>逻辑错误示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0 是不能作为被除数的</span></span><br><span class="line">a  = <span class="number">5</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(a/b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行结果：ZeroDivisionError: division by zero</span></span><br></pre></td></tr></table></figure><p>逻辑错误编译器是不会提示我们的，因此，我们编写程序时，对一些基本常识要有一定了解，从而，避免出现逻辑错误。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>即便 Python 程序的语法是正确的，在运行它的时候，也有可能发生错误，运行期检测到的错误被称为异常；大多数的异常都不会被程序处理，都以错误信息的形式展现。</p><h3 id="Python-内置异常"><a href="#Python-内置异常" class="headerlink" title="Python 内置异常"></a>Python 内置异常</h3><p>我们先来看一下异常层次结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">BaseException</span><br><span class="line"> +-- SystemExit</span><br><span class="line"> +-- KeyboardInterrupt</span><br><span class="line"> +-- GeneratorExit</span><br><span class="line"> +-- Exception</span><br><span class="line">      +-- StopIteration</span><br><span class="line">      +-- StopAsyncIteration</span><br><span class="line">      +-- ArithmeticError</span><br><span class="line">      |    +-- FloatingPointError</span><br><span class="line">      |    +-- OverflowError</span><br><span class="line">      |    +-- ZeroDivisionError</span><br><span class="line">      +-- AssertionError</span><br><span class="line">      +-- AttributeError</span><br><span class="line">      +-- BufferError</span><br><span class="line">      +-- EOFError</span><br><span class="line">      +-- ImportError</span><br><span class="line">      |    +-- ModuleNotFoundError</span><br><span class="line">      +-- LookupError</span><br><span class="line">      |    +-- IndexError</span><br><span class="line">      |    +-- KeyError</span><br><span class="line">      +-- MemoryError</span><br><span class="line">      +-- NameError</span><br><span class="line">      |    +-- UnboundLocalError</span><br><span class="line">      +-- OSError</span><br><span class="line">      |    +-- BlockingIOError</span><br><span class="line">      |    +-- ChildProcessError</span><br><span class="line">      |    +-- ConnectionError</span><br><span class="line">      |    |    +-- BrokenPipeError</span><br><span class="line">      |    |    +-- ConnectionAbortedError</span><br><span class="line">      |    |    +-- ConnectionRefusedError</span><br><span class="line">      |    |    +-- ConnectionResetError</span><br><span class="line">      |    +-- FileExistsError</span><br><span class="line">      |    +-- FileNotFoundError</span><br><span class="line">      |    +-- InterruptedError</span><br><span class="line">      |    +-- IsADirectoryError</span><br><span class="line">      |    +-- NotADirectoryError</span><br><span class="line">      |    +-- PermissionError</span><br><span class="line">      |    +-- ProcessLookupError</span><br><span class="line">      |    +-- TimeoutError</span><br><span class="line">      +-- ReferenceError</span><br><span class="line">      +-- RuntimeError</span><br><span class="line">      |    +-- NotImplementedError</span><br><span class="line">      |    +-- RecursionError</span><br><span class="line">      +-- SyntaxError</span><br><span class="line">      |    +-- IndentationError</span><br><span class="line">      |         +-- TabError</span><br><span class="line">      +-- SystemError</span><br><span class="line">      +-- TypeError</span><br><span class="line">      +-- ValueError</span><br><span class="line">      |    +-- UnicodeError</span><br><span class="line">      |         +-- UnicodeDecodeError</span><br><span class="line">      |         +-- UnicodeEncodeError</span><br><span class="line">      |         +-- UnicodeTranslateError</span><br><span class="line">      +-- Warning</span><br><span class="line">           +-- DeprecationWarning</span><br><span class="line">           +-- PendingDeprecationWarning</span><br><span class="line">           +-- RuntimeWarning</span><br><span class="line">           +-- SyntaxWarning</span><br><span class="line">           +-- UserWarning</span><br><span class="line">           +-- FutureWarning</span><br><span class="line">           +-- ImportWarning</span><br><span class="line">           +-- UnicodeWarning</span><br><span class="line">           +-- BytesWarning</span><br><span class="line">           +-- ResourceWarning</span><br></pre></td></tr></table></figure><p>通过上面的异常层次结构，我们可以清晰的看出，BaseException为所有异常的基类，其下面分为：SystemExit、KeyboardInterrupt、GeneratorExit、Exception 四类异常，Exception 为所有非系统退出类异常的基类，Python 提倡继承 Exception 或其子类派生新的异常；Exception 下包含我们常见的多种异常如：MemoryError（内存溢出）、BlockingIOError（IO异常）、SyntaxError（语法错误异常）… 详细说明可以查看下面列表：</p><table><thead><tr><th align="left">异常名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">BaseException</td><td align="left">所有异常的基类</td></tr><tr><td align="left">SystemExit</td><td align="left">解释器请求退出</td></tr><tr><td align="left">KeyboardInterrupt</td><td align="left">用户中断执行(通常是输入^C)</td></tr><tr><td align="left">Exception</td><td align="left">常规错误的基类</td></tr><tr><td align="left">StopIteration</td><td align="left">迭代器没有更多的值</td></tr><tr><td align="left">GeneratorExit</td><td align="left">生成器(generator)发生异常来通知退出</td></tr><tr><td align="left">StandardError</td><td align="left">所有的内建标准异常的基类</td></tr><tr><td align="left">ArithmeticError</td><td align="left">所有数值计算错误的基类</td></tr><tr><td align="left">FloatingPointError</td><td align="left">浮点计算错误</td></tr><tr><td align="left">OverflowError</td><td align="left">数值运算超出最大限制</td></tr><tr><td align="left">ZeroDivisionError</td><td align="left">除(或取模)零 (所有数据类型)</td></tr><tr><td align="left">AssertionError</td><td align="left">断言语句失败</td></tr><tr><td align="left">AttributeError</td><td align="left">对象没有这个属性</td></tr><tr><td align="left">EOFError</td><td align="left">没有内建输入,到达EOF 标记</td></tr><tr><td align="left">EnvironmentError</td><td align="left">操作系统错误的基类</td></tr><tr><td align="left">IOError</td><td align="left">输入/输出操作失败</td></tr><tr><td align="left">OSError</td><td align="left">操作系统错误</td></tr><tr><td align="left">WindowsError</td><td align="left">系统调用失败</td></tr><tr><td align="left">ImportError</td><td align="left">导入模块/对象失败</td></tr><tr><td align="left">LookupError</td><td align="left">无效数据查询的基类</td></tr><tr><td align="left">IndexError</td><td align="left">序列中没有此索引(index)</td></tr><tr><td align="left">KeyError</td><td align="left">映射中没有这个键</td></tr><tr><td align="left">MemoryError</td><td align="left">内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td align="left">NameError</td><td align="left">未声明/初始化对象 (没有属性)</td></tr><tr><td align="left">UnboundLocalError</td><td align="left">访问未初始化的本地变量</td></tr><tr><td align="left">ReferenceError</td><td align="left">弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td align="left">RuntimeError</td><td align="left">一般的运行时错误</td></tr><tr><td align="left">NotImplementedError</td><td align="left">尚未实现的方法</td></tr><tr><td align="left">SyntaxError</td><td align="left">Python 语法错误</td></tr><tr><td align="left">IndentationError</td><td align="left">缩进错误</td></tr><tr><td align="left">TabError</td><td align="left">Tab 和空格混用</td></tr><tr><td align="left">SystemError</td><td align="left">一般的解释器系统错误</td></tr><tr><td align="left">TypeError</td><td align="left">对类型无效的操作</td></tr><tr><td align="left">ValueError</td><td align="left">传入无效的参数</td></tr><tr><td align="left">UnicodeError</td><td align="left">Unicode 相关的错误</td></tr><tr><td align="left">UnicodeDecodeError</td><td align="left">Unicode 解码时的错误</td></tr><tr><td align="left">UnicodeEncodeError</td><td align="left">Unicode 编码时错误</td></tr><tr><td align="left">UnicodeTranslateError</td><td align="left">Unicode 转换时错误</td></tr><tr><td align="left">Warning</td><td align="left">警告的基类</td></tr><tr><td align="left">DeprecationWarning</td><td align="left">关于被弃用的特征的警告</td></tr><tr><td align="left">FutureWarning</td><td align="left">关于构造将来语义会有改变的警告</td></tr><tr><td align="left">OverflowWarning</td><td align="left">旧的关于自动提升为长整型(long)的警告</td></tr><tr><td align="left">PendingDeprecationWarning</td><td align="left">关于特性将会被废弃的警告</td></tr><tr><td align="left">RuntimeWarning</td><td align="left">可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td align="left">SyntaxWarning</td><td align="left">可疑的语法的警告</td></tr><tr><td align="left">UserWarning</td><td align="left">用户代码生成的警告</td></tr></tbody></table><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>Python 程序捕捉异常使用 try/except 语句，先看个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#1、被除数为 0，未捕获异常</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNum</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> / n</span><br><span class="line"><span class="built_in">print</span>(getNum(<span class="number">0</span>))</span><br><span class="line"><span class="comment">#输出结果：ZeroDivisionError: division by zero</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、捕获异常</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNum</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> / n</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Error: IOError argument.&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Error: ZeroDivisionError argument.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(getNum(<span class="number">0</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">Error: ZeroDivisionError argument.</span></span><br><span class="line"><span class="string">None</span></span><br></pre></td></tr></table></figure><p>try 语句的工作方式为：</p><ul><li>首先，执行 try 子句 （在 try 和 except 关键字之间的部分）；</li><li>如果没有异常发生， except 子句 在 try 语句执行完毕后就被忽略了；</li><li>如果在 try 子句执行过程中发生了异常，那么该子句其余的部分就会被忽略；</li><li>如果异常匹配于 except 关键字后面指定的异常类型，就执行对应的except子句，然后继续执行 try 语句之后的代码；</li><li>如果发生了一个异常，在 except 子句中没有与之匹配的分支，它就会传递到上一级 try 语句中；</li><li>如果最终仍找不到对应的处理语句，它就成为一个 未处理异常，终止程序运行，显示提示信息。</li></ul><p><strong>try/except 语句还可以带有一个 else、finally子句，示例如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getNum</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;try --&gt; &#x27;</span>,<span class="number">10</span> / n)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;except --&gt; Error: ZeroDivisionError argument.&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;else --&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;finally --&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1、调用：getNum(0)</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">except --&gt; Error: ZeroDivisionError argument.</span></span><br><span class="line"><span class="string">finally --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2、调用：getNum(1)</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">try --&gt;  10.0</span></span><br><span class="line"><span class="string">else --&gt;</span></span><br><span class="line"><span class="string">finally --&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>其中，else 子句只能出现在所有 except 子句之后，只有在没有出现异常时执行；finally 子句放在最后，无论是否出现异常都会执行。</p><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p>使用 raise 语句允许强制抛出一个指定的异常，要抛出的异常由 raise 的唯一参数标识，它必需是一个异常实例或异常类（继承自 Exception 的类），如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">raise</span> NameError(<span class="string">&#x27;HiThere&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>正常来说，Python 提供的异常类型已经满足我们的使用了,但是有时候我们有定制性的需求，我们可以自定义异常类，继承自 Error 或 Exception 类就可以了，看个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义异常类 MyExc</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyExc</span>(<span class="title class_ inherited__">Exception</span>):  <span class="comment">#继承Exception类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.value == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;被除数不能为0&#x27;</span></span><br><span class="line"><span class="comment">#自定义方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNum</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            exc = MyExc(n)</span><br><span class="line">            <span class="built_in">print</span>(exc)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">10</span> / n)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1、调用 getNum(1)，输出结果为：</span></span><br><span class="line"><span class="string">10.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2、调用 getNum(0)，输出结果为：</span></span><br><span class="line"><span class="string">被除数不能为0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>在这个自定义的异常例子中，当参数 n 不为 0 时，则正常，当 n 等于 0，则抛出异常，自定义异常在实际应用中很少用到，了解即可。</p><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>起初 Python 中并未内置枚举（enum）类型，枚举是在 Python3.4 添加的新功能，此时我们可能会有一个疑问：Python3.4 之前的版本还能不能使用枚举呢？</p><p>答案是可以使用，但是不能直接使用，使用之前需要先用 <code>pip install enum</code> 安装。</p><p><strong>什么是枚举？</strong></p><p>枚举可看作是一系列符号名称的集合，集合中每一个元素要保证唯一性和不可变，因此我们可以对枚举中元素进行恒等比较，通俗来讲枚举就是一系列常量的集合，枚举是可迭代的。</p><p><strong>枚举有什么作用？</strong></p><p>我们先来思考一个问题：不使用枚举我们如何定义常量呢？</p><p>常用的做法是采用变量名大写的方式来定义，这种方式虽然简单，但问题在于我们定义的仍然是变量、是可以被修改的，而常量是什么呢？简单来说就是不可变的量，枚举就有不可变的特性，<strong>所以枚举的主要作用就是用来定义常量的</strong>。</p><h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><p>枚举语法与 class 语法相同，面向对象中已经介绍过 class 了，枚举的定义可以通过继承 Enum 的方式来实现， 看一下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeekDay</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    Mon = <span class="number">0</span></span><br><span class="line">    Tue = <span class="number">1</span></span><br><span class="line">    Wed = <span class="number">2</span></span><br><span class="line">    Thu = <span class="number">3</span></span><br><span class="line">    Fri = <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>枚举成员及属性的访问如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 枚举成员</span></span><br><span class="line"><span class="built_in">print</span>(WeekDay.Mon)</span><br><span class="line"><span class="comment"># 枚举成员名称</span></span><br><span class="line"><span class="built_in">print</span>(WeekDay.Mon.name)</span><br><span class="line"><span class="comment"># 枚举成员值</span></span><br><span class="line"><span class="built_in">print</span>(WeekDay.Mon.value)</span><br></pre></td></tr></table></figure><p>枚举的迭代也很简单，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式 1</span></span><br><span class="line"><span class="keyword">for</span> day <span class="keyword">in</span> WeekDay:</span><br><span class="line">    <span class="comment"># 枚举成员</span></span><br><span class="line">    <span class="built_in">print</span>(day)</span><br><span class="line">    <span class="comment"># 枚举成员名称</span></span><br><span class="line">    <span class="built_in">print</span>(day.name)</span><br><span class="line">    <span class="comment"># 枚举成员值</span></span><br><span class="line">    <span class="built_in">print</span>(day.value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(WeekDay))</span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>枚举成员及属性可以使用 is 进行对象比较，还可以使用 == 进行值比较，看下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(WeekDay.Mon <span class="keyword">is</span> WeekDay.Thu)</span><br><span class="line"><span class="built_in">print</span>(WeekDay.Mon == WeekDay.Mon)</span><br><span class="line"><span class="built_in">print</span>(WeekDay.Mon.name == WeekDay.Mon.name)</span><br><span class="line"><span class="built_in">print</span>(WeekDay.Mon.value == WeekDay.Mon.value)</span><br></pre></td></tr></table></figure><p>枚举成员不能进行大小比较，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>WeekDay.Mon &lt; WeekDay.Thu</span><br><span class="line">TypeError: <span class="string">&#x27;&lt;&#x27;</span> <span class="keyword">not</span> supported between instances of <span class="string">&#x27;WeekDay&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;WeekDay&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="确保枚举值唯一"><a href="#确保枚举值唯一" class="headerlink" title="确保枚举值唯一"></a>确保枚举值唯一</h2><p>我们定义枚举时，成员名称是不可以重复的，但成员值是可以重复的，如果想要保证成员值不可重复，可以通过装饰器 <code>@unique</code> 来实现，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeekDay</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">Mon = <span class="number">0</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h1 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h1><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p><strong>迭代</strong></p><p>我们知道 Python 中有一些对象可以通过 <code>for</code> 来循环遍历，比如：列表、元组、字符等，以字符串为例，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;Hello&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>可迭代对象</p><p>可迭代对象需具有 <code>__iter__()</code> 方法，它们均可使用 <code>for</code> 循环遍历，我们可以使用 <code>isinstance()</code> 方法来判断一个对象是否为可迭代对象，看下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>, Iterable))<span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, Iterable))<span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">1024</span>, Iterable))<span class="comment">#False</span></span><br></pre></td></tr></table></figure><p><strong>迭代器</strong></p><p>迭代器需要具有 <code>__iter__()</code> 和 <code>__next__()</code> 两个方法，这两个方法共同组成了迭代器协议，通俗来讲迭代器就是一个可以记住遍历位置的对象，迭代器一定是可迭代的，反之不成立。</p><ul><li><code>__iter__()</code>：返回迭代器对象本身</li><li><code>__next__()</code>：返回下一项数据</li></ul><p>迭代器对象本质是一个数据流，它通过不断调用 <code>__next__()</code> 方法或被内置的 <code>next()</code> 方法调用返回下一项数据，当没有下一项数据时抛出 <code>StopIteration</code> 异常迭代结束。上面我们说的 <code>for</code> 循环语句的实现便是利用了迭代器。</p><p>我们试着自己来实现一个迭代器，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyIterator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.s = <span class="string">&#x27;程序之间&#x27;</span></span><br><span class="line">        self.i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.i &lt; <span class="number">4</span>:</span><br><span class="line">            n = self.s[self.i]</span><br><span class="line">            self.i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">mi = <span class="built_in">iter</span>(MyIterator())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mi:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>生成器是用来创建迭代器的工具，其写法与标准函数类似，不同之处在于返回时使用 yield 语句，我们再来熟悉一下：</p><blockquote><p>yield 是一个关键字，作用和 return 差不多，差别在于 yield 返回的是一个生成器（在 Python 中，一边循环一边计算的机制，称为生成器），它的作用是：有利于减小服务器资源，在列表中所有数据存入内存，而生成器相当于一种方法而不是具体的信息，用多少取多少，占用内存小。</p></blockquote><p>生成器的创建方式有很多种，比如：使用 <code>yield</code> 语句、生成器表达式（可以简单的理解为是将列表的 <code>[]</code> 换成了 <code>()</code>，特点是更加简洁，但不够灵活）。看下示例：</p><p>示例1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>): <span class="comment">#生成len(data)-1，len(data)-2，len(data)-3......0 左闭右开</span></span><br><span class="line">        <span class="keyword">yield</span> data[i]<span class="comment">#返回data[i]</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> reverse(<span class="string">&#x27;Hello&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(char)</span><br><span class="line"><span class="comment">#range(start,stop,step) 开始位置,结束位置,步长</span></span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表</span></span><br><span class="line">lis = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span>(lis)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器</span></span><br><span class="line">gen = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> g <span class="keyword">in</span> gen:</span><br><span class="line">    <span class="built_in">print</span>(g)</span><br></pre></td></tr></table></figure><h1 id="装饰器-详解"><a href="#装饰器-详解" class="headerlink" title="装饰器(详解)"></a>装饰器(详解)</h1><p>首先我们来了解下闭包，什么是闭包呢？看一下维基百科给出的解析：</p><blockquote><p>闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。</p></blockquote><p>看了上面的解释，你可能已经懂了，也可能还是有点懵 B。不过都没关系，我们再以 Python 为例更通俗的解释一下：比如我们调用一个带有返回值的函数 x，此时函数 x 为我们返回一个函数 y，这个函数 y 就被称作闭包，这么一说是不是豁然开朗了。需要注意一点就是闭包并不是 Python 特有的，很多语言都有闭包的概念。具体示例如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">x</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">y</span>(<span class="params">name</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;id:&#x27;</span>, <span class="built_in">id</span>, <span class="string">&#x27;name:&#x27;</span>, name)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">y = x(<span class="string">&#x27;ityard&#x27;</span>)</span><br><span class="line">y(<span class="string">&#x27;程序之间&#x27;</span>)</span><br></pre></td></tr></table></figure><p>通过上面的示例，我们会发现闭包与类有一些相似，比如：它们都能实现数据的封装、方法的复用等；此外，通过使用闭包可以避免使用全局变量，还能将函数与其所操作的数据关连起来。</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p> 装饰器本质上是一个Python函数(其实就是闭包)，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。装饰器用于有以下场景，比如:插入日志、性能测试、事务处理、缓存、权限校验等场景。</p><p>装饰器可以基于函数实现也可基于类实现，其使用方式基本是固定的，看一下基本步骤：</p><ul><li>定义装饰函数（类）</li><li>定义业务函数</li><li>在业务函数上添加 <code>@装饰函数（类）名</code></li></ul><p>下面请看具体示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给函数加上装饰器一般的写法</span></span><br><span class="line"><span class="comment"># 为函数添加一个统计运行时长的功能</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">how_much_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        t_start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        t_end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;一共花费了&#123;0&#125;秒时间&quot;</span>.<span class="built_in">format</span>(t_end - t_start, ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">    <span class="comment"># 将增加的新功能代码以及被装饰函数运行代码func()一同打包返回，返回的是一个内部函数，这个被返回的函数就是装饰器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep_5s</span>():</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d秒结束了&quot;</span> % (<span class="number">5</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep_6s</span>():</span><br><span class="line">    time.sleep(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d秒结束了&quot;</span> % (<span class="number">6</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep_5s = how_much_time(sleep_5s)</span><br><span class="line"><span class="comment"># 因为sleep_5s函数的功能就是睡5秒钟，虽然增加了统计运行时间的功能，但是他本身功能没变(还是睡5秒钟)，所以仍然用原来函数名接收增加功能了的自己</span></span><br><span class="line">sleep_6s = how_much_time(sleep_6s)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=sleep_5s)</span><br><span class="line">t2 = threading.Thread(target=sleep_6s)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line"><span class="comment"># 5秒结束了</span></span><br><span class="line"><span class="comment"># 一共花费了5.014161109924316秒时间</span></span><br><span class="line"><span class="comment"># 6秒结束了</span></span><br><span class="line"><span class="comment"># 一共花费了6.011810302734375秒时间</span></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#标准语法糖写法</span></span><br><span class="line"><span class="comment"># 为函数添加一个统计运行时长的功能以及日志记录功能</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">how_much_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;how_much_time函数开始了&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        t_start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        t_end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;一共花费了&#123;0&#125;秒时间&quot;</span>.<span class="built_in">format</span>(t_end - t_start, ))</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mylog</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;mylog函数开始了&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner_1</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner_1</span><br><span class="line"> </span><br><span class="line"><span class="meta">@mylog</span></span><br><span class="line"><span class="meta">@how_much_time</span></span><br><span class="line"><span class="comment"># 等价于mylog(how_much_time(sleep_5s))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep_5s</span>():</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d秒结束了&quot;</span> % (<span class="number">5</span>,))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sleep_5s()</span><br><span class="line"><span class="comment">#how_much_time函数开始了</span></span><br><span class="line"><span class="comment">#mylog函数开始了</span></span><br><span class="line"><span class="comment">#start</span></span><br><span class="line"><span class="comment">#5秒结束了</span></span><br><span class="line"><span class="comment">#一共花费了5.012601613998413秒时间</span></span><br><span class="line"><span class="comment">#end</span></span><br></pre></td></tr></table></figure><p>Python 中还支持多个装饰器同时使用，使用方式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为函数添加一个统计运行时长的功能以及日志记录功能</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"> <span class="comment">#执行顺序为：</span></span><br><span class="line">    <span class="comment">#1.how_much_time  print(&quot;mylog函数开始了&quot;)</span></span><br><span class="line">    <span class="comment">#2.mylog  print(&quot;how_much_time函数开始了&quot;)</span></span><br><span class="line">    <span class="comment">#3.how_much_time  def inner()</span></span><br><span class="line">    <span class="comment">#4.mylog def inner_1()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">how_much_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;how_much_time函数开始了&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        t_start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        t_end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;一共花费了&#123;0&#125;秒时间&quot;</span>.<span class="built_in">format</span>(t_end - t_start, ))</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mylog</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;mylog函数开始了&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner_1</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner_1</span><br><span class="line"> </span><br><span class="line"><span class="meta">@mylog</span></span><br><span class="line"><span class="meta">@how_much_time</span></span><br><span class="line"><span class="comment"># 等价于mylog(how_much_time(sleep_5s))</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep_5s</span>():</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d秒结束了&quot;</span> % (<span class="number">5</span>,))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sleep_5s()</span><br><span class="line"><span class="comment">#how_much_time函数开始了</span></span><br><span class="line"><span class="comment">#mylog函数开始了</span></span><br><span class="line"><span class="comment">#start</span></span><br><span class="line"><span class="comment">#5秒结束了</span></span><br><span class="line"><span class="comment">#一共花费了5.012601613998413秒时间</span></span><br><span class="line"><span class="comment">#end</span></span><br></pre></td></tr></table></figure><p><strong>python带参数的装饰器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myblog</span>(<span class="params"><span class="built_in">type</span></span>)：</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">decorate</span>(<span class="params">func</span>):</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>==<span class="string">&#x27;文件&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;文件&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>：</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;控制台&quot;</span>)</span><br><span class="line">         <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">      <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="基于类"><a href="#基于类" class="headerlink" title="基于类"></a>基于类</h2><p>装饰器除了基于函数实现，还可以基于类实现，看下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;函数名是 %s &#x27;</span> % func.__name__)</span><br><span class="line">        self.__func = func</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        self.__func()</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello ...&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">hello()</span><br></pre></td></tr></table></figure><h1 id="python语法糖"><a href="#python语法糖" class="headerlink" title="python语法糖"></a>python语法糖</h1>]]></content>
    
    
    <summary type="html">Python</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>数据挖掘</title>
    <link href="http://example.com/2022/10/21/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    <id>http://example.com/2022/10/21/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/</id>
    <published>2022-10-21T08:00:00.000Z</published>
    <updated>2022-10-21T08:09:38.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是数据挖掘？"><a href="#什么是数据挖掘？" class="headerlink" title="什么是数据挖掘？"></a>什么是数据挖掘？</h1><p>数据挖掘（英语：data mining）是一个跨学科的计算机科学分支 。它是用人工智能、机器学习、统计学和数据库的交叉方法在相对较大型的数据集中发现模式的计算过程。</p><p>数据挖掘过程的总体目标是从一个数据集中提取信息，并将其转换成可理解的结构，以进一步使用。除了原始分析步骤，它还涉及到数据库和数据管理方面、数据预处理、模型与推断方面考量、兴趣度度量、复杂度的考虑，以及发现结构、可视化及在线更新等后处理。数据挖掘是“数据库知识发现”（Knowledge-Discovery in Databases, KDD）的分析步骤，本质上属于机器学习的范畴。</p><p>数据挖掘有以下这些不同的定义：</p><ol><li>从资料中提取出隐含的过去未知的有价值的潜在信息</li><li>一门从大量资料或数据库中提取有用信息的科学</li></ol><h1 id="数据挖掘解决的问题"><a href="#数据挖掘解决的问题" class="headerlink" title="数据挖掘解决的问题"></a>数据挖掘解决的问题</h1><h2 id="聚类问题"><a href="#聚类问题" class="headerlink" title="聚类问题"></a>聚类问题</h2><p>聚类问题不属于预测性的问题，它主要解决的是把一群对象划分成若干个组的问题。划分的依据是聚类问题的核心。所谓“物以类聚，人以群分”，故得名聚类。</p><h2 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h2><p>分类问题属于预测性的问题，但是它跟普通预测问题的区别在于其预测的结果是类别（如 A、B、C 三类）而不是一个具体的数值（如 55、65、75……）。</p><p>举个例子，你和朋友在路上走着，迎面走来一个人，你对朋友说：我猜这个人是个上海人，那么这个问题就属于分类问题；如果你对朋友说：我猜这个人的年龄在 30 岁左右，那么这个问题就属于后面要说到的预测问题。</p><h2 id="预测问题"><a href="#预测问题" class="headerlink" title="预测问题"></a>预测问题</h2><p>此处说的预测问题指的是狭义的预测，并不包含前面阐述的分类问题，因为分类问题也属于预测。一般来说我们谈预测问题主要指预测变量的取值为连续数值型的情况（也就是回归问题）。</p><h2 id="关联问题"><a href="#关联问题" class="headerlink" title="关联问题"></a>关联问题</h2><p>关联问题最常见的一个场景就是推荐，比如，你在京东或者淘宝购物的时候，在选中一个商品之后，往往会给你推荐几种其他商品组合，这种功能就可以使用关联挖掘来实现。</p><h1 id="数据挖掘常用的方法"><a href="#数据挖掘常用的方法" class="headerlink" title="数据挖掘常用的方法"></a>数据挖掘常用的方法</h1><p><strong>分类</strong></p><p>分类是找出<a href="https://cloud.tencent.com/solution/database?from=10680">数据库</a>中一组数据对象的共同特点并按照分类模式将其划分为不同的类，其目的是通过分类模型，将数据库中的数据项映射到某个给定的类别。</p><p>它可以应用到客户的分类、客户的属性和特征分析、客户满意度分析、客户的购买趋势预测等，如一个汽车零售商将客户按照对汽车的喜好划分成不同的类，这样营销人员就可以将新型汽车的广告手册直接邮寄到有这种喜好的客户手中，从而大大增加了商业机会。</p><p><strong>回归分析</strong></p><p>回归分析方法反映的是事务数据库中属性值在时间上的特征，产生一个将数据项映射到一个实值预测变量的函数，发现变量或属性间的依赖关系，其主要研究问题包括数据序列的趋势特征、数据序列的预测以及数据间的相关关系等。</p><p>它可以应用到市场营销的各个方面，如客户寻求、保持和预防客户流失活动、产品生命周期分析、销售趋势预测及有针对性的促销活动等。</p><p><strong>聚类</strong></p><p>聚类分析是把一组数据按照相似性和差异性分为几个类别，其目的是使得属于同一类别的数据间的相似性尽可能大，不同类别中的数据间的相似性尽可能小。</p><p>它可以应用到客户群体的分类、客户背景分析、客户购买趋势预测、市场的细分等。</p><p><strong>关联规则</strong></p><p>关联规则是描述数据库中数据项之间所存在的关系的规则，即根据一个事务中某些项的出现可导出另一些项在同一事务中也出现，即隐藏在数据间的关联或相互关系。</p><p>在客户关系管理中，通过对企业的客户数据库里的大量数据进行挖掘，可以从大量的记录中发现有趣的关联关系，找出影响市场营销效果的关键因素，为产品定位、定价与定制客户群，客户寻求、细分与保持，市场营销与推销，营销风险评估和诈骗预测等决策支持提供参考依据。</p><p><strong>特征分析</strong></p><p>特征分析是从数据库中的一组数据中提取出关于这些数据的特征式，这些特征式表达了该数据集的总体特征。如营销人员通过对客户流失因素的特征提取，可以得到导致客户流失的一系列原因和主要特征，利用这些特征可以有效地预防客户的流失。</p><p><strong>变化和偏差分析</strong></p><p>偏差包括很大一类潜在有趣的知识，如分类中的反常实例，模式的例外，观察结果对期望的偏差等，其目的是寻找观察结果与参照量之间有意义的差别。在企业危机管理及其预警中，管理者更感兴趣的是那些意外规则。意外规则的挖掘可以应用到各种异常信息的发现、分析、识别、评价和预警等方面。</p><p><strong>Web页挖掘</strong></p><p>随着Internet的迅速发展及Web 的全球普及， 使得Web上的信息量无比丰富，通过对Web的挖掘，可以利用Web 的海量数据进行分析，收集政治、经济、政策、科技、金融、各种市场、竞争对手、供求信息、客户等有关的信息，集中精力分析和处理那些对企业有重大或潜在重大影响的外部环境信息和内部经营信息，并根据分析结果找出企业管理过程中出现的各种问题和可能引起危机的先兆，对这些信息进行分析和处理，以便识别、分析、评价和管理危机。</p><h1 id="数据挖掘过程"><a href="#数据挖掘过程" class="headerlink" title="数据挖掘过程"></a>数据挖掘过程</h1><p>数据挖掘(data mining)又译为资料探勘、数据采矿，是指从大量的、不完全的、有噪声的、模糊的、随机的数据中提取隐含在其中的、人们事先不知道的但又潜在有用的信息和知识的过程。</p><p>数据挖掘的具体过程描述如下：</p><ul><li>数据：进行数据挖掘首先要有数据，可以根据任务的目的选择数据集，并筛选自己需要的数据，或者根据实际情况构造自己需要的数据。</li><li>预处理：确定数据集后，就要对数据进行预处理，使数据能够为我们所用。数据预处理可以提高数据质量，包括准确性、完整性和一致性。进行数据预处理的方法有数据清理、数据集成、数据规约和数据变换等。</li><li>变换：进行数据预处理后，对数据进行变换，将数据转换成一个分析模型，这个分析模型是针对数据挖掘算法建立的。建立一个真正适合数据挖掘算法的分析模型是数据挖掘成功的关键。</li><li>数据挖掘：对经过转换的数据进行挖掘，除了选择合适的挖掘算法外，其余一切工作都能自动地完成。</li><li>解释/评估：解释并评估结果，最终得到知识。其使用的分析方法一般视数据挖掘操作而定，通常会用到可视化技术。</li></ul><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021160914.png?raw=true" alt="blog_images20221021160914.png"></p>]]></content>
    
    
    <summary type="html">数据挖掘</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>数据可视化</title>
    <link href="http://example.com/2022/10/21/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://example.com/2022/10/21/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
    <published>2022-10-21T07:00:00.000Z</published>
    <updated>2022-12-14T01:25:58.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Matplotlib-是什么"><a href="#Matplotlib-是什么" class="headerlink" title="Matplotlib 是什么"></a>Matplotlib 是什么</h1><p>Matplotlib 是一款用于数据可视化的 Python 软件包，支持跨平台运行，它能够根据 NumPy ndarray 数组来绘制 2D 图像，它使用简单、代码清晰易懂，深受广大技术爱好者喜爱。</p><p>这里推荐 matplotlib 文档学习网站</p><p><strong>工具包</strong></p><p>Matplotlib 附带了几个附加工具包 (opens new window)， 包括 3d 绘图工具 mplot3d， 轴辅助工具 axes_grid1 和轴辅助工具 axisartist。</p><p><strong>第三方包</strong></p><p>大量的第三方软件包 (opens new window)扩展并建立在 Matplotlib 功能的基础上，包括几个更高级别的绘图界面（seaborn (opens new window)， holoviews (opens new window)， ggplot (opens new window)，…）以及两个投影和制图工具包（basemap (opens new window)和 cartopy (opens new window)）</p><h1 id="下载-matplotlib"><a href="#下载-matplotlib" class="headerlink" title="下载 matplotlib"></a>下载 matplotlib</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install matplotlib #conda下载</span><br><span class="line">pip install matplotlib #pip下载</span><br></pre></td></tr></table></figure><h1 id="认识-Matploblib"><a href="#认识-Matploblib" class="headerlink" title="认识 Matploblib"></a>认识 Matploblib</h1><p>Matplotlib 生成的图形主要由以下几个部分构成：</p><ul><li>Figure：指整个图形，您可以把它理解成一张画布，它包括了所有的元素，比如标题、轴线等；</li><li>Axes：绘制 2D 图像的实际区域，也称为轴域区，或者绘图区；</li><li>Axis：指坐标系中的垂直轴与水平轴，包含轴的长度大小（图中轴长为 7）、轴标签（指 x 轴，y 轴）和刻度标签；</li><li>Artist：您在画布上看到的所有元素都属于 Artist 对象，比如文本对象（title、xlabel、ylabel）、Line2D 对象（用于绘制 2D 图像）等。</li></ul><h2 id="Figure"><a href="#Figure" class="headerlink" title="Figure"></a>Figure</h2><p>在任何绘图之前，我们需要一个 Figure 对象，可以理解成我们需要一张画板才能开始绘图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig = plt.figure()</span><br></pre></td></tr></table></figure><p>figure 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">figure(num=<span class="literal">None</span>,  <span class="comment"># autoincrement if None, else integer from 1-N</span></span><br><span class="line">           figsize=<span class="literal">None</span>,  <span class="comment"># defaults to rc figure.figsize</span></span><br><span class="line">           dpi=<span class="literal">None</span>,  <span class="comment"># defaults to rc figure.dpi</span></span><br><span class="line">           facecolor=<span class="literal">None</span>,  <span class="comment"># defaults to rc figure.facecolor</span></span><br><span class="line">           edgecolor=<span class="literal">None</span>,  <span class="comment"># defaults to rc figure.edgecolor</span></span><br><span class="line">           frameon=<span class="literal">True</span>,</span><br><span class="line">           FigureClass=Figure,</span><br><span class="line">           clear=<span class="literal">False</span>,</span><br><span class="line">           **kwargs</span><br><span class="line">           ):</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>figsize</td><td>指定画布的大小，(宽度,高度)，单位为英寸。</td></tr><tr><td>dpi</td><td>指定绘图对象的分辨率，即每英寸多少个像素，默认值为 80。</td></tr><tr><td>facecolor</td><td>背景颜色。</td></tr><tr><td>dgecolor</td><td>边框颜色。</td></tr><tr><td>frameon</td><td>是否显示边框。</td></tr></tbody></table><h2 id="Axes"><a href="#Axes" class="headerlink" title="Axes"></a>Axes</h2><p>在拥有 Figure 对象之后，在作画前我们还需要轴，没有轴的话就没有绘图基准，所以需要添加 Axes。也可以理解成为真正可以作画的纸。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">6</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">ax.<span class="built_in">set</span>(xlim=[<span class="number">0.5</span>, <span class="number">4.5</span>], ylim=[-<span class="number">2</span>, <span class="number">8</span>], title=<span class="string">&#x27;An Example Axes&#x27;</span>,</span><br><span class="line">       ylabel=<span class="string">&#x27;Y-Axis&#x27;</span>, xlabel=<span class="string">&#x27;X-Axis&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_imagesimage-20221020212335502.png?raw=true" alt="blog_imagesimage-20221020212335502.png"></p><p>对于上面的 fig.add_subplot(111)就是添加 Axes 的，参数的解释的在画板的第 1 行第 1 列的第一个位置生成一个 Axes 对象来准备作画。也可以通过 fig.add_subplot(2, 2, 1)的方式生成 Axes，前面两个参数确定了面板的划分，例如 2， 2 会将整个面板划分成 2 * 2 的方格，第三个参数取值范围是 [1, 2*2] 表示第几个 Axes。如下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">221</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">222</span>)</span><br><span class="line">ax3 = fig.add_subplot(<span class="number">224</span>)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021111542.png?raw=true" alt="blog_images20221021111542.png"></p><h2 id="Multiple-Axes"><a href="#Multiple-Axes" class="headerlink" title="Multiple Axes"></a>Multiple Axes</h2><p>可以发现我们上面添加 Axes 似乎有点弱鸡，所以提供了下面的方式一次性生成所有 Axes：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, axes = plt.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">2</span>)</span><br><span class="line">axes[<span class="number">0</span>,<span class="number">0</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Upper Left&#x27;</span>)</span><br><span class="line">axes[<span class="number">0</span>,<span class="number">1</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Upper Right&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>,<span class="number">0</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Lower Left&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>,<span class="number">1</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Lower Right&#x27;</span>)</span><br></pre></td></tr></table></figure><p>fig 还是我们熟悉的画板， axes 成了我们常用二维数组的形式访问，这在循环绘图时，额外好用。</p><p>subplots 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subplot(nrows,ncols,sharex,sharey,subplot_kw,**fig_kw)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>nrows</td><td>行数</td></tr><tr><td>ncols</td><td>列数</td></tr><tr><td>sharex</td><td>所有 subplot 的 x 轴刻度</td></tr><tr><td>sharey</td><td>所有 subplot 的 y 轴刻度</td></tr><tr><td>subplot_kw</td><td>用户创建各个 subplot 的关键字字典</td></tr><tr><td>**fig_kw</td><td>其他关键字如 figsize</td></tr></tbody></table><h2 id="Matplotlib-subplot2grid"><a href="#Matplotlib-subplot2grid" class="headerlink" title="Matplotlib subplot2grid"></a>Matplotlib subplot2grid</h2><p><code>matplotlib.pyplot</code> 模块提供了 subplot2grid() ，该函数能够在画布的特定位置创建 axes 对象（即绘图区域）。不仅如此，它还可以使用不同数量的行、列来创建跨度不同的绘图区域。与 subplot() 和 subplots() 函数不同，subplot2gird() 函数以非等分的形式对画布进行切分，并按照绘图区域的大小来展示最终绘图结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot2grid(shape, location, rowspan, colspan)</span><br></pre></td></tr></table></figure><p>参数含义如下：</p><ul><li>shape：把该参数值规定的网格区域作为绘图区域；</li><li>location：在给定的位置绘制图形，初始位置 (0,0) 表示第 1 行第 1 列；</li><li>rowsapan/colspan：这两个参数用来设置让子区跨越几行几列。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#使用 colspan指定列，使用rowspan指定行</span></span><br><span class="line">a1 = plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>),(<span class="number">0</span>,<span class="number">0</span>),colspan = <span class="number">2</span>)</span><br><span class="line">a2 = plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>),(<span class="number">0</span>,<span class="number">2</span>), rowspan = <span class="number">3</span>)</span><br><span class="line">a3 = plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>),(<span class="number">1</span>,<span class="number">0</span>),rowspan = <span class="number">2</span>, colspan = <span class="number">2</span>)</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">a2.plot(x, x*x)</span><br><span class="line">a2.set_title(<span class="string">&#x27;square&#x27;</span>)</span><br><span class="line">a1.plot(x, np.exp(x))</span><br><span class="line">a1.set_title(<span class="string">&#x27;exp&#x27;</span>)</span><br><span class="line">a3.plot(x, np.log(x))</span><br><span class="line">a3.set_title(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021132324.png?raw=true" alt="blog_images20221021132324.png"></p><h2 id="Axes-Vs-pyplot"><a href="#Axes-Vs-pyplot" class="headerlink" title="Axes Vs .pyplot"></a>Axes Vs .pyplot</h2><p>相信不少人看过下面的代码，很简单并易懂，但是下面的作画方式只适合简单的绘图，快速的将图绘出。在处理复杂的绘图工作时，我们还是需要使用 Axes 来完成作画的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">10</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>], color=<span class="string">&#x27;lightblue&#x27;</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">plt.xlim(<span class="number">0.5</span>, <span class="number">4.5</span>)</span><br><span class="line">plt.show()<span class="comment">#总结pyplot只适合快速作图而axes适合复杂作图</span></span><br></pre></td></tr></table></figure><h2 id="解决-matplotlib-常见问题"><a href="#解决-matplotlib-常见问题" class="headerlink" title="解决 matplotlib 常见问题"></a>解决 matplotlib 常见问题</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021124926.png?raw=true" alt="blog_images20221021124926.png"></p><p>原本要输出的中文变成了方框。<br><strong>原因是 matplotlib 是由外国人写的，不支持中文显示</strong></p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>在代码中加入这两行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决中文问题</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>] <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span> <span class="comment"># 用来正常显示负号</span></span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">font = FontProperties(fname=<span class="string">r&quot;c:\windows\fonts\simsun.ttc&quot;</span>, size=<span class="number">14</span>)<span class="comment">#设置汉字格式</span></span><br><span class="line">axs0_ylabel_text = axs[<span class="number">0</span>][<span class="number">0</span>].set_ylabel(<span class="string">u&#x27;玩视频游戏所消耗时间占&#x27;</span>, fontproperties=font)<span class="comment">#在需要显示中文的坐标或者标签上传入font字体</span></span><br></pre></td></tr></table></figure><h2 id="Matplotlib-pyplot-接口汇总"><a href="#Matplotlib-pyplot-接口汇总" class="headerlink" title="Matplotlib.pyplot 接口汇总"></a>Matplotlib.pyplot 接口汇总</h2><p><strong>绘图类型</strong></p><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>Bar</td><td>绘制条形图</td></tr><tr><td>Barh</td><td>绘制水平条形图</td></tr><tr><td>Boxplot</td><td>绘制箱型图</td></tr><tr><td>Hist</td><td>绘制直方图</td></tr><tr><td>his2d</td><td>绘制 2D 直方图</td></tr><tr><td>Pie</td><td>绘制饼状图</td></tr><tr><td>Plot</td><td>在坐标轴上画线或者标记</td></tr><tr><td>Polar</td><td>绘制极坐标图</td></tr><tr><td>Scatter</td><td>绘制 x 与 y 的散点图</td></tr><tr><td>Stackplot</td><td>绘制堆叠图</td></tr><tr><td>Stem</td><td>用来绘制二维离散数据绘制（又称为“火柴图”）</td></tr><tr><td>Step</td><td>绘制阶梯图</td></tr><tr><td>Quiver</td><td>绘制一个二维按箭头</td></tr></tbody></table><p><strong>image 函数</strong></p><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>Imread</td><td>从文件中读取图像的数据并形成数组。</td></tr><tr><td>Imsave</td><td>将数组另存为图像文件。</td></tr><tr><td>Imshow</td><td>在数轴区域内显示图像。</td></tr></tbody></table><p><strong>Axis</strong></p><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>Axes</td><td>在画布(Figure)中添加轴</td></tr><tr><td>Text</td><td>向轴添加文本</td></tr><tr><td>Title</td><td>设置当前轴的标题</td></tr><tr><td>Xlabel</td><td>设置 x 轴标签</td></tr><tr><td>Xlim</td><td>获取或者设置 x 轴区间大小</td></tr><tr><td>Xscale</td><td>设置 x 轴缩放比例</td></tr><tr><td>Xticks</td><td>获取或设置 x 轴刻标和相应标签</td></tr><tr><td>Ylabel</td><td>设置 y 轴的标签</td></tr><tr><td>Ylim</td><td>获取或设置 y 轴的区间大小</td></tr><tr><td>Yscale</td><td>设置 y 轴的缩放比例</td></tr><tr><td>Yticks</td><td>获取或设置 y 轴的刻标和相应标签</td></tr></tbody></table><p>Figure 函数</p><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>Figtext</td><td>在画布上添加文本</td></tr><tr><td>Figure</td><td>创建一个新画布</td></tr><tr><td>Show</td><td>显示数字</td></tr><tr><td>Savefig</td><td>保存当前画布</td></tr><tr><td>Close</td><td>关闭画布窗口</td></tr></tbody></table><h1 id="基本绘图-2D"><a href="#基本绘图-2D" class="headerlink" title="基本绘图 2D"></a>基本绘图 2D</h1><p>Pyplot 是 Matplotlib 的子库，提供了和 MATLAB 类似的绘图 API。</p><p>Pyplot 是常用的绘图模块，能很方便让用户绘制 2D 图表。</p><p>Pyplot 包含一系列绘图函数的相关函数，每个函数会对当前的图像进行一些修改，例如：给图像加上标记，生新的图像，在图像中产生新的绘图区域等等。</p><h2 id="matplotlib-基本设置"><a href="#matplotlib-基本设置" class="headerlink" title="matplotlib 基本设置"></a>matplotlib 基本设置</h2><h3 id="Matplotlib-grid-设置网格格式"><a href="#Matplotlib-grid-设置网格格式" class="headerlink" title="Matplotlib grid()设置网格格式"></a>Matplotlib grid()设置网格格式</h3><p>通过 Matplotlib axes 对象提供的 grid() 方法可以开启或者关闭画布中的网格（即是否显示网格）以及网格的主/次刻度。除此之外，grid() 函数还可以设置网格的颜色、线型以及线宽等属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid(color=<span class="string">&#x27;b&#x27;</span>, ls = <span class="string">&#x27;-.&#x27;</span>, lw = <span class="number">0.25</span>)</span><br></pre></td></tr></table></figure><p>参数含义如下：</p><ul><li>color：表示网格线的颜色；</li><li>ls：表示网格线的样式；</li><li>lw：表示网格线的宽度；</li></ul><p>网格在默认状态下是关闭的，通过调用上述函数，网格会被自动开启，如果您只是想开启不带任何样式的网格，可以通过 grid(True) 来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#fig画布；axes子图区域</span></span><br><span class="line">fig, axes = plt.subplots(<span class="number">1</span>,<span class="number">3</span>, figsize = (<span class="number">12</span>,<span class="number">4</span>))</span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line">axes[<span class="number">0</span>].plot(x, x**<span class="number">3</span>, <span class="string">&#x27;g&#x27;</span>,lw=<span class="number">2</span>)</span><br><span class="line"><span class="comment">#开启网格</span></span><br><span class="line">axes[<span class="number">0</span>].grid(<span class="literal">True</span>)</span><br><span class="line">axes[<span class="number">0</span>].set_title(<span class="string">&#x27;default grid&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>].plot(x, np.exp(x), <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="comment">#设置网格的颜色，线型，线宽</span></span><br><span class="line">axes[<span class="number">1</span>].grid(color=<span class="string">&#x27;b&#x27;</span>, ls = <span class="string">&#x27;-.&#x27;</span>, lw = <span class="number">0.25</span>)</span><br><span class="line">axes[<span class="number">1</span>].set_title(<span class="string">&#x27;custom grid&#x27;</span>)</span><br><span class="line">axes[<span class="number">2</span>].plot(x,x)</span><br><span class="line">axes[<span class="number">2</span>].set_title(<span class="string">&#x27;no grid&#x27;</span>)</span><br><span class="line">fig.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021154922.png?raw=true" alt="blog_images20221021154922.png"></p><h3 id="Matplotlib-坐标轴格式"><a href="#Matplotlib-坐标轴格式" class="headerlink" title="Matplotlib 坐标轴格式"></a>Matplotlib 坐标轴格式</h3><p>在一个函数图像中，有时自变量 x 与因变量 y 是指数对应关系，这时需要将坐标轴刻度设置为对数刻度。Matplotlib 通过 axes 对象的<code>xscale</code>或<code>yscale</code>属性来实现对坐标轴的格式设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>,<span class="number">4</span>))</span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">axes[<span class="number">0</span>].plot( x, np.exp(x))</span><br><span class="line">axes[<span class="number">0</span>].plot(x,x**<span class="number">2</span>)</span><br><span class="line">axes[<span class="number">0</span>].set_title(<span class="string">&quot;Normal scale&quot;</span>)</span><br><span class="line">axes[<span class="number">1</span>].plot (x, np.exp(x))</span><br><span class="line">axes[<span class="number">1</span>].plot(x, x**<span class="number">2</span>)</span><br><span class="line">axes[<span class="number">1</span>].set_yscale(<span class="string">&quot;log&quot;</span>)<span class="comment">#设置y轴刻度为对数关系</span></span><br><span class="line">axes[<span class="number">1</span>].set_title(<span class="string">&quot;Logarithmic scale (y)&quot;</span>)</span><br><span class="line">axes[<span class="number">0</span>].set_xlabel(<span class="string">&quot;x axis&quot;</span>)</span><br><span class="line">axes[<span class="number">0</span>].set_ylabel(<span class="string">&quot;y axis&quot;</span>)</span><br><span class="line">axes[<span class="number">0</span>].xaxis.labelpad = <span class="number">10</span></span><br><span class="line"><span class="comment">#设置x、y轴标签</span></span><br><span class="line">axes[<span class="number">1</span>].set_xlabel(<span class="string">&quot;x axis&quot;</span>)</span><br><span class="line">axes[<span class="number">1</span>].set_ylabel(<span class="string">&quot;y axis&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021155106.png?raw=true" alt="blog_images20221021155106.png"></p><h3 id="Matplotlib-坐标轴范围"><a href="#Matplotlib-坐标轴范围" class="headerlink" title="Matplotlib 坐标轴范围"></a>Matplotlib 坐标轴范围</h3><p>Matplotlib 可以根据自变量与因变量的取值范围，自动设置 x 轴与 y 轴的数值大小。当然，您也可以用自定义的方式，通过 set_xlim() 和 set_ylim() 对 x、y 轴的数值范围进行设置。当对 3D 图像进行设置的时，会增加一个 z 轴，此时使用 set_zlim() 可以对 z 轴进行设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig = plt.figure()</span><br><span class="line">a1 = fig.add_axes([<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">a1.plot(x, np.exp(x),<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">a1.set_title(<span class="string">&#x27;exp&#x27;</span>)</span><br><span class="line"><span class="comment">#设置y轴</span></span><br><span class="line">a1.set_ylim(<span class="number">0</span>,<span class="number">10000</span>)<span class="comment">#自定义y轴刻度</span></span><br><span class="line"><span class="comment">#设置x轴</span></span><br><span class="line">a1.set_xlim(<span class="number">0</span>,<span class="number">10</span>)<span class="comment">#自定义x轴刻度</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021155413.png?raw=true" alt="blog_images20221021155413.png"></p><h3 id="Matplotlib-刻度和刻度标签"><a href="#Matplotlib-刻度和刻度标签" class="headerlink" title="Matplotlib 刻度和刻度标签"></a>Matplotlib 刻度和刻度标签</h3><p>xticks() 和 yticks() 函数接受一个列表对象作为参数，列表中的元素表示对应数轴上要显示的刻度。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.set_xticks([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>])</span><br></pre></td></tr></table></figure><p>x 轴上的刻度标记，依次为 2，4，6，8，10。您也可以分别通过 set_xticklabels() 和 set_yticklabels() 函数设置与刻度线相对应的刻度标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">x = np.arange(<span class="number">0</span>, math.pi*<span class="number">2</span>, <span class="number">0.05</span>)</span><br><span class="line"><span class="comment">#生成画布对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment">#添加绘图区域</span></span><br><span class="line">ax = fig.add_axes([<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.8</span>, <span class="number">0.8</span>])</span><br><span class="line">y = np.sin(x)</span><br><span class="line">ax.plot(x, y)</span><br><span class="line"><span class="comment">#设置x轴标签</span></span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;angle&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;sine&#x27;</span>)</span><br><span class="line">ax.set_xticks([<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>])</span><br><span class="line"><span class="comment">#设置x轴刻度标签</span></span><br><span class="line">ax.set_xticklabels([<span class="string">&#x27;zero&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;four&#x27;</span>,<span class="string">&#x27;six&#x27;</span>])</span><br><span class="line"><span class="comment">#设置y轴刻度</span></span><br><span class="line">ax.set_yticks([-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021155514.png?raw=true" alt="blog_images20221021155514.png"></p><h3 id="matplotlib-增加图例"><a href="#matplotlib-增加图例" class="headerlink" title="matplotlib 增加图例"></a>matplotlib 增加图例</h3><p>直接看效果图</p><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021144413.png?raw=true" alt="blog_images20221021144413.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.legend(loc=<span class="string">&quot;upper left&quot;</span>)</span><br></pre></td></tr></table></figure><p>plt.legend(loc=”upper left”) 左上角的周活</p><ul><li>best （自动找一个最好的位置，但有时不符合我们的预期）</li><li>upper right（右上角）</li><li>upper left （左上角）</li><li>lower left （左下角）</li><li>lower right （右下角）</li><li>right （右，和 center right 位置一样）</li><li>center left （中间偏左）</li><li>center right （中间偏右）</li><li>lower center（中间偏下）</li><li>upper center（中间偏上）</li><li>center（正中间）</li></ul><h2 id="matplotlib2D-绘图"><a href="#matplotlib2D-绘图" class="headerlink" title="matplotlib2D 绘图"></a>matplotlib2D 绘图</h2><h3 id="线图"><a href="#线图" class="headerlink" title="线图"></a>线图</h3><p>plt.plot()函数可以画各种线图，比如曲线图,折线图和直线图，具体根据你传入的点进行绘画</p><p>函数原型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot(self, xs, ys, zs, zdir=<span class="string">&#x27;z&#x27;</span>, **kwargs)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>xs：x 轴坐标</li><li>ys：y 轴坐标</li><li>zs：z 轴坐标我们画 2D 图一般用不到</li><li>zdir：方向（默认值就好不要动）</li><li>**kwargs： kwargs 其他参数被转发到<code>matplotlib.axes.Axes.plot</code></li></ul><h4 id="画折线图："><a href="#画折线图：" class="headerlink" title="画折线图："></a>画折线图：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> @Time : 2022/10/21 13:17</span></span><br><span class="line"><span class="string"> @Author : liao.sc</span></span><br><span class="line"><span class="string"> @File : demo10</span></span><br><span class="line"><span class="string"> @Contact : 446773160@qq.com</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 解决中文问题</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>] <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span> <span class="comment"># 用来正常显示负号</span></span><br><span class="line"><span class="comment"># 准备绘制数据</span></span><br><span class="line">x = [<span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tues&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thur&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>]</span><br><span class="line">y = [<span class="number">20</span>, <span class="number">40</span>, <span class="number">35</span>, <span class="number">55</span>, <span class="number">42</span>, <span class="number">80</span>, <span class="number">50</span>]</span><br><span class="line"><span class="comment"># &quot;g&quot; 表示红色，marksize用来设置&#x27;D&#x27;菱形的大小</span></span><br><span class="line">plt.plot(x, y, <span class="string">&quot;g&quot;</span>, marker=<span class="string">&#x27;D&#x27;</span>, markersize=<span class="number">5</span>, label=<span class="string">&quot;周活&quot;</span>,color=<span class="string">&quot;blue&quot;</span>)</span><br><span class="line"><span class="comment"># 绘制坐标轴标签</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;登录时间&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;用户活跃度&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;山不让尘,川不辞盈博客活跃度&quot;</span>)</span><br><span class="line"><span class="comment"># 显示图例 左上角显示</span></span><br><span class="line">plt.legend(loc=<span class="string">&quot;upper left&quot;</span>)</span><br><span class="line"><span class="comment"># 调用 text()在图像上绘制注释文本</span></span><br><span class="line"><span class="comment"># x1、y1表示文本所处坐标位置，ha参数控制水平对齐方式, va控制垂直对齐方式，str(y1)表示要绘制的文本</span></span><br><span class="line"><span class="keyword">for</span> x1, y1 <span class="keyword">in</span> <span class="built_in">zip</span>(x, y):</span><br><span class="line">    plt.text(x1, y1, <span class="built_in">str</span>(y1), ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021140426.png?raw=true" alt="blog_images20221021140426.png"></p><h4 id="曲线图"><a href="#曲线图" class="headerlink" title="曲线图"></a>曲线图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> @Time : 2022/10/21 13:17</span></span><br><span class="line"><span class="string"> @Author : liao.sc</span></span><br><span class="line"><span class="string"> @File : demo10</span></span><br><span class="line"><span class="string"> @Contact : 446773160@qq.com</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span>  np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, np.pi)</span><br><span class="line">y_sin = np.sin(x)</span><br><span class="line">y_cos = np.cos(x)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">221</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">222</span>)</span><br><span class="line">ax3 = fig.add_subplot(<span class="number">224</span>)</span><br><span class="line">ax1.plot(x, y_sin)</span><br><span class="line">ax2.plot(x, y_sin, <span class="string">&#x27;go--&#x27;</span>, linewidth=<span class="number">2</span>, markersize=<span class="number">12</span>)</span><br><span class="line">ax3.plot(x, y_cos, color=<span class="string">&#x27;red&#x27;</span>, marker=<span class="string">&#x27;+&#x27;</span>, linestyle=<span class="string">&#x27;dashed&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021141045.png?raw=true" alt="blog_images20221021141045.png"></p><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><p>散点图用于在水平轴和垂直轴上绘制数据点，它表示了因变量随自变量变化的趋势。通俗地讲，它反映的是一个变量受另一个变量的影响程度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> @Time : 2022/10/21 13:17</span></span><br><span class="line"><span class="string"> @Author : liao.sc</span></span><br><span class="line"><span class="string"> @File : demo10</span></span><br><span class="line"><span class="string"> @Contact : 446773160@qq.com</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">girls_grades = [<span class="number">89</span>, <span class="number">90</span>, <span class="number">70</span>, <span class="number">89</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="number">34</span>]</span><br><span class="line">boys_grades = [<span class="number">30</span>, <span class="number">29</span>, <span class="number">49</span>, <span class="number">48</span>, <span class="number">100</span>, <span class="number">48</span>, <span class="number">38</span>, <span class="number">45</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">grades_range = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>]</span><br><span class="line">fig=plt.figure()</span><br><span class="line"><span class="comment">#添加绘图区域</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">ax.scatter(grades_range, girls_grades, color=<span class="string">&#x27;r&#x27;</span>,label=<span class="string">&quot;girls&quot;</span>)</span><br><span class="line">ax.scatter(grades_range, boys_grades, color=<span class="string">&#x27;b&#x27;</span>,label=<span class="string">&quot;boys&quot;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Grades Range&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Grades Scored&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;scatter plot&#x27;</span>)</span><br><span class="line"><span class="comment">#添加图例</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021142150.png?raw=true" alt="blog_images20221021142150.png"></p><h3 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h3><p>柱状图是一种用矩形柱来表示数据分类的图表，柱状图可以垂直绘制，也可以水平绘制，它的高度与其所表示的数值成正比关系。柱状图显示了不同类别之间的比较关系，图表的水平轴 X 指定被比较的类别，垂直轴 Y 则表示具体的类别值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.bar(x, height, width, bottom, align)</span><br></pre></td></tr></table></figure><table><thead><tr><th>x</th><th>一个标量序列，代表柱状图的 x 坐标，默认 x 取值是每个柱状图所在的中点位置，或者也可以是柱状图左侧边缘位置。</th></tr></thead><tbody><tr><td>height</td><td>一个标量或者是标量序列，代表柱状图的高度。</td></tr><tr><td>width</td><td>可选参数，标量或类数组，柱状图的默认宽度值为 0.8。</td></tr><tr><td>bottom</td><td>可选参数，标量或类数组，柱状图的 y 坐标默认为 None。</td></tr><tr><td>algin</td><td>有两个可选项 {“center”,”edge”}，默认为 ‘center’，该参数决定 x 值位于柱状图的位置。</td></tr></tbody></table><p>下面是一个关于 Matplotlib 柱状图的简单示例。它用来显示了不同编程语言的学习人数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#创建图形对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment">#添加子图区域，参数值表示[left, bottom, width, height ]</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"><span class="comment">#准备数据</span></span><br><span class="line">langs = [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>]</span><br><span class="line">students = [<span class="number">23</span>,<span class="number">17</span>,<span class="number">35</span>,<span class="number">29</span>,<span class="number">12</span>]</span><br><span class="line"><span class="comment">#绘制柱状图</span></span><br><span class="line">ax.bar(langs,students)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021155642.png?raw=true" alt="blog_images20221021155642.png"></p><p>通过调整柱状图的宽度，可以实现在同一 x 轴位置绘制多个柱状图。您可以将它们设置成不同的颜色，从而使它们更容易区分。下面示例描述了某工程学院过去四年中，三个专业录取的统招学生数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">data = [[<span class="number">30</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">20</span>], [<span class="number">40</span>, <span class="number">23</span>, <span class="number">51</span>, <span class="number">17</span>], [<span class="number">35</span>, <span class="number">22</span>, <span class="number">45</span>, <span class="number">19</span>]]</span><br><span class="line">X = np.arange(<span class="number">4</span>)</span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment"># 添加子图区域</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"><span class="comment"># 绘制柱状图</span></span><br><span class="line">ax.bar(X + <span class="number">0.00</span>, data[<span class="number">0</span>], color=<span class="string">&#x27;b&#x27;</span>, width=<span class="number">0.25</span>)</span><br><span class="line">ax.bar(X + <span class="number">0.25</span>, data[<span class="number">1</span>], color=<span class="string">&#x27;g&#x27;</span>, width=<span class="number">0.25</span>)</span><br><span class="line">ax.bar(X + <span class="number">0.50</span>, data[<span class="number">2</span>], color=<span class="string">&#x27;r&#x27;</span>, width=<span class="number">0.25</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021155841.png?raw=true" alt="blog_images20221021155841.png"></p><p>柱状图除了上述使用方法外，还有另外一种堆叠柱状图。所谓堆叠柱状图就是将不同数组别的柱状图堆叠在一起，堆叠后的柱状图高度显示了两者相加的结果值。</p><p>bar() 函数提供了一个可选参数<code>bottom</code>，该参数可以指定柱状图开始堆叠的起始值，一般从底部柱状图的最大值开始，依次类推。</p><p>下面是一个不同国家参加奥林匹克运动会所得奖牌（金银铜）的柱状堆叠图示例，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">countries = [<span class="string">&#x27;USA&#x27;</span>, <span class="string">&#x27;India&#x27;</span>, <span class="string">&#x27;China&#x27;</span>, <span class="string">&#x27;Russia&#x27;</span>, <span class="string">&#x27;Germany&#x27;</span>]</span><br><span class="line">bronzes = np.array([<span class="number">38</span>, <span class="number">17</span>, <span class="number">26</span>, <span class="number">19</span>, <span class="number">15</span>])</span><br><span class="line">silvers = np.array([<span class="number">37</span>, <span class="number">23</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">10</span>])</span><br><span class="line">golds = np.array([<span class="number">46</span>, <span class="number">27</span>, <span class="number">26</span>, <span class="number">19</span>, <span class="number">17</span>])</span><br><span class="line"><span class="comment"># 此处的 _ 下划线表示将循环取到的值放弃，只得到[0,1,2,3,4]</span></span><br><span class="line">ind = [x <span class="keyword">for</span> x, _ <span class="keyword">in</span> <span class="built_in">enumerate</span>(countries)]</span><br><span class="line"><span class="comment">#绘制堆叠图</span></span><br><span class="line">plt.bar(ind, golds, width=<span class="number">0.5</span>, label=<span class="string">&#x27;golds&#x27;</span>, color=<span class="string">&#x27;gold&#x27;</span>, bottom=silvers+bronzes)</span><br><span class="line">plt.bar(ind, silvers, width=<span class="number">0.5</span>, label=<span class="string">&#x27;silvers&#x27;</span>, color=<span class="string">&#x27;silver&#x27;</span>, bottom=bronzes)</span><br><span class="line">plt.bar(ind, bronzes, width=<span class="number">0.5</span>, label=<span class="string">&#x27;bronzes&#x27;</span>, color=<span class="string">&#x27;#CD853F&#x27;</span>)</span><br><span class="line"><span class="comment">#设置坐标轴</span></span><br><span class="line">plt.xticks(ind, countries)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Medals&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Countries&quot;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&quot;upper right&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;2019 Olympics Top Scorers&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021155951.png?raw=true" alt="blog_images20221021155951.png"></p><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><p>直方图（Histogram），又称质量分布图，它是一种条形图的一种，由一系列高度不等的纵向线段来表示数据分布的情况。 直方图的横轴表示数据类型，纵轴表示分布情况。</p><p><strong>首先，我们需要了解柱状图和直方图的区别。直方图用于概率分布，它显示了一组数值序列在给定的数值范围内出现的概率；而柱状图则用于展示各个类别的频数。</strong></p><p>如果想要构建直方图，必须遵循以下步骤：</p><ul><li>将整个值范围划分为一系列区间。</li><li>区间值（bin）的取值，不可遗漏数据；</li><li>计算每个区间中有多少个值。</li></ul><p>例如，我们对某工厂的员工年龄做直方图统计，首先我们要统计出每一位员工的年龄，然后设定一个 20 至 65 的数值范围，并将该数值范围细分为 4 个区间段 (20,35),(35,45),(45,55),(55,65) , 最后通过直方图的形式，展示该工厂员工在相应年龄区间的分布情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.hist()<span class="comment">#函数原型</span></span><br></pre></td></tr></table></figure><p>该函数的参数说明如下：</p><table><thead><tr><th>x</th><th>必填参数，数组或者数组序列。</th></tr></thead><tbody><tr><td>bins</td><td>可选参数，整数或者序列，bins 表示每一个间隔的边缘（起点和终点）默认会生成 10 个间隔。</td></tr><tr><td>range</td><td>指定全局间隔的下限与上限值 (min,max)，元组类型，默认值为 None。</td></tr><tr><td>density</td><td>如果为 True，返回概率密度直方图；默认为 False，返回相应区间元素的个数的直方图。</td></tr><tr><td>histtype</td><td>要绘制的直方图类型，默认值为“bar”，可选值有 barstacked(堆叠条形图)、step(未填充的阶梯图)、stepfilled(已填充的阶梯图)。</td></tr></tbody></table><p>以下示例绘制了班级学生得分情况的直方图。其中定义了四个区间（bins）分别是：0-25、26-50、51-75 和 76-100。直方图显示了相应范围的学生人数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#创建图形对象和轴域对象</span></span><br><span class="line">fig,ax = plt.subplots(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">a = np.array([<span class="number">22</span>,<span class="number">87</span>,<span class="number">5</span>,<span class="number">43</span>,<span class="number">56</span>,<span class="number">73</span>,<span class="number">55</span>,<span class="number">54</span>,<span class="number">11</span>,<span class="number">20</span>,<span class="number">51</span>,<span class="number">5</span>,<span class="number">79</span>,<span class="number">31</span>,<span class="number">27</span>])</span><br><span class="line"><span class="comment">#绘制直方图</span></span><br><span class="line">ax.hist(a, bins = [<span class="number">0</span>,<span class="number">25</span>,<span class="number">50</span>,<span class="number">75</span>,<span class="number">100</span>])</span><br><span class="line"><span class="comment">#设置坐标轴</span></span><br><span class="line">ax.set_title(<span class="string">&quot;histogram of result&quot;</span>)</span><br><span class="line">ax.set_xticks([<span class="number">0</span>,<span class="number">25</span>,<span class="number">50</span>,<span class="number">75</span>,<span class="number">100</span>])</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;marks&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;no.of students&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021160038.png?raw=true" alt="blog_images20221021160038.png"></p><h3 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h3><p>饼状图用来显示一个数据系列，具体来说，饼状图显示一个数据系列中各项目的占项目总和的百分比。</p><p>Matplotlib 提供了一个 pie() 函数，该函数可以生成数组中数据的饼状图。您可使用 x/sum(x) 来计算各个扇形区域占饼图总和的百分比。pie() 函数的参数说明如下：</p><table><thead><tr><th>X</th><th>数组序列，数组元素对应扇形区域的数量大小。</th></tr></thead><tbody><tr><td>labels</td><td>列表字符串序列，为每个扇形区域备注一个标签名字。</td></tr><tr><td>color</td><td>为每个扇形区域设置颜色，默认按照颜色周期自动设置。</td></tr><tr><td>autopct</td><td>格式化字符串”fmt%pct”，使用百分比的格式设置每个扇形 区的标签，并将其放置在扇形区内。</td></tr></tbody></table><p>以下示例：关于不同计算机语言学习人数的饼状图。autopct 参数设置为 %1.2f% ，并将各项所占总和的百分比显示在相对应的扇形区内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#添加图形对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_axes([<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#使得X/Y轴的间距相等</span></span><br><span class="line">ax.axis(<span class="string">&#x27;equal&#x27;</span>)</span><br><span class="line"><span class="comment">#准备数据</span></span><br><span class="line">langs = [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>]</span><br><span class="line">students = [<span class="number">23</span>,<span class="number">17</span>,<span class="number">35</span>,<span class="number">29</span>,<span class="number">12</span>]</span><br><span class="line"><span class="comment">#绘制饼状图</span></span><br><span class="line">ax.pie(students, labels = langs,autopct=<span class="string">&#x27;%1.2f%%&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021160156.png?raw=true" alt="blog_images20221021160156.png"></p><h3 id="等高线"><a href="#等高线" class="headerlink" title="等高线"></a>等高线</h3><p>等高线图（也称“水平图”）是一种在二维平面上显示 3D 图像的方法。等高线有时也被称为 “Z 切片”，如果您想要查看因变量 Z 与自变量 X、Y 之间的函数图像变化（即 Z=f(X,Y)），那么采用等高线图最为直观。</p><p>Matplotlib API 提供了绘制等高线（contour）与填充等高线（ contourf）的函数。这两个函数都需要三个参数，分别是 X、Y 与 Z。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#创建xlist、ylist数组</span></span><br><span class="line">xlist = np.linspace(-<span class="number">3.0</span>, <span class="number">3.0</span>, <span class="number">100</span>)</span><br><span class="line">ylist = np.linspace(-<span class="number">3.0</span>, <span class="number">3.0</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment">#将上述数据变成网格数据形式</span></span><br><span class="line">X, Y = np.meshgrid(xlist, ylist)</span><br><span class="line"><span class="comment">#定义Z与X,Y之间的关系</span></span><br><span class="line">Z = np.sqrt(X**<span class="number">2</span> + Y**<span class="number">2</span>)</span><br><span class="line">fig,ax=plt.subplots(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">#填充等高线颜色</span></span><br><span class="line">cp = ax.contourf(X, Y, Z)</span><br><span class="line">fig.colorbar(cp) <span class="comment"># 给图像添加颜色柱</span></span><br><span class="line">ax.set_title(<span class="string">&#x27;Filled Contours Plot&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;x (cm)&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;y (cm)&#x27;</span>)</span><br><span class="line"><span class="comment">#画等高线</span></span><br><span class="line">plt.contour(X,Y,Z)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021160236.png?raw=true" alt="blog_images20221021160236.png"></p><h3 id="振动图"><a href="#振动图" class="headerlink" title="振动图"></a>振动图</h3><p>振动图也叫磁场图，或量场图，其图像的表现形式是一组矢量箭头，其数学含义是在点 (x,y) 处具有分向量 (u,v)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quiver(x,y,u,v)</span><br></pre></td></tr></table></figure><p>上述函数表示，在指定的 (x,y) 坐标上以箭头的形式绘制向量，参数说明如下：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>一维、二维数组或者序列，表示箭头位置的 x 坐标。</td></tr><tr><td>y</td><td>一维、二维数组或者序列，表示箭头位置的 y 坐标。</td></tr><tr><td>u</td><td>一维、二维数组或者序列，表示箭头向量的 x 分量。</td></tr><tr><td>v</td><td>一维、二维数组或者序列，表示箭头向量的 y 分量。</td></tr><tr><td>c</td><td>一维、二维数组或者序列，表示箭头颜色。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x,y = np.meshgrid(np.arange(-<span class="number">2</span>, <span class="number">2</span>, <span class="number">0.2</span>), np.arange(-<span class="number">2</span>, <span class="number">2</span>, <span class="number">0.25</span>))</span><br><span class="line">z = x*np.exp(-x**<span class="number">2</span> - y**<span class="number">2</span>)</span><br><span class="line"><span class="comment">#计算数组中元素的梯度</span></span><br><span class="line">v, u = np.gradient(z, <span class="number">0.2</span>, <span class="number">0.2</span>)</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">q = ax.quiver(x,y,u,v)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021160326.png?raw=true" alt="blog_images20221021160326.png"></p><h3 id="泡泡图"><a href="#泡泡图" class="headerlink" title="泡泡图"></a>泡泡图</h3><p>散点图的一种，加入了第三个值 <code>s</code> 可以理解成普通散点，画的是二维，泡泡图体现了 Z 的大小，如下例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">19680801</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">50</span></span><br><span class="line">x = np.random.rand(N)</span><br><span class="line">y = np.random.rand(N)</span><br><span class="line">colors = np.random.rand(N)</span><br><span class="line">area = (<span class="number">30</span> * np.random.rand(N))**<span class="number">2</span>  <span class="comment"># 0 to 15 point radii</span></span><br><span class="line"></span><br><span class="line">plt.scatter(x, y, s=area, c=colors, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021144108.png?raw=true" alt="blog_images20221021144108.png"></p><h1 id="matplotlib-绘制-3D-图"><a href="#matplotlib-绘制-3D-图" class="headerlink" title="matplotlib 绘制 3D 图"></a>matplotlib 绘制 3D 图</h1><p>最初开发的 Matplotlib，仅支持绘制 2d 图形，后来随着版本的不断更新， Matplotlib 在二维绘图的基础上，构建了一部分较为实用的 3D 绘图程序包，比如 <code>mpl_toolkits.mplot3d</code>，通过调用该程序包一些接口可以绘制 3D 散点图、3D 曲面图、3D 线框图等</p><p>首先创建一个三维绘图区域， plt.axes() 函数提供了一个参数<code>projection</code>，将其参数值设置为 “3d”。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入三维工具包mplot3d</span></span><br><span class="line"><span class="keyword">from</span> mpl_toolkits <span class="keyword">import</span> mplot3d</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment">#创建3d绘图区域</span></span><br><span class="line">ax = plt.axes(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="3D-散点图"><a href="#3D-散点图" class="headerlink" title="3D 散点图"></a>3D 散点图</h2><p>通过 ax.scatter3D() 函数可以绘制 3D 散点图，示例代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits <span class="keyword">import</span> mplot3d</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment">#创建绘图区域</span></span><br><span class="line">ax = plt.axes(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"><span class="comment">#构建xyz</span></span><br><span class="line">z = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">x = z * np.sin(<span class="number">20</span> * z)</span><br><span class="line">y = z * np.cos(<span class="number">20</span> * z)</span><br><span class="line">c = x + y</span><br><span class="line">ax.scatter3D(x, y, z, c=c)</span><br><span class="line">ax.set_title(<span class="string">&#x27;3d Scatter plot&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021160440.png?raw=true" alt="blog_images20221021160440.png"></p><h2 id="3D-等高线图"><a href="#3D-等高线图" class="headerlink" title="3D 等高线图"></a>3D 等高线图</h2><p>ax.contour3D() 可以用来创建三维等高线图，该函数要求输入数据均采用二维网格式的矩阵坐标。同时，它可以在每个网格点<code>(x,y)</code>处计算出一个 z 值。</p><p>以下示例展示了如何绘制三维正弦等高线图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits <span class="keyword">import</span> mplot3d</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y</span>):</span><br><span class="line">   <span class="keyword">return</span> np.sin(np.sqrt(x ** <span class="number">2</span> + y ** <span class="number">2</span>))</span><br><span class="line"><span class="comment">#构建x、y数据</span></span><br><span class="line">x = np.linspace(-<span class="number">6</span>, <span class="number">6</span>, <span class="number">30</span>)</span><br><span class="line">y = np.linspace(-<span class="number">6</span>, <span class="number">6</span>, <span class="number">30</span>)</span><br><span class="line"><span class="comment">#将数据网格化处理</span></span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line">Z = f(X, Y)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = plt.axes(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"><span class="comment">#50表示在z轴方向等高线的高度层级，binary颜色从白色变成黑色</span></span><br><span class="line">ax.contour3D(X, Y, Z, <span class="number">50</span>, cmap=<span class="string">&#x27;binary&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;3D contour&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021160531.png?raw=true" alt="blog_images20221021160531.png"></p><h2 id="3D-线框图"><a href="#3D-线框图" class="headerlink" title="3D 线框图"></a>3D 线框图</h2><p>线框图同样要采用二维网格形式的数据，与绘制等高线图类似。</p><p>线框图可以将数据投影到指定的三维表面上，并输出可视化程度较高的三维效果图。通过 plot_wireframe() 能够绘制 3D 线框图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits <span class="keyword">import</span> mplot3d</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#要绘制函数图像</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y</span>):</span><br><span class="line">   <span class="keyword">return</span> np.sin(np.sqrt(x ** <span class="number">2</span> + y ** <span class="number">2</span>))</span><br><span class="line"><span class="comment">#准备x,y数据</span></span><br><span class="line">x = np.linspace(-<span class="number">6</span>, <span class="number">6</span>, <span class="number">30</span>)</span><br><span class="line">y = np.linspace(-<span class="number">6</span>, <span class="number">6</span>, <span class="number">30</span>)</span><br><span class="line"><span class="comment">#生成x、y网格化数据</span></span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line"><span class="comment">#准备z值</span></span><br><span class="line">Z = f(X, Y)</span><br><span class="line"><span class="comment">#绘制图像</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = plt.axes(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"><span class="comment">#调用绘制线框图的函数plot_wireframe()</span></span><br><span class="line">ax.plot_wireframe(X, Y, Z, color=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;wireframe&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021160616.png?raw=true" alt="blog_images20221021160616.png"></p><h2 id="3D-曲面图"><a href="#3D-曲面图" class="headerlink" title="3D 曲面图"></a>3D 曲面图</h2><p>曲面图表示一个指定的因变量<code>y</code>与两个自变量<code>x</code>和<code>z</code>之间的函数关系。</p><p>3D 曲面图是一个三维图形，它非常类似于线框图。不同之处在于，线框图的每个面都由多边形填充而成。Matplotlib 提供的 plot_surface() 函数可以绘制 3D 曲面图，该函数需要接受三个参数值 x，y 和 z 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits <span class="keyword">import</span> mplot3d</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#求向量积(outer()方法又称外积)</span></span><br><span class="line">x = np.outer(np.linspace(-<span class="number">2</span>, <span class="number">2</span>, <span class="number">30</span>), np.ones(<span class="number">30</span>))</span><br><span class="line"><span class="comment">#矩阵转置</span></span><br><span class="line">y = x.copy().T</span><br><span class="line"><span class="comment">#数据z</span></span><br><span class="line">z = np.cos(x ** <span class="number">2</span> + y ** <span class="number">2</span>)</span><br><span class="line"><span class="comment">#绘制曲面图</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = plt.axes(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"><span class="comment">#调用plot_surface()函数</span></span><br><span class="line">ax.plot_surface(x, y, z,cmap=<span class="string">&#x27;viridis&#x27;</span>, edgecolor=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;Surface plot&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021160711.png?raw=true" alt="blog_images20221021160711.png"></p>]]></content>
    
    
    <summary type="html">数据可视化</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>数据预处理</title>
    <link href="http://example.com/2022/10/21/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2022/10/21/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</id>
    <published>2022-10-21T07:00:00.000Z</published>
    <updated>2022-11-22T08:31:43.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据预处理："><a href="#数据预处理：" class="headerlink" title="数据预处理："></a>数据预处理：</h1><p><strong>前提：本文通过 python 语言实现预处理和算法功能，如果对 python 语法不熟悉请先去学习一下 python 语法以帮助之后的学习。</strong></p><h2 id="常用终端命令："><a href="#常用终端命令：" class="headerlink" title="常用终端命令："></a>常用终端命令：</h2><h3 id="conda-命令"><a href="#conda-命令" class="headerlink" title="conda 命令"></a>conda 命令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">conda -v #查看当前conda版本</span><br><span class="line">conda --<span class="built_in">help</span> #通过命令行获取帮助 缩写为 conda -h</span><br><span class="line">   #例如 conda install -h 查看install如何使用</span><br><span class="line">conda info --base #–base：查看基环境所在路径。</span><br><span class="line">conda info -e #列出当前所有的 conda 环境。</span><br><span class="line">conda info --unsafe-channels #查看令牌公开的频道</span><br><span class="line">conda create -n my_env #创建一个 conda 环境 环境名称为my_env</span><br><span class="line">conda activate my_env  #创建完成后，我们使用命令进入该环境。使用 conda list 命令来查看该环境下都安装了哪些包。</span><br><span class="line">conda deactivate #退出环境</span><br><span class="line">conda create -n new_env --clone original_env #克隆new_env环境到new_env环境</span><br><span class="line">conda create -n new_env --clone G:\anaconda3\envs\original_env #根据地址镜像克隆</span><br><span class="line">conda install 包名#conda install numpy</span><br><span class="line">#conda install -n my_env python=<span class="number">3</span>.<span class="number">9</span>.<span class="number">7</span> # 根据名称</span><br><span class="line">#conda install -p G:\anaconda3\envs\my_env python=<span class="number">3</span>.<span class="number">9</span>.<span class="number">7</span> # 根据地址</span><br><span class="line">conda remove -n my_env numpy #移除 my_env 下的 numpy</span><br><span class="line">conda remove -n my_env --all #移除 my_env 下的所有包</span><br><span class="line">#需要注意的是，conda没有提供重命名环境的命令,我们只能先克隆一份原来的环境，然后再删除原来的环境(例如将环境 a 重命名成 b)</span><br><span class="line">conda create -n b --clone a</span><br><span class="line">conda remove -n a --all</span><br><span class="line">#conda uninstall是 conda remove的别名，我们也可以使用 conda uninstall来移除包，方法是相同的。</span><br><span class="line">conda list #列出当前环境下的所有包</span><br><span class="line">conda list -n my_env #列出my_env环境下的所有包</span><br><span class="line">conda search -c conda-forge numpy#指定在conda-forge中搜索numpy</span><br><span class="line">conda update -n my_env numpy scipy #升级my_env下的numpy和scipy</span><br><span class="line">conda update -n my_env --all#更新 my_env中的所有包</span><br><span class="line">conda update conda #更新conda本身</span><br></pre></td></tr></table></figure><h3 id="pip-命令"><a href="#pip-命令" class="headerlink" title="pip 命令"></a>pip 命令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">python -m ensurepip #安装pip</span><br><span class="line">python -m pip install -U pip#更新pip</span><br><span class="line">python -m pip install pip==<span class="number">20</span>.<span class="number">2</span>.<span class="number">4</span> #安装指定版本的pip</span><br><span class="line">pip install [package] #安装包</span><br><span class="line">pip install [package==version] #安装指定版本的包</span><br><span class="line">pip install --upgrade [package]#升级包 缩写：pip install -U [package]</span><br><span class="line">pip uninstall [package] #卸载包</span><br><span class="line">pip install [package] -i [source]#指定单次安装源</span><br><span class="line">pip install [-U] -r requirements.txt#安装requirements.txt文件中的所有包</span><br><span class="line">pip freeze &gt; requirements.txt#将包导出requirements.txt</span><br><span class="line">pip --version##查看pip版本 缩写：pip -V</span><br><span class="line">pip --<span class="built_in">help</span> #获取帮助 缩写：pip -h</span><br><span class="line">pip search [package] #搜索包</span><br><span class="line">pip show [-f] [package]#查看指定包的详细信息，包含版本号</span><br><span class="line">#列出已安装的包及其版本号</span><br><span class="line">pip list</span><br><span class="line">pip freeze</span><br><span class="line">pip list -o #查看可升级的包</span><br></pre></td></tr></table></figure><h2 id="镜像源配置："><a href="#镜像源配置：" class="headerlink" title="镜像源配置："></a>镜像源配置：</h2><p>国内镜像源：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">阿里云镜像:</span><br><span class="line">https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">百度镜像:</span><br><span class="line">https://mirror.baidu.com/pypi/simple/</span><br><span class="line">清华镜像:</span><br><span class="line">https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">中科大镜像</span><br><span class="line">https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">豆瓣镜像:</span><br><span class="line">http://pypi.douban.com/simple/</span><br><span class="line">搜狐镜像:</span><br><span class="line">http://mirrors.sohu.com/Python/</span><br><span class="line">华中科大镜像:</span><br><span class="line">https://pypi.hustunique.com/</span><br><span class="line">山东理工大学镜像:</span><br><span class="line">https://pypi.hustunique.com/</span><br></pre></td></tr></table></figure><p>下载时直接指定临时镜像</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> pip install numpy -i 镜像源</span><br><span class="line"># 例如：pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure><p><strong>推荐配置永久镜像这样以后每次下载包我们都不需要加镜像地址</strong></p><p><strong>配置 conda 镜像源</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#这里我们选择清华的Tuna镜像源,有时候有的镜像会挂掉不要怕可以换一个镜像</span><br><span class="line">#打开<span class="built_in">cmd</span>输入以下指令</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure><p>配置完成后在 cmd 输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/09/11/ndIbUx.png" alt="img"></p><p>可以看到 channel URLs 已经配置好镜像源</p><p><strong>配置 pip 镜像源</strong></p><p>命令行配置 pip</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/  配置阿里云镜像</span><br><span class="line">pip config <span class="built_in">set</span> install.trusted-host mirrors.aliyun.com 配置信任主机镜像</span><br><span class="line">大家可以根据自己喜欢的镜像地址进行配置</span><br></pre></td></tr></table></figure><p>文档更换 pip 源</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Windows环境，在C:\user\username\pip\pip.ini（自行创建）中加入：</span><br><span class="line">[global]</span><br><span class="line">index-url=https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=pypi.tuna.tsinghua.edu.cn</span><br><span class="line">disable-pip-version-check = true</span><br><span class="line">timeout = <span class="number">6000</span></span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Linux环境</span><br><span class="line"><span class="built_in">cd</span> ~/</span><br><span class="line"><span class="built_in">mkdir</span> .pip</span><br><span class="line"><span class="built_in">cd</span> .pip</span><br><span class="line">sudo vim pip.conf</span><br><span class="line"></span><br><span class="line"># 加入如下内容（其实就是指定tuna源）</span><br><span class="line">[global]</span><br><span class="line">index-url=https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=pypi.tuna.tsinghua.edu.cn</span><br><span class="line">disable-pip-version-check = true</span><br><span class="line">timeout = <span class="number">6000</span></span><br></pre></td></tr></table></figure><h2 id="python-数据处理包——numpy"><a href="#python-数据处理包——numpy" class="headerlink" title="python 数据处理包——numpy"></a>python 数据处理包——numpy</h2><h3 id="numpy-介绍"><a href="#numpy-介绍" class="headerlink" title="numpy 介绍"></a>numpy 介绍</h3><p>NumPy 是 Python 科学计算的基础软件包，提供多了维数组对象，多种派生对象（掩码数组、矩阵等）以及用于快速操作数组的函数及 API，它包括数学、逻辑、数组形状变换、排序、选择、I/O 、离散傅立叶变换、基本线性代数、基本统计运算、随机模拟等</p><p><strong>numpy 模块介绍：</strong></p><table><thead><tr><th>numpy.core</th><th>核心子模块</th></tr></thead><tbody><tr><td>numpy.lib</td><td>函数子模块</td></tr><tr><td>numpy.random</td><td>随机抽样子模块</td></tr><tr><td>numpy.ma</td><td>掩码数组子模块，用于处理包含无效或丢失的数据的数组</td></tr><tr><td>numpy.linalg</td><td>线性代数子模块</td></tr><tr><td>numpy.fft</td><td>离散傅里叶变换子模块</td></tr><tr><td>numpy.math</td><td>由 C 标准定义的数学函数子模块</td></tr><tr><td>numpy.emath</td><td>具有自动域的数学函数子模块</td></tr><tr><td>numpy.rec</td><td>记录数组子模块，数组元素是多个不同类型的数据的组合，类似结构体</td></tr><tr><td>numpy.matrixlib</td><td>矩阵类和函数子模块</td></tr><tr><td>numpy.ctypeslib</td><td>ctypes 外部函数接口子模块</td></tr><tr><td>numpy.polynomial</td><td>多项式子模块</td></tr><tr><td>numpy.char</td><td>向量化字符串操作子模块</td></tr><tr><td>numpy.testing</td><td>测试支持子模块</td></tr></tbody></table><p><strong>维、秩、轴</strong></p><p>维，就是维度。我们说数组是几维的，就是指维度，3 维的数组，其维度数自然就是 3。维度数，有一个专用名字，叫做秩。秩这个名字感觉有些多余，不如维度数更容易理解。但是，轴（axis）的概念一定要建立起来，并且要理解，因为轴的概念很重要。简单来说，可以把数组的轴，和笛卡尔坐标系的轴对应一下。</p><p>一维数组，类比于一维空间，只有一个轴，那就是 0 轴。</p><p>二维数组，类比于二维平面，有两个轴，我们习惯表示成行、列，那么行的方向就是 0 轴，列的方向就是 1 轴。</p><p>三维数组，类比于三维空间，有三个轴，我们习惯表示成层、行、列，那么层的方向就是 0 轴，行的方向就是 1 轴，列的方向就是 2 轴。</p><p><strong>广播和矢量化</strong></p><p>在讲两个概念之前，我们先思考两个问题：</p><ol><li>整型数组各元素加 1；</li><li>求两个等长整型数组对应元素之和组成的新数组。</li></ol><p>若用 python 的列表实现的话，代码大约会这样写吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)): <span class="comment"># 遍历数组为每个元素加1</span></span><br><span class="line">        x[i] += <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>,<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = <span class="built_in">list</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(x, y): <span class="comment"># 遍历两个数组，逐个元素求和</span></span><br><span class="line">        z.append(i+j)</span><br></pre></td></tr></table></figure><p>用 NumPy 数组实现的话，代码就简洁多了，无需循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a += <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.arange(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = a + b</span><br></pre></td></tr></table></figure><p>显然，用 NumPy 数组实现起来，要比 Python 列表更简洁、更清晰。这得益于于 NumPy 的两大特性：广播和矢量化。</p><p>广播（broadcast）和矢量化（vectorization），是 NumPy 最精髓的特性，是 NumPy 的灵魂。所谓广播，就是将对数组的操作映射到每个数组元素上；矢量化可以理解为代码中没有显式的循环、索引等。NumPy 数组最重要的特性是广播和矢量化，体现在性能上，就是接近 C 语言的运行效率，体现在代码上，则有这样的特点：</p><ol><li>矢量化代码更简洁，更易于阅读</li><li>代码行越少意味着出错的几率越小</li><li>代码更接近于标准的数学符号</li><li>矢量化代码更 pythonic</li></ol><h3 id="numpy-下载"><a href="#numpy-下载" class="headerlink" title="numpy 下载"></a>numpy 下载</h3><p>1.下载 numpy</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy  #pip下载</span><br><span class="line">conda install numpy #Anconda下载</span><br></pre></td></tr></table></figure><p>备注：如果下载很慢导致超时可以配置镜像下载</p><p>2.导入 numpy 包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>NumPy 支持的数据类型主要有整型(integrate)、浮点型(float)、布尔型(bool)和复数型(complex)，每一种数据类型根据占用内存的字节数又分为多个不同的子类型。当然，NumPy 也支持自定义类型。</p><h3 id="numpy-创建数组"><a href="#numpy-创建数组" class="headerlink" title="numpy 创建数组"></a>numpy 创建数组</h3><p><strong>numpy 数组的属性</strong></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>ndarray.dtype</td><td>元素类型</td></tr><tr><td>ndarray.shape</td><td>数组结构或形状</td></tr><tr><td>ndarray.size</td><td>数组元素个数</td></tr><tr><td>ndarray.itemsize</td><td>数组元素的大小，以字节为单位</td></tr><tr><td>ndarray.ndim</td><td>数组的维度数，也叫秩</td></tr><tr><td>ndarray.flags</td><td>数组的内存信息</td></tr><tr><td>ndarray.real</td><td>元素的实部</td></tr><tr><td>ndarray.imag</td><td>元素的虚部</td></tr><tr><td>ndarray.data</td><td>元素数组的实际存储区</td></tr></tbody></table><h4 id="蛮力构造法："><a href="#蛮力构造法：" class="headerlink" title="蛮力构造法："></a>蛮力构造法：</h4><p>蛮力构造法使用 np.array() 来创建数组，其原型为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.array(<span class="built_in">object</span>, dtype=<span class="literal">None</span>, copy=<span class="literal">True</span>, order=<span class="literal">None</span>, subok=<span class="literal">False</span>, ndmin=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>蛮力构造法就是你想要什么结构，就直接用 Python 数组或元组写出来。这个方法看起来简单，但很容易出错，不适合构造体量较大的数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]) <span class="comment"># 创建2行3列数组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.dtype</span><br><span class="line">dtype(<span class="string">&#x27;int32&#x27;</span>)</span><br></pre></td></tr></table></figure><p>也可以像下面这样，在创建数组时，指定元素的数据类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]], dtype=np.uint8) <span class="comment"># 创建2行3列的单字节无符号整型数组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], dtype=uint8)</span><br></pre></td></tr></table></figure><h4 id="特殊数值法"><a href="#特殊数值法" class="headerlink" title="特殊数值法"></a>特殊数值法</h4><p>特殊值一般指 0，1，空值等。特殊数值法适合构造全 0、全 1、空数组，或者由 0、1 组成的类似单位矩阵（主对角线为 1，其余为 0）的数组。特殊数值法使用的 4 个函数原型如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numpy.zeros(shape, dtype=<span class="built_in">float</span>, order=‘C’) <span class="comment">#创建全为0的数组</span></span><br><span class="line">numpy.ones(shape, dtype=<span class="built_in">float</span>, order=‘C’)<span class="comment">#创建全为1的数组</span></span><br><span class="line">numpy.empty(shape, dtype=<span class="built_in">float</span>, order=‘C’)<span class="comment">#创建空的数组</span></span><br><span class="line">numpy.eye(N, M=<span class="literal">None</span>, k=<span class="number">0</span>, dtype=<span class="built_in">float</span>, order=<span class="string">&#x27;C’) #创建单位数组（单位矩阵）</span></span><br></pre></td></tr></table></figure><p>如果我们需要一个 3 行 4 列、初始值都是 5 的数组，该怎么做呢？填充函数 fill() 就是专门解决这个问题的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.empty((<span class="number">3</span>,<span class="number">4</span>), dtype=np.int8)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.fill(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]], dtype=int8)</span><br></pre></td></tr></table></figure><h4 id="随机数值法"><a href="#随机数值法" class="headerlink" title="随机数值法"></a>随机数值法</h4><p>和 Python 的标准模块 random 类似，NumPy 也有一个 random 子模块，功能更为强大。用随机数值法创建数组，主要就是使用 random 子模块。random 子模块方法很多，我们只介绍 3 个常用函数，其原型如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numpy.random.random(size=<span class="literal">None</span>) <span class="comment">#生成[0,1)之间的随机浮点数</span></span><br><span class="line">numpy.random.randint(low, high=<span class="literal">None</span>, size=<span class="literal">None</span>, dtype=‘l’) <span class="comment"># 生成 [low, high) 区间内的随机整数</span></span><br><span class="line">numpy.random.normal(loc=<span class="number">0.0</span>, scale=<span class="number">1.0</span>, size=<span class="literal">None</span>) <span class="comment">#normal() 生成以 loc 为均值、以 scale 为标准差的正态分布数组</span></span><br></pre></td></tr></table></figure><p>下面，我们用正态分布函数模拟生成 1000 位成年男性的身高数据（假定中国成年男性平均身高 170 厘米，标准差 4 厘米），并画出柱状图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tall = np.random.normal(<span class="number">170</span>, <span class="number">4</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bins = np.arange(<span class="number">156</span>, <span class="number">190</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.hist(tall, bins)</span><br><span class="line">(array([  <span class="number">3.</span>,   <span class="number">4.</span>,  <span class="number">15.</span>,  <span class="number">31.</span>,  <span class="number">94.</span>, <span class="number">163.</span>, <span class="number">185.</span>, <span class="number">186.</span>, <span class="number">157.</span>,  <span class="number">92.</span>,  <span class="number">43.</span>,</span><br><span class="line">        <span class="number">18.</span>,   <span class="number">6.</span>,   <span class="number">1.</span>,   <span class="number">1.</span>,   <span class="number">0.</span>]), array([<span class="number">156</span>, <span class="number">158</span>, <span class="number">160</span>, <span class="number">162</span>, <span class="number">164</span>, <span class="number">166</span>, <span class="number">168</span>, <span class="number">170</span>, <span class="number">172</span>, <span class="number">174</span>, <span class="number">176</span>, <span class="number">178</span>, <span class="number">180</span>,</span><br><span class="line">       <span class="number">182</span>, <span class="number">184</span>, <span class="number">186</span>, <span class="number">188</span>]), &lt;a <span class="built_in">list</span> of <span class="number">16</span> Patch objects&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/446773160/Picbed/blob/main/blog_images20221021151338.png?raw=true" alt="blog_images20221021151338.png"></p><h4 id="定长分割法"><a href="#定长分割法" class="headerlink" title="定长分割法"></a>定长分割法</h4><p>定长分割法最常用的函数是 arange()，非常类似于 Python 的 range() 函数，只是前面多了一个字母 a。另一个定长分割函数 linspace() 类似于 arange()，但功能更强大。两个函数的原型如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numpy.arange(start, stop, step, dtype=<span class="literal">None</span>)</span><br><span class="line">numpy.linspace(start, stop, num=<span class="number">50</span>, endpoint=<span class="literal">True</span>, retstep=<span class="literal">False</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>linspace() 函数需要 3 个参数：一个起点、一个终点，一个返回元素的个数。</p><p>linspace() 返回的元素包括起点和终点，我们可以通过 endpoint 参数选择是否包含终点。</p><h4 id="构造复杂数组"><a href="#构造复杂数组" class="headerlink" title="构造复杂数组"></a>构造复杂数组</h4><h5 id="重复构造法"><a href="#重复构造法" class="headerlink" title="重复构造法"></a>重复构造法</h5><p>重复构造法主要使用 repeat() 和 tile() 两个函数，<strong>repeat() 用来重复元素，tile() 用来重复数组。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.repeat(a,<span class="number">3</span>) <span class="comment"># 重复元素3次</span></span><br><span class="line">array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.tile(a,<span class="number">3</span>) <span class="comment"># 重复数组3次</span></span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.tile(a,(<span class="number">3</span>,<span class="number">2</span>)) <span class="comment"># 重复数组3行2列</span></span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure><p>对于多维数组 a，repeat() 还有一个默认参数 axis，tile() 也有不同表现，请仔细揣摩。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">6</span>).reshape((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.repeat(a,<span class="number">3</span>)</span><br><span class="line">array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.repeat(a,<span class="number">3</span>,axis=<span class="number">0</span>)</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.repeat(a,<span class="number">3</span>,axis=<span class="number">1</span>)</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.tile(a,<span class="number">3</span>)</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.tile(a,(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br></pre></td></tr></table></figure><h5 id="网格构造法"><a href="#网格构造法" class="headerlink" title="网格构造法"></a>网格构造法</h5><p>用数组表示经纬度网格，一般有两种方式。第一种方式，用两个一维数组表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lon = np.linspace(-<span class="number">180</span>,<span class="number">180</span>,<span class="number">37</span>) <span class="comment"># 网格精度为10°，共计37个经度点</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lat = np.linspace(-<span class="number">90</span>,<span class="number">90</span>,<span class="number">19</span>) <span class="comment"># 网格精度为10°，共计19个纬度点</span></span><br></pre></td></tr></table></figure><p>第二种方式，则是用 np.meshgrid() 生成两个二维数组，分别表示经度网格、纬度网格。np.meshgrid() 以刚才的两个一维数组 lon 和 lat 为参数，生成的网格精度也是 10°。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lons,lats = np.meshgrid(lon,lat)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lons.shape</span><br><span class="line">(<span class="number">19</span>, <span class="number">37</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lats.shape</span><br><span class="line">(<span class="number">19</span>, <span class="number">37</span>)</span><br></pre></td></tr></table></figure><p>构造网格，除了 np.meshgrid() 之外，还有一个更牛的方法，可以直接生成纬度网格和经度网格（请注意，纬度在前，经度在后）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lats, lons = np.mgrid[-<span class="number">90</span>:<span class="number">91</span>:<span class="number">5.</span>, -<span class="number">180</span>:<span class="number">181</span>:<span class="number">5.</span>] <span class="comment"># 网格精度为5°，网格shape为(37,73)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lons.shape, lats.shape</span><br><span class="line">((<span class="number">37</span>, <span class="number">73</span>), (<span class="number">37</span>, <span class="number">73</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lats, lons = np.mgrid[-<span class="number">90</span>:<span class="number">90</span>:<span class="number">37j</span>, -<span class="number">180</span>:<span class="number">180</span>:<span class="number">73j</span>] <span class="comment"># 也可以用虚实指定分割点数，网格精度同样为5°</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lons.shape, lats.shape</span><br><span class="line">((<span class="number">37</span>, <span class="number">73</span>), (<span class="number">37</span>, <span class="number">73</span>))</span><br></pre></td></tr></table></figure><h3 id="numpy-操作数组"><a href="#numpy-操作数组" class="headerlink" title="numpy 操作数组"></a>numpy 操作数组</h3><h4 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h4><p>NumPy 数组对象的内容可以通过索引或切片来访问和修改。对于一维数组的索引和切片，NumPy 数组和 Python 的列表一样灵活。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">1</span>]                            <span class="comment"># 最后一个元素</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">5</span>]                           <span class="comment"># 返回第2到第5个元素</span></span><br><span class="line">array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">7</span>:<span class="number">3</span>]                          <span class="comment"># 返回第0到第7个元素，步长为3</span></span><br><span class="line">array([<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::-<span class="number">1</span>]                          <span class="comment"># 返回逆序的数组</span></span><br><span class="line">array([<span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>对于多维数组操作，NumPy 数组比 Python 的列表更加灵活、强大。假设有一栋 2 层楼，每层楼内的房间都是 3 行 4 列，那我们可以用一个三维数组来保存每个房间的居住人数（当然，也可以是房间面积等其他数值信息）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">24</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)    <span class="comment"># 2层3行4列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>][<span class="number">2</span>][<span class="number">3</span>]                          <span class="comment"># 虽然可以这样</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]                            <span class="comment"># 但这才是规范的用法</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:,<span class="number">0</span>,<span class="number">0</span>]                            <span class="comment"># 所有楼层的第1排第1列</span></span><br><span class="line">array([ <span class="number">0</span>, <span class="number">12</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>,:,:]                            <span class="comment"># 1楼的所有房间，等价与a[0]或a[0,...]</span></span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:,:,<span class="number">1</span>:<span class="number">3</span>]                          <span class="comment"># 所有楼层所有排的第2到4列</span></span><br><span class="line">array([[[ <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">5</span>,  <span class="number">6</span>],</span><br><span class="line">        [ <span class="number">9</span>, <span class="number">10</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">13</span>, <span class="number">14</span>],</span><br><span class="line">        [<span class="number">17</span>, <span class="number">18</span>],</span><br><span class="line">        [<span class="number">21</span>, <span class="number">22</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>,:,-<span class="number">1</span>]                           <span class="comment"># 2层每一排的最后一个房间</span></span><br><span class="line">array([<span class="number">15</span>, <span class="number">19</span>, <span class="number">23</span>])</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>对多维数组切片或索引得到的结果，维度不是确定的；</li><li>切片返回的数组不是原始数据的副本，而是指向与原始数组相同的内存区域。数组切片不会复制内部数组数据，只是产生了原始数据的一个新视图。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a[<span class="number">1</span>:,<span class="number">2</span>:] <span class="comment"># 数组b是数组a的切片</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([[ <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">11</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[:,:] = <span class="number">99</span> <span class="comment"># 改变数组b的值，也会同时影响数组a</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([[<span class="number">99</span>, <span class="number">99</span>],</span><br><span class="line">       [<span class="number">99</span>, <span class="number">99</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">5</span>, <span class="number">99</span>, <span class="number">99</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">99</span>, <span class="number">99</span>]])</span><br></pre></td></tr></table></figure><h4 id="改变结构"><a href="#改变结构" class="headerlink" title="改变结构"></a>改变结构</h4><p>NumPy 数组的存储顺序和数组的视图是相互独立的，因此改变数组的维度是非常便捷的操作，这一类操作不会改变所操作的数组本身的存储顺序， resize() 除外。</p><ul><li>reshape() - 按照指定的结构（形状）返回数组的新视图，但不会改变数组</li><li>resize() - 按照指定的结构（形状）改变数组，无返回值</li><li>ravel() - 返回多维数组一维化的视图，但不会改变原数组</li><li>transpose() - 返回行变列的视图，但不会改变原数组</li><li>rollaxis() - 翻滚轴，返回新的视图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">12</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.reshape((<span class="number">3</span>，<span class="number">4</span>)) <span class="comment"># reshape()返回数组a的一个新视图，但不会改变数组a</span></span><br><span class="line">&gt;&gt;&gt;&gt; a.shape</span><br><span class="line">(<span class="number">12</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.shape</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">is</span> a</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.base <span class="keyword">is</span> a</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">a.resize([<span class="number">4</span>,<span class="number">3</span>]) <span class="comment"># resize()则真正改变了数组a的结构</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape</span><br><span class="line">(<span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.ravel() <span class="comment"># 返回多维数组一维化的视图，但不会改变原数组</span></span><br><span class="line">array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.transpose() <span class="comment"># 返回行变列的视图，但不会改变原数组</span></span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">3</span>,  <span class="number">6</span>,  <span class="number">9</span>],</span><br><span class="line">       [ <span class="number">1</span>,  <span class="number">4</span>,  <span class="number">7</span>, <span class="number">10</span>],</span><br><span class="line">       [ <span class="number">2</span>,  <span class="number">5</span>,  <span class="number">8</span>, <span class="number">11</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.T  <span class="comment"># 返回行变列的视图，等价于transpose()</span></span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">3</span>,  <span class="number">6</span>,  <span class="number">9</span>],</span><br><span class="line">       [ <span class="number">1</span>,  <span class="number">4</span>,  <span class="number">7</span>, <span class="number">10</span>],</span><br><span class="line">       [ <span class="number">2</span>,  <span class="number">5</span>,  <span class="number">8</span>, <span class="number">11</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.rollaxis(a, <span class="number">1</span>, <span class="number">0</span>) <span class="comment"># 翻滚轴，1轴变0轴</span></span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">3</span>,  <span class="number">6</span>,  <span class="number">9</span>],</span><br><span class="line">       [ <span class="number">1</span>,  <span class="number">4</span>,  <span class="number">7</span>, <span class="number">10</span>],</span><br><span class="line">       [ <span class="number">2</span>,  <span class="number">5</span>,  <span class="number">8</span>, <span class="number">11</span>]])</span><br></pre></td></tr></table></figure><h4 id="合并与拆分"><a href="#合并与拆分" class="headerlink" title="合并与拆分"></a>合并与拆分</h4><p>NumPy 数组一旦创建就不能再改变其元素数量了。如果要动态改变数组元素数量，只能通过合并或者拆分的方法，生成新的数组。对于刚刚上手 NumPy 的程序员来说，最大的困惑就是不能使用 append() 方法向数组内添加元素，甚至连 append() 方法都找不到了。其实，NumPy 仍然保留了 append() 方法，只不过这个方法不再是 NumPy 数组的方法，而是是升级到最外层的 NumPy 命名空间，并且该方法的功能不再是追加元素，而是合并数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.append([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]], [[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])<span class="comment">#append的作用不是增加元素而是合并数组</span></span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.append([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]], [[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.append([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]], [[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure><p>不过，这个 append()委实不够好用，我给大家推荐的是 stack()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.arange(<span class="number">4</span>,<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.hstack((a,b)) <span class="comment"># 水平合并</span></span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.vstack((a,b)) <span class="comment"># 垂直合并</span></span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">6</span>, <span class="number">7</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.dstack((a,b)) <span class="comment"># 深度合并</span></span><br><span class="line">array([[[<span class="number">0</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">5</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">2</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">7</span>]]])</span><br></pre></td></tr></table></figure><p>stack 函数原型为 stack(arrays, axis=0)，请注意体会下面例子中的 axis 的用法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">60</span>).reshape(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.arange(<span class="number">60</span>).reshape(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape, b.shape</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.stack((a,b), axis=<span class="number">0</span>).shape</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.stack((a,b), axis=<span class="number">1</span>).shape</span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.stack((a,b), axis=<span class="number">2</span>).shape</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.stack((a,b), axis=<span class="number">3</span>).shape</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>因为数组切片非常简单，所以数组拆分应用较少。拆分是合并的逆过程，最常用的方法是 split()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.vsplit(a, <span class="number">2</span>) <span class="comment"># 垂直方向拆分成2部分</span></span><br><span class="line">[array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]), array([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]])]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.hsplit(a, <span class="number">2</span>) <span class="comment"># 水平方向拆分成2部分</span></span><br><span class="line">[array([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>]]), array([[<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">6</span>, <span class="number">7</span>]])]</span><br></pre></td></tr></table></figure><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p>改变数组结构返回的是原元数据的一个新视图，而不是原元数据的副本。浅复制（view）和深复制（copy）则是创建原数据的副本，但二者之间也有细微差别：浅复制（view）是共享内存，深复制（copy）则是独享。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">6</span>).reshape((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.view()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">is</span> a</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.base <span class="keyword">is</span> a</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.flags.owndata</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = a.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c <span class="keyword">is</span> a</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.base <span class="keyword">is</span> a</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.flags.owndata</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>NumPy 数组排序函数有两个，一个是 sort()，一个是 argsort()。sort()返回输入数组的排序副本，argsort()返回的是数组值从小到大的索引号。从函数原型看，这两个函数的参数是完全一样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numpy.sort(a, axis=-1, kind=‘quicksort’, order=None)</span><br><span class="line">numpy.argsort(a, axis=-1, kind=‘quicksort’, order=None)</span><br></pre></td></tr></table></figure><ul><li>a - 要排序的数组</li><li>axis - 沿着它排序数组的轴，如果没有，则沿着最后的轴排序</li><li>kind - 排序方法，默认为’quicksort’（快速排序），其他选项还有 ‘mergesort’（归并排序）和 ‘heapsort’（堆排序）</li><li>order - 如果数组包含字段，则是要排序的字段</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.random.random((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">0.79658569</span>, <span class="number">0.14507096</span>, <span class="number">0.63016223</span>],</span><br><span class="line">       [<span class="number">0.24983103</span>, <span class="number">0.98368325</span>, <span class="number">0.71092079</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argsort(a) <span class="comment"># 返回行内从小到大排序的索引序号（列排序），相当于axis=1（最后的轴）</span></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>]], dtype=int64)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.sort(a) <span class="comment"># 返回行内从小到大排序的一个新数组（列排序）</span></span><br><span class="line">array([[<span class="number">0.14507096</span>, <span class="number">0.63016223</span>, <span class="number">0.79658569</span>],</span><br><span class="line">       [<span class="number">0.24983103</span>, <span class="number">0.71092079</span>, <span class="number">0.98368325</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.sort(a,axis=<span class="number">0</span>) <span class="comment"># 返回列内每一行都是从小到大排序（行排序）</span></span><br><span class="line">array([[<span class="number">0.24983103</span>, <span class="number">0.14507096</span>, <span class="number">0.63016223</span>],</span><br><span class="line">       [<span class="number">0.79658569</span>, <span class="number">0.98368325</span>, <span class="number">0.71092079</span>]])</span><br></pre></td></tr></table></figure><p>我们再看看排序字段的使用。先定义一个新的数据类型 dt：dt 类似于一个字典，有两个键值对，一个是姓名 name，一个是年龄 age，姓名长度 10 个字符，年龄是整型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt = np.dtype([(<span class="string">&#x27;name&#x27;</span>,  <span class="string">&#x27;S10&#x27;</span>),(<span class="string">&#x27;age&#x27;</span>,  <span class="built_in">int</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([(<span class="string">&quot;zhang&quot;</span>,<span class="number">21</span>),(<span class="string">&quot;wang&quot;</span>,<span class="number">25</span>),(<span class="string">&quot;li&quot;</span>,  <span class="number">17</span>),  (<span class="string">&quot;zhao&quot;</span>,<span class="number">27</span>)], dtype = dt)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.sort(a, order=<span class="string">&#x27;name&#x27;</span>) <span class="comment"># 如果指定姓名排序，结果是李王张赵</span></span><br><span class="line">array([(<span class="string">b&#x27;li&#x27;</span>, <span class="number">17</span>), (<span class="string">b&#x27;wang&#x27;</span>, <span class="number">25</span>), (<span class="string">b&#x27;zhang&#x27;</span>, <span class="number">21</span>), (<span class="string">b&#x27;zhao&#x27;</span>, <span class="number">27</span>)],</span><br><span class="line">      dtype=[(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;S10&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;&lt;i4&#x27;</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.sort(a, order=<span class="string">&#x27;age&#x27;</span>) <span class="comment"># 如果指定年龄排序，结果则是李张王赵</span></span><br><span class="line">array([(<span class="string">b&#x27;li&#x27;</span>, <span class="number">17</span>), (<span class="string">b&#x27;zhang&#x27;</span>, <span class="number">21</span>), (<span class="string">b&#x27;wang&#x27;</span>, <span class="number">25</span>), (<span class="string">b&#x27;zhao&#x27;</span>, <span class="number">27</span>)],</span><br><span class="line">      dtype=[(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;S10&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;&lt;i4&#x27;</span>)])</span><br></pre></td></tr></table></figure><h4 id="查找和筛选"><a href="#查找和筛选" class="headerlink" title="查找和筛选"></a>查找和筛选</h4><p>这里，我们约定查找是返回符合条件的元素的索引号，筛选是返回符合条件的元素。查找和筛选，是 NumPy 数组最令人心动的功能，也是相对比较烧脑的操作。</p><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><p>下面的代码演示了返回数组中最大值和最小值的索引（对于多维数组，这个索引是数组转成一维之后的索引）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.random.random((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">0.47881615</span>, <span class="number">0.55682904</span>, <span class="number">0.29173085</span>],</span><br><span class="line">       [<span class="number">0.41107703</span>, <span class="number">0.91467593</span>, <span class="number">0.88852535</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argmax(a)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argmin(a)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>下面的代码演示了返回数组中非零元素的索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, (<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.nonzero(a)</span><br><span class="line">(array([<span class="number">1</span>, <span class="number">1</span>], dtype=int64), array([<span class="number">1</span>, <span class="number">2</span>], dtype=int64))</span><br></pre></td></tr></table></figure><p>numpy.where() 用于返回数组中满足给定条件的元素的索引，还可以用于替换符合条件的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.where(condition[, x, y])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.where(a &lt; <span class="number">5</span>)</span><br><span class="line">(array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], dtype=int64),)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = a.reshape((<span class="number">2</span>, -<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.where(a &lt; <span class="number">5</span>)</span><br><span class="line">(array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], dtype=int64), array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], dtype=int64))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.where(a &lt; <span class="number">5</span>, a, <span class="number">10</span>*a) <span class="comment"># 满足条件的元素不变，其他元素乘以10</span></span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],</span><br><span class="line">       [<span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>]])</span><br></pre></td></tr></table></figure><h5 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h5><p>筛选有 3 种方式，一是使用 np.where()返回的 python 元组，二是使用逻辑表达式返回的布尔型数组，三是使用整型数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.random.random((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">0.41551063</span>, <span class="number">0.38984904</span>, <span class="number">0.01204226</span>, <span class="number">0.72323978</span>],</span><br><span class="line">       [<span class="number">0.82425869</span>, <span class="number">0.64216573</span>, <span class="number">0.41475495</span>, <span class="number">0.21351508</span>],</span><br><span class="line">       [<span class="number">0.30104819</span>, <span class="number">0.52046164</span>, <span class="number">0.58286043</span>, <span class="number">0.66749564</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[np.where(a&gt;<span class="number">0.5</span>)] <span class="comment"># 返回大于0.5的元素（使用np.where()返回的python元组）</span></span><br><span class="line">array([<span class="number">0.72323978</span>, <span class="number">0.82425869</span>, <span class="number">0.64216573</span>, <span class="number">0.52046164</span>, <span class="number">0.58286043</span>,</span><br><span class="line">       <span class="number">0.66749564</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[(a&gt;<span class="number">0.3</span>)&amp;(a&lt;<span class="number">0.7</span>)] <span class="comment"># 返回大于0.3且小于0.7的元素（使用逻辑表达式返回的布尔型数组）</span></span><br><span class="line">array([<span class="number">0.41551063</span>, <span class="number">0.38984904</span>, <span class="number">0.64216573</span>, <span class="number">0.41475495</span>, <span class="number">0.30104819</span>,</span><br><span class="line">       <span class="number">0.52046164</span>, <span class="number">0.58286043</span>, <span class="number">0.66749564</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[np.array([<span class="number">2</span>,<span class="number">1</span>])] <span class="comment"># 返回整形数组指定的项（使用整型数组）</span></span><br><span class="line">array([[<span class="number">0.30104819</span>, <span class="number">0.52046164</span>, <span class="number">0.58286043</span>, <span class="number">0.66749564</span>],</span><br><span class="line">       [<span class="number">0.82425869</span>, <span class="number">0.64216573</span>, <span class="number">0.41475495</span>, <span class="number">0.21351508</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = a.ravel()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[np.array([<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>])] <span class="comment"># 返回整形数组指定的项（使用整型数组）</span></span><br><span class="line">array([<span class="number">0.72323978</span>, <span class="number">0.64216573</span>, <span class="number">0.21351508</span>, <span class="number">0.66749564</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[np.array([[<span class="number">3</span>,<span class="number">5</span>],[<span class="number">7</span>,<span class="number">11</span>]])] <span class="comment"># 返回整形数组指定的项（使用整型数组）</span></span><br><span class="line">array([[<span class="number">0.72323978</span>, <span class="number">0.64216573</span>],</span><br><span class="line">       [<span class="number">0.21351508</span>, <span class="number">0.66749564</span>]])</span><br></pre></td></tr></table></figure><h4 id="数组-I-O"><a href="#数组-I-O" class="headerlink" title="数组 I/O"></a>数组 I/O</h4><p>所谓数组 I/O，就是讨论如何分发、交换数据。在机器学习算法模型的例子中，海量的训练数据通常都是从数据文件中读出来的，而数据文件一般是 csv 格式，NumPy 自带的 csv 文件读写函数，可以很方便的读写 csv 格式的数据文件。除了支持通用的 csv 格式的数据文件， NumPy 为数组对象引入了新的二进制文件格式，用于数据交换。后缀名为.npy 文件用于存储单个数组，后缀名为.npz 文件用于存取多个数组。</p><p>csv 文件：</p><ul><li>加载文件函数：loadtxt()</li><li>保存文件函数：savetxt()</li></ul><p>npy/npz 文件：</p><ul><li>加载文件函数：load()</li><li>保存单个文件函数：save()</li><li>保存多个文件函数：savez()</li></ul><p>NumPy 自定义的数据交换格式也是一个非常好用的数据交换方式，使用它保存 NumPy 数组时不会丢失任何信息，特别是数据类型的信息。实际操作下面的代码时，请注意结合实际情况替换对应的文件路径和文件名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>single_arr_fn = <span class="string">&#x27;single_arr.npy&#x27;</span> <span class="comment"># 存储单个数组文件名</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>multi_arr_fn = <span class="string">&#x27;multi_arr.npz&#x27;</span> <span class="comment"># 存储多个数组文件名</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lon = np.linspace(<span class="number">10</span>,<span class="number">90</span>,<span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lat = np.linspace(<span class="number">20</span>,<span class="number">60</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.save(single_arr_fn, lon) <span class="comment"># 用save()函数把经度数组保存成.npy文件</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lon = np.load(single_arr_fn) <span class="comment"># 接着用load()函数读出来</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.savez(multi_arr_fn, longitude=lon, latitude=lat) <span class="comment">#保存两个数组到一个文件</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = np.load(multi_arr_fn) <span class="comment"># 用load()函数把这个.npz文件读成一个结构data</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.files <span class="comment"># 查看所有的数组名</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data[<span class="string">&#x27;longitude&#x27;</span>] <span class="comment"># 使用data[数组名]，就可以取得想要的数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data[<span class="string">&#x27;latitude&#x27;</span>] <span class="comment"># 使用data[数组名]，就可以取得想要的数据</span></span><br></pre></td></tr></table></figure><h3 id="numpy-常用函数："><a href="#numpy-常用函数：" class="headerlink" title="numpy 常用函数："></a>numpy 常用函数：</h3><h4 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h4><p>NumPy 有两个很有趣的特殊值，np.nan 和 np.inf。nan 是 not a number 的简写，意为不是数字，inf 是 infinity 的简写，意为无穷大。np.nan 也可以写作 np.Nan、np.NaN 或者 np.NAN，np.inf 也可以写作 np.Inf 或 np.Infinity。</p><p>基本处理方法：</p><ul><li>np.isnan()</li><li>np.isinf()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">1</span>, <span class="number">2</span>, np.nan, np.inf])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.dtype</span><br><span class="line">dtype(<span class="string">&#x27;float64&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] = np.nan</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>] = np.inf</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([nan, inf, nan, inf])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] == a[<span class="number">2</span>] <span class="comment"># 两个np.nan不相等</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>] == a[<span class="number">3</span>] <span class="comment"># 两个np.inf则相等</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.isnan(a[<span class="number">0</span>]) <span class="comment"># 判断一个数字是否是np.nan</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.isinf(a[<span class="number">1</span>]) <span class="comment"># 判断一个数字是否是np.inf</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment">#nan并不会影响计算结果</span></span><br></pre></td></tr></table></figure><h4 id="函数命名空间"><a href="#函数命名空间" class="headerlink" title="函数命名空间"></a>函数命名空间</h4><p>刚开始使用 NumPy 函数的时候，你一定会有这样的困惑：</p><p>都是求和、求极值，下面这两种写法有什么区别吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.random.random(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.<span class="built_in">max</span>(), np.<span class="built_in">max</span>(a)</span><br><span class="line">(<span class="number">0.8975052328686041</span>, <span class="number">0.8975052328686041</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.<span class="built_in">sum</span>(), np.<span class="built_in">sum</span>(a)</span><br><span class="line">(<span class="number">5.255303938070831</span>, <span class="number">5.255303938070831</span>)</span><br></pre></td></tr></table></figure><p>同样是复制，为什么深复制 copy() 两种写法都行，而浅复制 view() 则只有数组的方法？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.random.random(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.copy()</span><br><span class="line">array([<span class="number">0.14712593</span>, <span class="number">0.05692805</span>, <span class="number">0.41679214</span>, <span class="number">0.62755199</span>, <span class="number">0.58272166</span>,</span><br><span class="line">       <span class="number">0.88131178</span>, <span class="number">0.26184716</span>, <span class="number">0.30175671</span>, <span class="number">0.78588028</span>, <span class="number">0.50557561</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.copy(a)</span><br><span class="line">array([<span class="number">0.14712593</span>, <span class="number">0.05692805</span>, <span class="number">0.41679214</span>, <span class="number">0.62755199</span>, <span class="number">0.58272166</span>,</span><br><span class="line">       <span class="number">0.88131178</span>, <span class="number">0.26184716</span>, <span class="number">0.30175671</span>, <span class="number">0.78588028</span>, <span class="number">0.50557561</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.view()</span><br></pre></td></tr></table></figure><p>为什么 where() 不能作为数组 ndarray 的函数，而必须作为 NumPy 的函数？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.where(a&gt;<span class="number">0.5</span>)</span><br><span class="line">(array([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>], dtype=int64),)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.where(a&gt;<span class="number">0.5</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#65&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a.where(a&gt;<span class="number">0.5</span>)</span><br><span class="line">AttributeError: <span class="string">&#x27;numpy.ndarray&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;where&#x27;</span></span><br></pre></td></tr></table></figure><p>以上这些差异，取决于函数在不同的的命名空间是否有映射。数组的大部分函数在顶层命名空间有映射，因此可以有两种用法。数组的一小部分函数，没有映射到顶层命名空间，只能有一种用法。而顶层命名空间的大部分函数，也都只有一种用法。下表整理出来的常用方法的和命名空间的关系，仅供参考。</p><table><thead><tr><th>顶层命名空间和数组对象均支持</th><th>仅数组对象均支持</th><th>仅顶层命名空间支持</th></tr></thead><tbody><tr><td>np/ndarray.any()/all()</td><td>ndarray.astype()</td><td>np.where()</td></tr><tr><td>np/ndarray.max()/min()</td><td>ndarray.fill()</td><td>np.stack()</td></tr><tr><td>np/ndarray.argsort()</td><td>ndarray.view()</td><td>np.rollaxis()</td></tr><tr><td>np/ndarray.mean()</td><td>ndarray.tolist()</td><td>np.sin()</td></tr></tbody></table><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><p>如果不熟悉 NumPy，Python 程序员一般都选择使用 math 模块来应对数学问题。从现在开始，我们可以放弃 math 模块了，因为 NumPy 的数学函数比 math 的更方便。我把这两个模块的数学函数整理了一下，分成 5 类，汇总在这里。其他诸如求和、求差、求积的函数，我把它们归类到统计函数。</p><ol><li>数学常数</li><li>舍入函数</li><li>快速转换函数</li><li>幂函数、指数函数和对数函数</li><li>部分三角函数。</li></ol><table><thead><tr><th>NumPy 函数</th><th>math 函数</th><th>功能</th></tr></thead><tbody><tr><td>np.e</td><td>math.e</td><td>自然常数</td></tr><tr><td>np.pi</td><td>math.pi</td><td>圆周率</td></tr><tr><td>np.ceil()</td><td>math.ceil()</td><td>进尾取整</td></tr><tr><td>np.floor()</td><td>nath.floor</td><td>去尾取整</td></tr><tr><td>np.around()</td><td></td><td>四舍五入到指定精度</td></tr><tr><td>np.rint()</td><td></td><td>四舍五入到最近整数</td></tr><tr><td>np.deg2rad()/radians()</td><td>math.radians</td><td>度转弧度</td></tr><tr><td>np.rad2deg()/degrees()</td><td>math.degrees()</td><td>弧度转度</td></tr><tr><td>np.hypot()</td><td>math.hypot()</td><td>计算直角三角形的斜边</td></tr><tr><td>np.square()</td><td></td><td>平方</td></tr><tr><td>np.sqrt()</td><td>math.sqrt()</td><td>开平方</td></tr><tr><td>np.power()</td><td>math.pow()</td><td>幂</td></tr><tr><td>np.exp()</td><td>math.exp()</td><td>指数</td></tr><tr><td>np.log()/log10()/log2()</td><td>math.log()/log10()/log2()</td><td>对数</td></tr><tr><td>np.sin()/arcsin()</td><td>math.sin()/asin()</td><td>正弦/反正弦</td></tr><tr><td>np.cos()/arccos()</td><td>math.cos()/acos()</td><td>余弦/反余弦</td></tr><tr><td>np.tan()/arctan()</td><td>math.tan()/atan()</td><td>正切/反正切</td></tr></tbody></table><h4 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h4><p>NumPy 的统计函数有很多，我整理了一下，大约可以分成 4 类：</p><ol><li>查找特殊值</li><li>求和差积</li><li>均值和方差</li><li>相关系数</li></ol><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>np.max/min(a, axis=None) np.nanmax/nanmin(a, axis=None)</td><td>返回数组中的最大值/最小值 忽略 nan 返回数组中的最大值/最小值</td></tr><tr><td>np.argmax/argmin(a, axis=None) np.nanargmax/nanargmin(a, axis=None)</td><td>返回数组中最大值和最小值的索引 忽略 nan 返回数组中最大值和最小值的索引</td></tr><tr><td>np.ptp(a, axis=None)</td><td>返回数组中元素最大值与最小值的差</td></tr><tr><td>np.median(a, axis=None) np.nanmedian(a, axis=None)</td><td>返回数组元素的中位数 忽略 nan 返回数组元素的中位数</td></tr><tr><td>np.sum(a, axis=None) np.nansum(a, axis=None)</td><td>按指定的轴求元素之和 忽略 nan 按指定的轴求元素之和</td></tr><tr><td>np.cumsum(a, axis=None) np.nancumsum(a, axis=None)</td><td>按指定的轴求元素的累进和 忽略 nan 按指定的轴求元素的累进和</td></tr><tr><td>np.diff(a, axis=-1)</td><td>按指定的轴返回相邻元素的差</td></tr><tr><td>np.prod(a, axis=None) np.nanprod(a, axis=None)</td><td>按指定的轴求元素之积 忽略 nan 按指定的轴求元素之积</td></tr><tr><td>np.mean(a, axis=None) np.nanmean(a, axis=None)</td><td>按指定的轴返回元素的算数平均值 忽略 nan 按指定的轴返回元素的算数平均值</td></tr><tr><td>np.average()</td><td>根据权重数据，返回数据数组所有元素的加权平均值</td></tr><tr><td>np.var(a) np.nanvar(a)</td><td>返回数组方差 忽略 nan 返回数组方差</td></tr><tr><td>np.std() np.nanstd()</td><td>返回数组标准差 忽略 nan 返回数组标准差</td></tr><tr><td>np.corrcoef(a, b)</td><td>返回两个数组的皮尔逊积矩相关系数</td></tr></tbody></table><h2 id="python-数据处理包——pandas"><a href="#python-数据处理包——pandas" class="headerlink" title="python 数据处理包——pandas"></a>python 数据处理包——pandas</h2><h3 id="pandas-介绍"><a href="#pandas-介绍" class="headerlink" title="pandas 介绍"></a>pandas 介绍</h3><p>Pandas 是基于 Numpy 的。但 Numpy 只能处理数字，若想处理其他类型的数据，如字符串等，就得依靠 Pandas。pandas 有两种数据类型，一维 Series 和二维 Dataframe,由于最常用的是 DataFrame 所以这边直接开始介绍 DataFrame</p><h3 id="pandas-下载"><a href="#pandas-下载" class="headerlink" title="pandas 下载"></a>pandas 下载</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda innstall pandas #conda安装</span><br><span class="line">pip install pandas #pip安装</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd<span class="comment">#导入pandas</span></span><br></pre></td></tr></table></figure><h3 id="dataframe-创建数据表"><a href="#dataframe-创建数据表" class="headerlink" title="dataframe 创建数据表"></a>dataframe 创建数据表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.DataFrame( data, index, columns, dtype, copy)</span><br></pre></td></tr></table></figure><p>DataFrame参数说明：</p><table><thead><tr><th>参数</th><th>效果</th></tr></thead><tbody><tr><td>data</td><td>一组数据</td></tr><tr><td>index</td><td>索引值，或者可以理解为行标签</td></tr><tr><td>columns</td><td>列标签</td></tr><tr><td>dtype</td><td>数据类型</td></tr><tr><td>copy</td><td>拷贝数据，默认是FALSE</td></tr></tbody></table><p>pandas 属性：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>df.shape</td><td>维度查看</td></tr><tr><td>df.info()</td><td>数据表基本信息（维度、列名称、数据格式、所占空间等）</td></tr><tr><td>df.dtypes</td><td>每一列数据的格式</td></tr><tr><td>index</td><td>索引</td></tr><tr><td>df.size</td><td>元素个数</td></tr><tr><td>df.values</td><td>查看数据表的值</td></tr><tr><td>df.columns</td><td>查看列名称</td></tr><tr><td>ndim</td><td>维度数</td></tr></tbody></table><p>pandas 读取文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(pd.read_csv(<span class="string">&#x27;name.csv&#x27;</span>,header=<span class="number">1</span>))<span class="comment">#读取csv</span></span><br><span class="line">df = pd.DataFrame(pd.read_excel(<span class="string">&#x27;name.xlsx&#x27;</span>))<span class="comment">#读取Excel</span></span><br><span class="line">df = pd.read_table(<span class="string">r&#x27;DATA.txt&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>, index_col=<span class="number">0</span>)<span class="comment">#读取txt文本</span></span><br><span class="line">data.to_csv(<span class="string">&quot;地址&quot;</span>)<span class="comment">#保存csv文本文件</span></span><br><span class="line">data.to_excel(<span class="string">&quot;地址&quot;</span>)<span class="comment">#保存excel文本文件</span></span><br></pre></td></tr></table></figure><p>pandas 创建数据表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一种：python中的字典生成</span></span><br><span class="line">employees = &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;shawn&#x27;</span>, <span class="string">&#x27;program language&#x27;</span>: [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>]&#125;</span><br><span class="line">emp_df = pd.DataFrame(employees)</span><br><span class="line"><span class="comment">#第二种： 利用指定的列内容、索引以及数据</span></span><br><span class="line">colums = [<span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>]</span><br><span class="line">dates = pd.date_range(<span class="string">&#x27;20190101&#x27;</span>, periods=<span class="number">6</span>)</span><br><span class="line">num_df = pd.DataFrame(data=np.random.randn(<span class="number">6</span>, <span class="number">3</span>), index=dates, columns=colums)</span><br><span class="line"><span class="comment">#第三种：利用pandas的series</span></span><br><span class="line">emp = pd.DataFrame.from_dict(</span><br><span class="line">    &#123;<span class="string">&#x27;age&#x27;</span>: pd.Series([<span class="number">23</span>,<span class="number">43</span>,<span class="number">23</span>,<span class="number">25</span>], index=[<span class="string">&#x27;shawn&#x27;</span>,<span class="string">&#x27;olivia&#x27;</span>, <span class="string">&#x27;Gene&#x27;</span>, <span class="string">&#x27;Herry&#x27;</span>]),</span><br><span class="line">       <span class="string">&#x27;gender&#x27;</span>: pd.Series([<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="string">&#x27;female&#x27;</span>], index=[<span class="string">&#x27;shawn&#x27;</span>,<span class="string">&#x27;olivia&#x27;</span>, <span class="string">&#x27;Gene&#x27;</span>, <span class="string">&#x27;Herry&#x27;</span>]),</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"><span class="comment">#第四种利用列表构建</span></span><br><span class="line">name = [<span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;krish&#x27;</span>, <span class="string">&#x27;nick&#x27;</span>, <span class="string">&#x27;juli&#x27;</span>]  </span><br><span class="line">age = [<span class="number">25</span>, <span class="number">30</span>, <span class="number">26</span>, <span class="number">22</span>]  </span><br><span class="line"><span class="comment">#[(&#x27;tom&#x27;, 25), (&#x27;krish&#x27;, 30), (&#x27;nick&#x27;, 26), (&#x27;juli&#x27;, 22)]</span></span><br><span class="line">emp_df = pd.DataFrame(<span class="built_in">list</span>(<span class="built_in">zip</span>(name, age)), columns = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]) </span><br><span class="line"><span class="comment">#第五种利用ndarray创建DataFrame</span></span><br><span class="line"><span class="comment">#普通创建</span></span><br><span class="line">&gt;&gt;&gt; data = np.random.randn(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt; df = pd.DataFrame(data)</span><br><span class="line"><span class="comment">#设置列名创建</span></span><br><span class="line">&gt;&gt;&gt; data = np.random.randn(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt; df = pd.DataFrame(data, columns=<span class="built_in">list</span>(<span class="string">&quot;ABC&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="列索引操作"><a href="#列索引操作" class="headerlink" title="列索引操作"></a>列索引操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">创建数据</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df_obj = pd.DataFrame(np.random.randn(<span class="number">5</span>, <span class="number">4</span>), columns=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(df_obj.head())</span><br><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">0</span>  <span class="number">0.781380</span> -<span class="number">1.074496</span> -<span class="number">1.448204</span> -<span class="number">0.313385</span></span><br><span class="line"><span class="number">1</span> -<span class="number">0.568288</span>  <span class="number">2.011669</span>  <span class="number">0.955440</span>  <span class="number">1.617713</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.222755</span> -<span class="number">1.507924</span> -<span class="number">0.903779</span>  <span class="number">1.301956</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.706442</span> -<span class="number">0.503069</span> -<span class="number">1.561416</span> -<span class="number">0.290718</span></span><br><span class="line"><span class="number">4</span> -<span class="number">1.071889</span> -<span class="number">0.280071</span> -<span class="number">2.033153</span>  <span class="number">1.618598</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 读取单列  传入列的值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(df_obj[<span class="string">&#x27;a&#x27;</span>])  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 读取多列 不连续索引</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(df_obj[[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 添加新列，直接进行赋值操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df_obj[<span class="string">&#x27;e&#x27;</span>] = pd.Series([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>])</span><br><span class="line"><span class="comment">#insert(索引位置,columns=&#x27;列名&#x27;,value=&#x27;值&#x27;) 插入新列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df_obj.insert(<span class="number">1</span>, column=<span class="string">&#x27;f&#x27;</span>, value=[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>])  <span class="comment"># 插入一列为不同数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(df_obj)</span><br><span class="line">          a   f         b         c         d   e</span><br><span class="line"><span class="number">0</span>  <span class="number">1.520003</span>  <span class="number">10</span>  <span class="number">0.375014</span>  <span class="number">0.059027</span>  <span class="number">1.171379</span>  <span class="number">10</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.099122</span>  <span class="number">20</span>  <span class="number">0.096940</span> -<span class="number">0.189679</span> -<span class="number">0.046981</span>  <span class="number">20</span></span><br><span class="line"><span class="number">2</span> -<span class="number">2.270308</span>  <span class="number">30</span> -<span class="number">0.759622</span>  <span class="number">0.660129</span> -<span class="number">1.017288</span>  <span class="number">30</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2.010634</span>  <span class="number">40</span>  <span class="number">1.456483</span> -<span class="number">0.741796</span> -<span class="number">0.280938</span>  <span class="number">40</span></span><br><span class="line"><span class="number">4</span>  <span class="number">2.120968</span>  <span class="number">50</span>  <span class="number">1.077172</span> -<span class="number">1.616609</span> -<span class="number">1.069243</span>  <span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df_obj.insert(<span class="number">1</span>, column=<span class="string">&#x27;g&#x27;</span>, value=<span class="number">111</span>)  <span class="comment"># 插入一列为相同数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(df_obj)</span><br><span class="line">          a    g   f         b         c         d   e</span><br><span class="line"><span class="number">0</span>  <span class="number">1.520003</span>  <span class="number">111</span>  <span class="number">10</span>  <span class="number">0.375014</span>  <span class="number">0.059027</span>  <span class="number">1.171379</span>  <span class="number">10</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.099122</span>  <span class="number">111</span>  <span class="number">20</span>  <span class="number">0.096940</span> -<span class="number">0.189679</span> -<span class="number">0.046981</span>  <span class="number">20</span></span><br><span class="line"><span class="number">2</span> -<span class="number">2.270308</span>  <span class="number">111</span>  <span class="number">30</span> -<span class="number">0.759622</span>  <span class="number">0.660129</span> -<span class="number">1.017288</span>  <span class="number">30</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2.010634</span>  <span class="number">111</span>  <span class="number">40</span>  <span class="number">1.456483</span> -<span class="number">0.741796</span> -<span class="number">0.280938</span>  <span class="number">40</span></span><br><span class="line"><span class="number">4</span>  <span class="number">2.120968</span>  <span class="number">111</span>  <span class="number">50</span>  <span class="number">1.077172</span> -<span class="number">1.616609</span> -<span class="number">1.069243</span>  <span class="number">50</span></span><br><span class="line"><span class="comment">#删除列 del()或者pop()都可以删除列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> df_obj[<span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df_obj.pop(<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="索引读取数据操作"><a href="#索引读取数据操作" class="headerlink" title="索引读取数据操作"></a>索引读取数据操作</h3><table><thead><tr><th>操作</th><th>语法</th><th>结果</th></tr></thead><tbody><tr><td>选择列</td><td><code>df[col]</code>或<code>df.col</code></td><td><code>Series</code></td></tr><tr><td>按列值选择行</td><td><code>df.loc[label]</code></td><td><code>Series</code></td></tr><tr><td>按整数位置选择行</td><td><code>df.iloc[loc]</code></td><td><code>Series</code></td></tr><tr><td>对行切片</td><td><code>df[5:10]</code></td><td><code>DataFrame</code></td></tr><tr><td>按布尔向量选择行</td><td><code>df[bool_vec]</code></td><td><code>DataFrame</code></td></tr></tbody></table><p><strong>注意：loc区间是左闭右闭，iloc是左闭右开</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#标签索引 dataframe不能直接进行切片，可以通过loc来做切片，loc是基于标签名的索引，也就是我们定义的列值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 第一个参数索引行，第二个参数是列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(df_obj.loc[<span class="number">0</span>:<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="number">0</span>    <span class="number">0.237575</span></span><br><span class="line"><span class="number">1</span>    <span class="number">0.294029</span></span><br><span class="line"><span class="number">2</span>    <span class="number">0.151643</span></span><br><span class="line">Name: a, dtype: float64</span><br><span class="line"><span class="comment">#位置索引 作用和loc一样，不过是基于索引编号来索引</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(df_obj.iloc[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>]) </span><br><span class="line"><span class="number">0</span>    <span class="number">0.237575</span></span><br><span class="line"><span class="number">1</span>    <span class="number">0.294029</span></span><br><span class="line">Name: a, dtype: float64</span><br><span class="line"> <span class="comment">#切片索引  行索引，取前两行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(df_obj[<span class="number">0</span>:<span class="number">2</span>])  <span class="comment"># 左闭右开</span></span><br><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">0</span> -<span class="number">0.008962</span> -<span class="number">1.440611</span> -<span class="number">0.241749</span> -<span class="number">0.328990</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.722666</span> -<span class="number">0.968137</span>  <span class="number">0.752607</span>  <span class="number">0.060432</span></span><br><span class="line"><span class="comment">#添加行  append()函数可以把新的DataFrame对象追加到原对象后面，在行末尾再追加</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df_obj1 = pd.DataFrame([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]], columns=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(df_obj1)</span><br><span class="line">   a  b  c  d</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df_obj = df_obj.append(df_obj1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(df_obj)</span><br><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">0</span> -<span class="number">0.214975</span> -<span class="number">1.574176</span>  <span class="number">0.005630</span>  <span class="number">0.372708</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.951436</span>  <span class="number">0.725618</span>  <span class="number">1.275498</span>  <span class="number">2.072770</span></span><br><span class="line"><span class="number">2</span> -<span class="number">1.739804</span> -<span class="number">0.375916</span> -<span class="number">0.588529</span> -<span class="number">0.045825</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.048349</span> -<span class="number">0.015041</span>  <span class="number">0.953475</span>  <span class="number">1.369060</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1.515951</span> -<span class="number">1.453001</span>  <span class="number">0.921479</span> -<span class="number">0.338588</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.000000</span>  <span class="number">2.000000</span>  <span class="number">3.000000</span>  <span class="number">4.000000</span></span><br><span class="line"><span class="comment">#删除行  使用drop(索引)即可删除指定行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df_obj = df_obj.drop(<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df_obj = df_obj.drop(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(df_obj)</span><br><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">2</span> -<span class="number">1.739804</span> -<span class="number">0.375916</span> -<span class="number">0.588529</span> -<span class="number">0.045825</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.048349</span> -<span class="number">0.015041</span>  <span class="number">0.953475</span>  <span class="number">1.369060</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1.515951</span> -<span class="number">1.453001</span>  <span class="number">0.921479</span> -<span class="number">0.338588</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据的修改和查找"><a href="#数据的修改和查找" class="headerlink" title="数据的修改和查找"></a>数据的修改和查找</h3><p>用 rename 修改行标签或者列名称。<br>直接用 df.series 同==,&gt;,&lt;等逻辑运算符获取满足特定关系的 df 数据<br>也可以用 between、isin 方法获取在之间，匹配某些数量的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data.rename(columns = &#123;<span class="string">&#x27;user_id&#x27;</span>:<span class="string">&#x27;用户ID&#x27;</span>&#125;)<span class="comment">#用rename修改列标签，使用字典的形式；</span></span><br><span class="line">data.rename(index = &#123;<span class="number">1</span>:<span class="number">11</span>, <span class="number">2</span>:<span class="number">22</span>&#125;, inplace = <span class="literal">True</span>)<span class="comment">#用rename修改行标签，使用字典的形式；</span></span><br><span class="line"><span class="comment">#DataFrame.loc[行索引名称或条件, 列索引名称] = new_value</span></span><br><span class="line"></span><br><span class="line">data.loc[data[<span class="string">&#x27;性别&#x27;</span>] == <span class="number">0</span>, <span class="string">&#x27;性别&#x27;</span>] = <span class="string">&#x27;女性&#x27;</span><span class="comment">#data[&#x27;性别&#x27;] == 0为行索引,&#x27;性别&#x27;为列索引</span></span><br><span class="line">data.loc[data[<span class="string">&#x27;性别&#x27;</span>] == <span class="number">1</span>, <span class="string">&#x27;性别&#x27;</span>] = <span class="string">&#x27;男性&#x27;</span> </span><br><span class="line">data.loc[data[<span class="string">&#x27;性别&#x27;</span>] == <span class="number">2</span>, <span class="string">&#x27;性别&#x27;</span>] = <span class="string">&#x27;未知&#x27;</span></span><br><span class="line"></span><br><span class="line">data[data[<span class="string">&#x27;buy_mount&#x27;</span>]&gt;<span class="number">80</span>]<span class="comment">#获取名称为&#x27;buy_mount&#x27;列的数据中大于80的数据,通过行索引获得</span></span><br><span class="line"><span class="built_in">print</span>(data[(data[<span class="string">&#x27;buy_mount&#x27;</span>] &lt; <span class="number">80</span>) &amp; (data[<span class="string">&#x27;性别&#x27;</span>] == <span class="string">&#x27;男性&#x27;</span>)])</span><br><span class="line"><span class="built_in">print</span>(data[data[<span class="string">&#x27;buy_mount&#x27;</span>].isin([<span class="number">80</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">98</span>])])<span class="comment">#buy_mount 列数值属于list[80, 88, 89, 90]的数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dataframe-运算操作"><a href="#dataframe-运算操作" class="headerlink" title="dataframe 运算操作"></a>dataframe 运算操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df1+df2 <span class="comment">#df1和df2相加。结构必须相同</span></span><br><span class="line">df * <span class="number">5</span> + <span class="number">2</span> <span class="comment">#每个元素乘5加2</span></span><br><span class="line"><span class="number">1</span> / df  <span class="comment">#1除以df里面每个元素</span></span><br><span class="line">df ** <span class="number">4</span> <span class="comment">#df每个元素镜像四次幂运算</span></span><br><span class="line">df1 &amp; df2 <span class="comment">#dataframe对应位置可以做布尔运算</span></span><br><span class="line">df.T <span class="comment">#和ndarray一样，要进行转置，访问T属性或者调用DataFrame.transpose()方法</span></span><br></pre></td></tr></table></figure><h3 id="数据统计与排序"><a href="#数据统计与排序" class="headerlink" title="数据统计与排序"></a>数据统计与排序</h3><p>数据统计信息显示采用 discribe()方法；<br>数据排序使用:<br>df. sort_values(by, axis=0, ascending=True, inplace=False, kind=‘quicksort’, na_position=‘last’),基于某几行或列的值进行排列。<br>df. sort_index(axis=0, level=None, ascending=True, inplace=False, kind=‘quicksort’, na_position=‘last’, sort_remaining=True, by=None)，基于行或列标签进行排列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df1.describe())<span class="comment">#只对数字类参数有用，输出每一列的均值、标准差、最大、最小值和25%/50%/75%的值</span></span><br><span class="line"><span class="built_in">print</span>(df1.sort_index(axis = <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(df1.sort_values(by = [<span class="string">&#x27;Bid_Count&#x27;</span>, <span class="string">&#x27;Price&#x27;</span>]))<span class="comment">#根据指定的列名称及其优先级顺序，对整个列表进行排序。</span></span><br></pre></td></tr></table></figure><h3 id="DataFrame-与-NumPy-函数的互操作"><a href="#DataFrame-与-NumPy-函数的互操作" class="headerlink" title="DataFrame 与 NumPy 函数的互操作"></a>DataFrame 与 NumPy 函数的互操作</h3><p>大多数 NumPy 函数可以在<code>Series</code>和<code>DataFrame</code>上直接调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.<span class="built_in">abs</span>(df)<span class="comment">#求取df里面每个绝对值</span></span><br><span class="line">np.asarray(df) <span class="comment">#把df转换成数组</span></span><br></pre></td></tr></table></figure><p>当传递两个 pandas 对象给 NumPy 函数时，会先进行对齐再执行函数操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ser1 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">ser2 = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], index=[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">np.remainder(ser1, ser2) <span class="comment">#ser1%ser2</span></span><br></pre></td></tr></table></figure><p>与<code>Series</code>一样，可以使用<code>DataFrame.to_numpy()</code>方法获得相应的 ndarray</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_numpy()</span><br></pre></td></tr></table></figure><h3 id="数据表清洗"><a href="#数据表清洗" class="headerlink" title="数据表清洗"></a>数据表清洗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(value=<span class="number">0</span>)<span class="comment">#用数字0填充空值</span></span><br><span class="line">df[<span class="string">&#x27;prince&#x27;</span>].fillna(df[<span class="string">&#x27;prince&#x27;</span>].mean()) <span class="comment">#使用列prince的均值对NA进行填充</span></span><br><span class="line">df[<span class="string">&#x27;city&#x27;</span>]=df[<span class="string">&#x27;city&#x27;</span>].<span class="built_in">map</span>(<span class="built_in">str</span>.strip) <span class="comment">#清除city字段的字符空格</span></span><br><span class="line">df[<span class="string">&#x27;city&#x27;</span>]=df[<span class="string">&#x27;city&#x27;</span>].<span class="built_in">str</span>.lower() <span class="comment">#大小写转换</span></span><br><span class="line">df[<span class="string">&#x27;price&#x27;</span>].astype(<span class="string">&#x27;int&#x27;</span>)  <span class="comment">#更改数据格式，可以把标签变量变成数字变量</span></span><br><span class="line">df.rename(columns=&#123;<span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;category-size&#x27;</span>&#125;) <span class="comment">#更改列名称</span></span><br><span class="line">df[<span class="string">&#x27;city&#x27;</span>].drop_duplicates()<span class="comment">#删除后出现的重复值</span></span><br><span class="line">df[<span class="string">&#x27;city&#x27;</span>].drop_duplicates(keep=<span class="string">&#x27;last&#x27;</span>)<span class="comment">#删除先出现的重复值</span></span><br><span class="line">df[<span class="string">&#x27;city&#x27;</span>].replace(<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;shanghai&#x27;</span>)<span class="comment">#数据替换</span></span><br></pre></td></tr></table></figure><p>pandas库基于NumPy，自然也可以用这些函数对数据框进行描述性统计。pandas还提供了更加便利的方法来计算均值</p><table><thead><tr><th><strong>方法名称</strong></th><th><strong>说明</strong></th><th><strong>方法名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>min</td><td>最小值</td><td>max</td><td>最大值</td></tr><tr><td>mean</td><td>均值</td><td>ptp</td><td>极差</td></tr><tr><td>median</td><td>中位数</td><td>std</td><td>标准差</td></tr><tr><td>var</td><td>方差</td><td>cov</td><td>协方差</td></tr><tr><td>sem</td><td>标准误差</td><td>mode</td><td>众数</td></tr><tr><td>skew</td><td>样本偏度</td><td>kurt</td><td>样本峰度</td></tr><tr><td>quantile</td><td>四分位数</td><td>count</td><td>非空值数目</td></tr><tr><td>describe</td><td>描述统计</td><td>mad</td><td>平均绝对离差</td></tr></tbody></table><h3 id="数据表合并"><a href="#数据表合并" class="headerlink" title="数据表合并"></a>数据表合并</h3><p>merge</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_inner=pd.merge(df,df1,how=<span class="string">&#x27;inner&#x27;</span>)  <span class="comment"># 匹配合并，交集</span></span><br><span class="line">df_left=pd.merge(df,df1,how=<span class="string">&#x27;left&#x27;</span>)        <span class="comment">#</span></span><br><span class="line">df_right=pd.merge(df,df1,how=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">df_outer=pd.merge(df,df1,how=<span class="string">&#x27;outer&#x27;</span>)  <span class="comment">#并集</span></span><br></pre></td></tr></table></figure><p>append</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = df1.append(df2)  <span class="comment">#进行行合并 并且添加在最后一行</span></span><br></pre></td></tr></table></figure><p>join</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = left.join(right, on=<span class="string">&#x27;key&#x27;</span>) <span class="comment">#进行列合并</span></span><br></pre></td></tr></table></figure><p>concat</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pd.concat(objs, axis=<span class="number">0</span>, join=<span class="string">&#x27;outer&#x27;</span>, join_axes=<span class="literal">None</span>, ignore_index=<span class="literal">False</span>,</span><br><span class="line">          keys=<span class="literal">None</span>, levels=<span class="literal">None</span>, names=<span class="literal">None</span>, verify_integrity=<span class="literal">False</span>,</span><br><span class="line">          copy=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>objs︰ 一个序列或系列、 综合或面板对象的映射。如果字典中传递，将作为键参数，使用排序的键，除非它传递，在这种情况下的值将会选择</li><li>（见下文）。任何没有任何反对将默默地被丢弃，除非他们都没有在这种情况下将引发 ValueError。</li><li>axis: {0，1，…}，默认值为 0。要连接沿轴。</li><li>join: {‘内部’、 ‘外’}，默认 ‘外’。如何处理其他 axis(es) 上的索引。联盟内、 外的交叉口。</li><li>ignore_index︰ 布尔值、 默认 False。如果为 True，则不要串联轴上使用的索引值。由此产生的轴将标记</li><li>0，…，n-1。这是有用的如果你串联串联轴没有有意义的索引信息的对象。请注意在联接中仍然受到尊重的其他轴上的索引值。</li><li>join_axes︰ 索引对象的列表。具体的指标，用于其他 n-1 轴而不是执行内部/外部设置逻辑。 keys︰</li><li>序列，默认为无。构建分层索引使用通过的键作为最外面的级别。如果多个级别获得通过，应包含元组。</li><li>levels︰ 列表的序列，默认为无。具体水平 （唯一值） 用于构建多重。否则，他们将推断钥匙。</li><li>names︰ 列表中，默认为无。由此产生的分层索引中的级的名称。</li><li>verify_integrity︰ 布尔值、 默认 False。检查是否新的串联的轴包含重复项。这可以是相对于实际数据串联非常昂贵。</li><li>副本︰ 布尔值、 默认 True。如果为 False，请不要，不必要地复制数据。</li></ul><h3 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h3><h4 id="使用groupby方法拆分数据。"><a href="#使用groupby方法拆分数据。" class="headerlink" title="使用groupby方法拆分数据。"></a>使用groupby方法拆分数据。</h4><p>用groupby方法分组后的结果并不能直接查看，而是被存在内存中，输出的是内存地址。实际上分组后的数据对象GroupBy类似Series与DataFrame，是pandas提供的一种对象。GroupBy对象常用的描述性统计方法如下。</p><table><thead><tr><th><strong>方法名称</strong></th><th><strong>说明</strong></th><th><strong>方法名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>count</td><td>计算分组的数目，包括缺失值。</td><td>cumcount</td><td>对每个分组中组员的进行标记，0至n-1。</td></tr><tr><td>head</td><td>返回每组的前n个值。</td><td>size</td><td>返回每组的大小。</td></tr><tr><td>max</td><td>返回每组最大值。</td><td>min</td><td>返回每组最小值。</td></tr><tr><td>mean</td><td>返回每组的均值。</td><td>std</td><td>返回每组的标准差。</td></tr><tr><td>median</td><td>返回每组的中位数。</td><td>sum</td><td>返回每组的和。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">dict_obj = &#123;<span class="string">&#x27;key1&#x27;</span> : [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;key2&#x27;</span> : [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;data1&#x27;</span>: np.random.randn(<span class="number">8</span>),</span><br><span class="line">            <span class="string">&#x27;data2&#x27;</span>: np.random.randn(<span class="number">8</span>)&#125;</span><br><span class="line">df_obj = pd.DataFrame(dict_obj)</span><br><span class="line"><span class="comment"># dataframe根据key1进行分组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df_obj.groupby(<span class="string">&#x27;key1&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># dataframe的 data1 列根据 key1 进行分组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df_obj[<span class="string">&#x27;data1&#x27;</span>].groupby(df_obj[<span class="string">&#x27;key1&#x27;</span>])))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>GroupBy对象支持迭代操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单层分组，根据key1</span></span><br><span class="line"><span class="keyword">for</span> group_name, group_data <span class="keyword">in</span> grouped1:</span><br><span class="line">    <span class="built_in">print</span>(group_name)</span><br><span class="line">    <span class="built_in">print</span>(group_data)</span><br><span class="line">a</span><br><span class="line">      data1     data2 key1   key2</span><br><span class="line"><span class="number">0</span>  <span class="number">0.974685</span> -<span class="number">0.672494</span>    a    one</span><br><span class="line"><span class="number">2</span>  <span class="number">1.508838</span>  <span class="number">0.392787</span>    a    two</span><br><span class="line"><span class="number">4</span>  <span class="number">1.347359</span> -<span class="number">0.177858</span>    a    two</span><br><span class="line"><span class="number">6</span> -<span class="number">0.624708</span>  <span class="number">0.450885</span>    a    one</span><br><span class="line"><span class="number">7</span> -<span class="number">1.019229</span> -<span class="number">1.143825</span>    a  three</span><br><span class="line"></span><br><span class="line">b</span><br><span class="line">      data1     data2 key1   key2</span><br><span class="line"><span class="number">1</span> -<span class="number">0.214324</span>  <span class="number">0.758372</span>    b    one</span><br><span class="line"><span class="number">3</span>  <span class="number">0.522911</span>  <span class="number">0.630814</span>    b  three</span><br><span class="line"><span class="number">5</span> -<span class="number">0.264616</span>  <span class="number">1.017155</span>    b    two</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多层分组，根据key1 和 key2</span></span><br><span class="line"><span class="keyword">for</span> group_name, group_data <span class="keyword">in</span> grouped2:</span><br><span class="line">    <span class="built_in">print</span>(group_name)</span><br><span class="line">    <span class="built_in">print</span>(group_data)</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;one&#x27;</span>)</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="number">0</span>  <span class="number">0.974685</span> -<span class="number">0.672494</span>    a  one</span><br><span class="line"><span class="number">6</span> -<span class="number">0.624708</span>  <span class="number">0.450885</span>    a  one</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;three&#x27;</span>)</span><br><span class="line">      data1     data2 key1   key2</span><br><span class="line"><span class="number">7</span> -<span class="number">1.019229</span> -<span class="number">1.143825</span>    a  three</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="number">2</span>  <span class="number">1.508838</span>  <span class="number">0.392787</span>    a  two</span><br><span class="line"><span class="number">4</span>  <span class="number">1.347359</span> -<span class="number">0.177858</span>    a  two</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;one&#x27;</span>)</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="number">1</span> -<span class="number">0.214324</span>  <span class="number">0.758372</span>    b  one</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;three&#x27;</span>)</span><br><span class="line">      data1     data2 key1   key2</span><br><span class="line"><span class="number">3</span>  <span class="number">0.522911</span>  <span class="number">0.630814</span>    b  three</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="number">5</span> -<span class="number">0.264616</span>  <span class="number">1.017155</span>    b  two</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>GroupBy可以转换成列表或者字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GroupBy对象转换list</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(grouped1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># GroupBy对象转换dict</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(<span class="built_in">list</span>(grouped1)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用agg方法聚合数据"><a href="#使用agg方法聚合数据" class="headerlink" title="使用agg方法聚合数据"></a>使用agg方法聚合数据</h4><p>agg，aggregate方法都支持对每个分组应用某函数，包括Python内置函数或自定义函数。同时这两个方法能够也能够直接对DataFrame进行函数应用操作。</p><p>在正常使用过程中，agg函数和aggregate函数对DataFrame对象操作时功能几乎完全相同，因此只需要掌握其中一个函数即可。它们的参数说明如下表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.agg(func, axis=<span class="number">0</span>, *args, **kwargs)</span><br><span class="line">DataFrame.aggregate(func, axis=<span class="number">0</span>, *args, **kwargs</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>func</td><td>接收list、dict、function。表示应用于每行／每列的函数。无默认。</td></tr><tr><td>axis</td><td>接收0或1。代表操作的轴向。默认为0。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以使用agg方法一次求出当前数据中所有菜品销量和售价的总和与均值</span></span><br><span class="line">detail[[<span class="string">&#x27;counts&#x27;</span>,<span class="string">&#x27;amounts&#x27;</span>]].agg([np.<span class="built_in">sum</span>,np.mean]))</span><br><span class="line"><span class="comment">#对于某个字段希望只做求均值操作，而对另一个字段则希望只做求和操作，可以使用字典的方式，将两个字段名分别作为key，然后将NumPy库的求和与求均值的函数分别作为value</span></span><br><span class="line">detail.agg(&#123;<span class="string">&#x27;counts&#x27;</span>:np.<span class="built_in">sum</span>,<span class="string">&#x27;amounts&#x27;</span>:np.mean&#125;))</span><br><span class="line"><span class="comment">#在某些时候还希望求出某个字段的多个统计量，某些字段则只需要求一个统计量，此时只需要将字典对应key的value变为列表，列表元素为多个目标的统计量即可</span></span><br><span class="line">detail.agg(&#123;<span class="string">&#x27;counts&#x27;</span>:np.<span class="built_in">sum</span>,<span class="string">&#x27;amounts&#x27;</span>:[np.mean,np.<span class="built_in">sum</span>]&#125;))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;在agg方法可传入自定义的函数。</span></span><br><span class="line"><span class="string">使用自定义函数需要注意的是NumPy库中的函数np.mean，np.median，np.prod，np.sum，np.std，np.var能够在agg中直接使用，但是在自定义函数中使用NumPy库中的这些函数，如果计算的时候是单个序列则会无法得出想要的结果，如果是多列数据同时计算则不会出现这种问题。</span></span><br><span class="line"><span class="string">使用agg方法能够实现对每一个字段每一组使用相同的函数。</span></span><br><span class="line"><span class="string">如果需要对不同的字段应用不同的函数，则可以和Dataframe中使用agg方法相同。&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="使用apply方法聚合数据"><a href="#使用apply方法聚合数据" class="headerlink" title="使用apply方法聚合数据"></a>使用apply方法聚合数据</h4><p>apply方法类似agg方法能够将函数应用于每一列。不同之处在于apply方法相比agg方法传入的函数只能够作用于整个DataFrame或者Series，而无法像agg一样能够对不同字段，应用不同函数获取不同结果。<br>使用apply方法对GroupBy对象进行聚合操作其方法和agg方法也相同，只是使用agg方法能够实现对不同的字段进行应用不同的函数，而apply则不行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.apply(func, axis=<span class="number">0</span>, broadcast=<span class="literal">False</span>, raw=<span class="literal">False</span>, reduce=<span class="literal">None</span>, args=(), **kwds)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>func</td><td>接收functions。表示应用于每行／列的函数。无默认。</td></tr><tr><td>axis</td><td>接收0或1。代表操作的轴向。默认为0。</td></tr><tr><td>broadcast</td><td>接收boolearn。表示是否进行广播。默认为False。</td></tr><tr><td>raw</td><td>接收boolearn。表示是否直接将ndarray对象传递给函数。默认为False。</td></tr><tr><td>reduce</td><td>接收boolearn或者None。表示返回值的格式。默认None。</td></tr></tbody></table><h4 id="使用transform方法聚合数据"><a href="#使用transform方法聚合数据" class="headerlink" title="使用transform方法聚合数据"></a>使用transform方法聚合数据</h4><ul><li>transform方法能够对整个DataFrame的所有元素进行操作。且transform方法只有一个参数“func”，表示对DataFrame操作的函数。</li><li>同时transform方法还能够对DataFrame分组后的对象GroupBy进行操作，可以实现组内离差标准化等操作。</li><li>若在计算离差标准化的时候结果中有NaN，这是由于根据离差标准化公式，最大值和最小值相同的情况下分母是0。而分母为0的数在Python中表示为NaN。</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <summary type="html">数据预处理</summary>
    
    
    
    
  </entry>
  
</feed>
